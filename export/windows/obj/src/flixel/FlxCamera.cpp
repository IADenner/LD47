// Generated by Haxe 4.1.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawBaseItem
#include <flixel/graphics/tile/FlxDrawBaseItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawItemType
#include <flixel/graphics/tile/FlxDrawItemType.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawQuadsItem
#include <flixel/graphics/tile/FlxDrawQuadsItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawTrianglesItem
#include <flixel/graphics/tile/FlxDrawTrianglesItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxColorTransformUtil
#include <flixel/util/FlxColorTransformUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d1aae230bd422321_45_new,"flixel.FlxCamera","new",0x0e8a9f77,"flixel.FlxCamera.new","flixel/FlxCamera.hx",45,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_508_startQuadBatch,"flixel.FlxCamera","startQuadBatch",0xe17326fa,"flixel.FlxCamera.startQuadBatch","flixel/FlxCamera.hx",508,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_569_startTrianglesBatch,"flixel.FlxCamera","startTrianglesBatch",0xb3a3b828,"flixel.FlxCamera.startTrianglesBatch","flixel/FlxCamera.hx",569,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_587_getNewDrawTrianglesItem,"flixel.FlxCamera","getNewDrawTrianglesItem",0xcd894887,"flixel.FlxCamera.getNewDrawTrianglesItem","flixel/FlxCamera.hx",587,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_628_clearDrawStack,"flixel.FlxCamera","clearDrawStack",0x8d7c5ba0,"flixel.FlxCamera.clearDrawStack","flixel/FlxCamera.hx",628,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_661_render,"flixel.FlxCamera","render",0x1f11e49f,"flixel.FlxCamera.render","flixel/FlxCamera.hx",661,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_673_drawPixels,"flixel.FlxCamera","drawPixels",0x80c6bc1a,"flixel.FlxCamera.drawPixels","flixel/FlxCamera.hx",673,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_705_copyPixels,"flixel.FlxCamera","copyPixels",0xf4c7a68b,"flixel.FlxCamera.copyPixels","flixel/FlxCamera.hx",705,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_749_drawTriangles,"flixel.FlxCamera","drawTriangles",0x78d375de,"flixel.FlxCamera.drawTriangles","flixel/FlxCamera.hx",749,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_837_transformRect,"flixel.FlxCamera","transformRect",0x135ffe87,"flixel.FlxCamera.transformRect","flixel/FlxCamera.hx",837,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_860_transformPoint,"flixel.FlxCamera","transformPoint",0xc072398d,"flixel.FlxCamera.transformPoint","flixel/FlxCamera.hx",860,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_878_transformVector,"flixel.FlxCamera","transformVector",0x43afc0e6,"flixel.FlxCamera.transformVector","flixel/FlxCamera.hx",878,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_893_transformObject,"flixel.FlxCamera","transformObject",0xc1918ee2,"flixel.FlxCamera.transformObject","flixel/FlxCamera.hx",893,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_971_destroy,"flixel.FlxCamera","destroy",0xb607d391,"flixel.FlxCamera.destroy","flixel/FlxCamera.hx",971,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1030_update,"flixel.FlxCamera","update",0xa0edff52,"flixel.FlxCamera.update","flixel/FlxCamera.hx",1030,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1052_updateScroll,"flixel.FlxCamera","updateScroll",0x3fd094ff,"flixel.FlxCamera.updateScroll","flixel/FlxCamera.hx",1052,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1074_updateFollow,"flixel.FlxCamera","updateFollow",0xf2024e63,"flixel.FlxCamera.updateFollow","flixel/FlxCamera.hx",1074,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1159_updateFlash,"flixel.FlxCamera","updateFlash",0x43f2dcfe,"flixel.FlxCamera.updateFlash","flixel/FlxCamera.hx",1159,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1170_updateFade,"flixel.FlxCamera","updateFade",0xaec3f1ee,"flixel.FlxCamera.updateFade","flixel/FlxCamera.hx",1170,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1195_completeFade,"flixel.FlxCamera","completeFade",0xb02048de,"flixel.FlxCamera.completeFade","flixel/FlxCamera.hx",1195,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1203_updateShake,"flixel.FlxCamera","updateShake",0xbd838614,"flixel.FlxCamera.updateShake","flixel/FlxCamera.hx",1203,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1233_updateFlashSpritePosition,"flixel.FlxCamera","updateFlashSpritePosition",0x5aef376c,"flixel.FlxCamera.updateFlashSpritePosition","flixel/FlxCamera.hx",1233,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1245_updateFlashOffset,"flixel.FlxCamera","updateFlashOffset",0x0e9fbb31,"flixel.FlxCamera.updateFlashOffset","flixel/FlxCamera.hx",1245,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1259_updateScrollRect,"flixel.FlxCamera","updateScrollRect",0xbf58f9c3,"flixel.FlxCamera.updateScrollRect","flixel/FlxCamera.hx",1259,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1284_updateInternalSpritePositions,"flixel.FlxCamera","updateInternalSpritePositions",0x7d5baef6,"flixel.FlxCamera.updateInternalSpritePositions","flixel/FlxCamera.hx",1284,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1326_follow,"flixel.FlxCamera","follow",0x137f0aba,"flixel.FlxCamera.follow","flixel/FlxCamera.hx",1326,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1377_snapToTarget,"flixel.FlxCamera","snapToTarget",0x8eeb1d9f,"flixel.FlxCamera.snapToTarget","flixel/FlxCamera.hx",1377,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1388_focusOn,"flixel.FlxCamera","focusOn",0xd304f1ae,"flixel.FlxCamera.focusOn","flixel/FlxCamera.hx",1388,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1402_flash,"flixel.FlxCamera","flash",0x27663887,"flixel.FlxCamera.flash","flixel/FlxCamera.hx",1402,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1424_fade,"flixel.FlxCamera","fade",0xa5741a85,"flixel.FlxCamera.fade","flixel/FlxCamera.hx",1424,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1451_shake,"flixel.FlxCamera","shake",0xa0f6e19d,"flixel.FlxCamera.shake","flixel/FlxCamera.hx",1451,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1468_stopFX,"flixel.FlxCamera","stopFX",0x29222b1d,"flixel.FlxCamera.stopFX","flixel/FlxCamera.hx",1468,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1480_setFilters,"flixel.FlxCamera","setFilters",0x0e7f1802,"flixel.FlxCamera.setFilters","flixel/FlxCamera.hx",1480,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1490_copyFrom,"flixel.FlxCamera","copyFrom",0x88512948,"flixel.FlxCamera.copyFrom","flixel/FlxCamera.hx",1490,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1521_fill,"flixel.FlxCamera","fill",0xa57a338c,"flixel.FlxCamera.fill","flixel/FlxCamera.hx",1521,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1553_drawFX,"flixel.FlxCamera","drawFX",0xf9beeb9f,"flixel.FlxCamera.drawFX","flixel/FlxCamera.hx",1553,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1590_checkResize,"flixel.FlxCamera","checkResize",0x465b6af3,"flixel.FlxCamera.checkResize","flixel/FlxCamera.hx",1590,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1611_updateBlitMatrix,"flixel.FlxCamera","updateBlitMatrix",0x8e139648,"flixel.FlxCamera.updateBlitMatrix","flixel/FlxCamera.hx",1611,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1626_setSize,"flixel.FlxCamera","setSize",0xa359881a,"flixel.FlxCamera.setSize","flixel/FlxCamera.hx",1626,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1639_setPosition,"flixel.FlxCamera","setPosition",0x5729a882,"flixel.FlxCamera.setPosition","flixel/FlxCamera.hx",1639,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1654_setScrollBoundsRect,"flixel.FlxCamera","setScrollBoundsRect",0xd34a357f,"flixel.FlxCamera.setScrollBoundsRect","flixel/FlxCamera.hx",1654,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1673_setScrollBounds,"flixel.FlxCamera","setScrollBounds",0x4d9242bb,"flixel.FlxCamera.setScrollBounds","flixel/FlxCamera.hx",1673,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1689_setScale,"flixel.FlxCamera","setScale",0x46f35511,"flixel.FlxCamera.setScale","flixel/FlxCamera.hx",1689,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1726_onResize,"flixel.FlxCamera","onResize",0xa8186dfc,"flixel.FlxCamera.onResize","flixel/FlxCamera.hx",1726,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1738_containsPoint,"flixel.FlxCamera","containsPoint",0x2d56eb88,"flixel.FlxCamera.containsPoint","flixel/FlxCamera.hx",1738,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1743_set_followLerp,"flixel.FlxCamera","set_followLerp",0xf2f9b78e,"flixel.FlxCamera.set_followLerp","flixel/FlxCamera.hx",1743,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1747_set_width,"flixel.FlxCamera","set_width",0x2386b8c0,"flixel.FlxCamera.set_width","flixel/FlxCamera.hx",1747,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1762_set_height,"flixel.FlxCamera","set_height",0xa8aa67ed,"flixel.FlxCamera.set_height","flixel/FlxCamera.hx",1762,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1777_set_zoom,"flixel.FlxCamera","set_zoom",0x3f00d599,"flixel.FlxCamera.set_zoom","flixel/FlxCamera.hx",1777,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1784_set_alpha,"flixel.FlxCamera","set_alpha",0x7abaaa18,"flixel.FlxCamera.set_alpha","flixel/FlxCamera.hx",1784,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1798_set_angle,"flixel.FlxCamera","set_angle",0x7c06468d,"flixel.FlxCamera.set_angle","flixel/FlxCamera.hx",1798,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1805_set_color,"flixel.FlxCamera","set_color",0xa380741d,"flixel.FlxCamera.set_color","flixel/FlxCamera.hx",1805,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1839_set_antialiasing,"flixel.FlxCamera","set_antialiasing",0x0f9a3f7a,"flixel.FlxCamera.set_antialiasing","flixel/FlxCamera.hx",1839,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1849_set_x,"flixel.FlxCamera","set_x",0x9f099e32,"flixel.FlxCamera.set_x","flixel/FlxCamera.hx",1849,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1856_set_y,"flixel.FlxCamera","set_y",0x9f099e33,"flixel.FlxCamera.set_y","flixel/FlxCamera.hx",1856,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1863_set_visible,"flixel.FlxCamera","set_visible",0x8f5a1dac,"flixel.FlxCamera.set_visible","flixel/FlxCamera.hx",1863,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1872_calcOffsetX,"flixel.FlxCamera","calcOffsetX",0xcf19c367,"flixel.FlxCamera.calcOffsetX","flixel/FlxCamera.hx",1872,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_1879_calcOffsetY,"flixel.FlxCamera","calcOffsetY",0xcf19c368,"flixel.FlxCamera.calcOffsetY","flixel/FlxCamera.hx",1879,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_491_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",491,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_496_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",496,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_502_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",502,0xe7aeb95a)
HX_LOCAL_STACK_FRAME(_hx_pos_d1aae230bd422321_504_boot,"flixel.FlxCamera","boot",0xa2d9e93b,"flixel.FlxCamera.boot","flixel/FlxCamera.hx",504,0xe7aeb95a)
namespace flixel{

void FlxCamera_obj::__construct(::hx::Null< int >  __o_X,::hx::Null< int >  __o_Y,::hx::Null< int >  __o_Width,::hx::Null< int >  __o_Height,::hx::Null< Float >  __o_Zoom){
            		int X = __o_X.Default(0);
            		int Y = __o_Y.Default(0);
            		int Width = __o_Width.Default(0);
            		int Height = __o_Height.Default(0);
            		Float Zoom = __o_Zoom.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_45_new)
HXLINE( 456)		this->_helperPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 454)		this->_helperMatrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 434)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 434)		_this->x = ( (Float)(0) );
HXDLIN( 434)		_this->y = ( (Float)(0) );
HXDLIN( 434)		_this->width = ( (Float)(0) );
HXDLIN( 434)		_this->height = ( (Float)(0) );
HXDLIN( 434)		_this->_inPool = false;
HXDLIN( 434)		this->_bounds = _this;
HXLINE( 429)		this->_scrollRect =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 408)		this->initialZoom = ((Float)1);
HXLINE( 398)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 398)		point->_inPool = false;
HXDLIN( 398)		this->_point = point;
HXLINE( 393)		this->_fxShakeAxes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXLINE( 383)		this->_fxShakeDuration = ((Float)0);
HXLINE( 378)		this->_fxShakeIntensity = ((Float)0);
HXLINE( 373)		this->_fxFadeAlpha = ((Float)0);
HXLINE( 367)		this->_fxFadeCompleted = true;
HXLINE( 362)		this->_fxFadeComplete = null();
HXLINE( 357)		this->_fxFadeIn = false;
HXLINE( 351)		this->_fxFadeDuration = ((Float)0);
HXLINE( 346)		 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 346)		point1->_inPool = false;
HXDLIN( 346)		this->_scrollTarget = point1;
HXLINE( 336)		this->_fxFadeColor = 0;
HXLINE( 331)		this->_fxFlashAlpha = ((Float)0);
HXLINE( 326)		this->_fxFlashComplete = null();
HXLINE( 321)		this->_fxFlashDuration = ((Float)0);
HXLINE( 316)		this->_fxFlashColor = 0;
HXLINE( 311)		 ::flixel::math::FlxPoint point2 = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 311)		point2->_inPool = false;
HXDLIN( 311)		this->_flashOffset = point2;
HXLINE( 302)		this->_flashPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 287)		this->filtersEnabled = true;
HXLINE( 282)		 ::flixel::math::FlxPoint point3 = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 282)		point3->_inPool = false;
HXDLIN( 282)		this->followLead = point3;
HXLINE( 277)		this->antialiasing = false;
HXLINE( 271)		this->color = -1;
HXLINE( 266)		this->angle = ((Float)0);
HXLINE( 261)		this->alpha = ((Float)1);
HXLINE( 256)		this->_useBlitMatrix = false;
HXLINE( 251)		this->_blitMatrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 245)		this->viewHeight = ((Float)0);
HXLINE( 243)		this->viewWidth = ((Float)0);
HXLINE( 238)		this->viewOffsetHeight = ((Float)0);
HXLINE( 236)		this->viewOffsetWidth = ((Float)0);
HXLINE( 230)		this->viewOffsetY = ((Float)0);
HXLINE( 228)		this->viewOffsetX = ((Float)0);
HXLINE( 216)		this->height = 0;
HXLINE( 211)		this->width = 0;
HXLINE( 198)		this->flashSprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 188)		this->useBgAlphaBlending = false;
HXLINE( 153)		 ::flixel::math::FlxPoint point4 = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 153)		point4->_inPool = false;
HXDLIN( 153)		this->scroll = point4;
HXLINE( 117)		this->followLerp = (( (Float)(60) ) / ( (Float)(::flixel::FlxG_obj::updateFramerate) ));
HXLINE( 109)		 ::flixel::math::FlxPoint point5 = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 109)		point5->_inPool = false;
HXDLIN( 109)		this->targetOffset = point5;
HXLINE(  84)		this->scaleY = ((Float)0);
HXLINE(  78)		this->scaleX = ((Float)0);
HXLINE(  72)		this->y = ((Float)0);
HXLINE(  65)		this->x = ((Float)0);
HXLINE( 918)		super::__construct();
HXLINE( 920)		this->set_x(( (Float)(X) ));
HXLINE( 921)		this->set_y(( (Float)(Y) ));
HXLINE( 924)		int _hx_tmp;
HXDLIN( 924)		if ((Width <= 0)) {
HXLINE( 924)			_hx_tmp = ::flixel::FlxG_obj::width;
            		}
            		else {
HXLINE( 924)			_hx_tmp = Width;
            		}
HXDLIN( 924)		this->set_width(_hx_tmp);
HXLINE( 925)		int _hx_tmp1;
HXDLIN( 925)		if ((Height <= 0)) {
HXLINE( 925)			_hx_tmp1 = ::flixel::FlxG_obj::height;
            		}
            		else {
HXLINE( 925)			_hx_tmp1 = Height;
            		}
HXDLIN( 925)		this->set_height(_hx_tmp1);
HXLINE( 926)		this->_flashRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->width,this->height);
HXLINE( 928)		this->flashSprite->addChild(this->_scrollRect);
HXLINE( 929)		 ::openfl::display::Sprite _hx_tmp2 = this->_scrollRect;
HXDLIN( 929)		_hx_tmp2->set_scrollRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null()));
HXLINE( 931)		this->pixelPerfectRender = ::flixel::FlxG_obj::renderBlit;
HXLINE( 933)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 935)			this->screen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 936)			this->buffer =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,0);
HXLINE( 937)			this->screen->set_pixels(this->buffer);
HXLINE( 938)			this->screen->origin->set(null(),null());
HXLINE( 939)			this->_flashBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,this->buffer,null(),null());
HXLINE( 940)			this->_scrollRect->addChild(this->_flashBitmap);
HXLINE( 941)			this->_fill =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,0);
            		}
            		else {
HXLINE( 945)			this->canvas =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 946)			this->_scrollRect->addChild(this->canvas);
HXLINE( 949)			this->debugLayer =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 950)			this->_scrollRect->addChild(this->debugLayer);
            		}
HXLINE( 954)		this->set_color(-1);
HXLINE( 956)		Float _hx_tmp3;
HXDLIN( 956)		if ((Zoom == 0)) {
HXLINE( 956)			_hx_tmp3 = ::flixel::FlxCamera_obj::defaultZoom;
            		}
            		else {
HXLINE( 956)			_hx_tmp3 = Zoom;
            		}
HXDLIN( 956)		this->initialZoom = _hx_tmp3;
HXLINE( 957)		this->set_zoom(Zoom);
HXLINE( 959)		this->updateScrollRect();
HXLINE( 960)		this->updateFlashOffset();
HXLINE( 961)		this->updateFlashSpritePosition();
HXLINE( 962)		this->updateInternalSpritePositions();
HXLINE( 964)		this->bgColor = ::flixel::FlxG_obj::cameras->get_bgColor();
            	}

Dynamic FlxCamera_obj::__CreateEmpty() { return new FlxCamera_obj; }

void *FlxCamera_obj::_hx_vtable = 0;

Dynamic FlxCamera_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxCamera_obj > _hx_result = new FlxCamera_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxCamera_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1ff7ce3b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1ff7ce3b;
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

 ::flixel::graphics::tile::FlxDrawQuadsItem FlxCamera_obj::startQuadBatch( ::flixel::graphics::FlxGraphic graphic,bool colored,::hx::Null< bool >  __o_hasColorOffsets, ::Dynamic blend,::hx::Null< bool >  __o_smooth, ::flixel::graphics::tile::FlxGraphicsShader shader){
            		bool hasColorOffsets = __o_hasColorOffsets.Default(false);
            		bool smooth = __o_smooth.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_508_startQuadBatch)
HXLINE( 512)		 ::flixel::graphics::tile::FlxDrawQuadsItem itemToReturn = null();
HXLINE( 513)		int blendInt = ::flixel::graphics::tile::FlxDrawBaseItem_obj::blendToInt(blend);
HXLINE( 515)		bool _hx_tmp;
HXDLIN( 515)		bool _hx_tmp1;
HXDLIN( 515)		bool _hx_tmp2;
HXDLIN( 515)		bool _hx_tmp3;
HXDLIN( 515)		bool _hx_tmp4;
HXDLIN( 515)		bool _hx_tmp5;
HXDLIN( 515)		bool _hx_tmp6;
HXDLIN( 515)		bool _hx_tmp7;
HXDLIN( 515)		if (::hx::IsNotNull( this->_currentDrawItem )) {
HXLINE( 515)			_hx_tmp7 = ::hx::IsEq( this->_currentDrawItem->type,::flixel::graphics::tile::FlxDrawItemType_obj::TILES_dyn() );
            		}
            		else {
HXLINE( 515)			_hx_tmp7 = false;
            		}
HXDLIN( 515)		if (_hx_tmp7) {
HXLINE( 515)			_hx_tmp6 = ::hx::IsEq( this->_headTiles->graphics,graphic );
            		}
            		else {
HXLINE( 515)			_hx_tmp6 = false;
            		}
HXDLIN( 515)		if (_hx_tmp6) {
HXLINE( 515)			_hx_tmp5 = (this->_headTiles->colored == colored);
            		}
            		else {
HXLINE( 515)			_hx_tmp5 = false;
            		}
HXDLIN( 515)		if (_hx_tmp5) {
HXLINE( 515)			_hx_tmp4 = (this->_headTiles->hasColorOffsets == hasColorOffsets);
            		}
            		else {
HXLINE( 515)			_hx_tmp4 = false;
            		}
HXDLIN( 515)		if (_hx_tmp4) {
HXLINE( 515)			_hx_tmp3 = (this->_headTiles->blending == blendInt);
            		}
            		else {
HXLINE( 515)			_hx_tmp3 = false;
            		}
HXDLIN( 515)		if (_hx_tmp3) {
HXLINE( 515)			_hx_tmp2 = ::hx::IsEq( this->_headTiles->blend,blend );
            		}
            		else {
HXLINE( 515)			_hx_tmp2 = false;
            		}
HXDLIN( 515)		if (_hx_tmp2) {
HXLINE( 515)			_hx_tmp1 = (this->_headTiles->antialiasing == smooth);
            		}
            		else {
HXLINE( 515)			_hx_tmp1 = false;
            		}
HXDLIN( 515)		if (_hx_tmp1) {
HXLINE( 515)			_hx_tmp = ::hx::IsEq( this->_headTiles->shader,shader );
            		}
            		else {
HXLINE( 515)			_hx_tmp = false;
            		}
HXDLIN( 515)		if (_hx_tmp) {
HXLINE( 525)			return this->_headTiles;
            		}
HXLINE( 528)		if (::hx::IsNotNull( ::flixel::FlxCamera_obj::_storageTilesHead )) {
HXLINE( 530)			itemToReturn = ::flixel::FlxCamera_obj::_storageTilesHead;
HXLINE( 531)			 ::flixel::graphics::tile::FlxDrawQuadsItem newHead = ( ( ::flixel::graphics::tile::FlxDrawQuadsItem)(::flixel::FlxCamera_obj::_storageTilesHead->nextTyped) );
HXLINE( 532)			itemToReturn->reset();
HXLINE( 533)			::flixel::FlxCamera_obj::_storageTilesHead = newHead;
            		}
            		else {
HXLINE( 537)			itemToReturn =  ::flixel::graphics::tile::FlxDrawQuadsItem_obj::__alloc( HX_CTX );
            		}
HXLINE( 540)		itemToReturn->graphics = graphic;
HXLINE( 541)		itemToReturn->antialiasing = smooth;
HXLINE( 542)		itemToReturn->colored = colored;
HXLINE( 543)		itemToReturn->hasColorOffsets = hasColorOffsets;
HXLINE( 544)		itemToReturn->blending = blendInt;
HXLINE( 545)		itemToReturn->blend = blend;
HXLINE( 546)		itemToReturn->shader = shader;
HXLINE( 548)		itemToReturn->nextTyped = this->_headTiles;
HXLINE( 549)		this->_headTiles = itemToReturn;
HXLINE( 551)		if (::hx::IsNull( this->_headOfDrawStack )) {
HXLINE( 553)			this->_headOfDrawStack = itemToReturn;
            		}
HXLINE( 556)		if (::hx::IsNotNull( this->_currentDrawItem )) {
HXLINE( 558)			this->_currentDrawItem->next = itemToReturn;
            		}
HXLINE( 561)		this->_currentDrawItem = itemToReturn;
HXLINE( 563)		return itemToReturn;
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxCamera_obj,startQuadBatch,return )

 ::flixel::graphics::tile::FlxDrawTrianglesItem FlxCamera_obj::startTrianglesBatch( ::flixel::graphics::FlxGraphic graphic,::hx::Null< bool >  __o_smoothing,::hx::Null< bool >  __o_isColored, ::Dynamic blend){
            		bool smoothing = __o_smoothing.Default(false);
            		bool isColored = __o_isColored.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_569_startTrianglesBatch)
HXLINE( 570)		int blendInt = ::flixel::graphics::tile::FlxDrawBaseItem_obj::blendToInt(blend);
HXLINE( 572)		bool _hx_tmp;
HXDLIN( 572)		bool _hx_tmp1;
HXDLIN( 572)		bool _hx_tmp2;
HXDLIN( 572)		bool _hx_tmp3;
HXDLIN( 572)		bool _hx_tmp4;
HXDLIN( 572)		if (::hx::IsNotNull( this->_currentDrawItem )) {
HXLINE( 572)			_hx_tmp4 = ::hx::IsEq( this->_currentDrawItem->type,::flixel::graphics::tile::FlxDrawItemType_obj::TRIANGLES_dyn() );
            		}
            		else {
HXLINE( 572)			_hx_tmp4 = false;
            		}
HXDLIN( 572)		if (_hx_tmp4) {
HXLINE( 572)			_hx_tmp3 = ::hx::IsEq( this->_headTriangles->graphics,graphic );
            		}
            		else {
HXLINE( 572)			_hx_tmp3 = false;
            		}
HXDLIN( 572)		if (_hx_tmp3) {
HXLINE( 572)			_hx_tmp2 = (this->_headTriangles->antialiasing == smoothing);
            		}
            		else {
HXLINE( 572)			_hx_tmp2 = false;
            		}
HXDLIN( 572)		if (_hx_tmp2) {
HXLINE( 572)			_hx_tmp1 = (this->_headTriangles->colored == isColored);
            		}
            		else {
HXLINE( 572)			_hx_tmp1 = false;
            		}
HXDLIN( 572)		if (_hx_tmp1) {
HXLINE( 572)			_hx_tmp = (this->_headTriangles->blending == blendInt);
            		}
            		else {
HXLINE( 572)			_hx_tmp = false;
            		}
HXDLIN( 572)		if (_hx_tmp) {
HXLINE( 579)			return this->_headTriangles;
            		}
HXLINE( 582)		return this->getNewDrawTrianglesItem(graphic,smoothing,isColored,blend);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,startTrianglesBatch,return )

 ::flixel::graphics::tile::FlxDrawTrianglesItem FlxCamera_obj::getNewDrawTrianglesItem( ::flixel::graphics::FlxGraphic graphic,::hx::Null< bool >  __o_smoothing,::hx::Null< bool >  __o_isColored, ::Dynamic blend){
            		bool smoothing = __o_smoothing.Default(false);
            		bool isColored = __o_isColored.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_587_getNewDrawTrianglesItem)
HXLINE( 588)		 ::flixel::graphics::tile::FlxDrawTrianglesItem itemToReturn = null();
HXLINE( 589)		int blendInt = ::flixel::graphics::tile::FlxDrawBaseItem_obj::blendToInt(blend);
HXLINE( 591)		if (::hx::IsNotNull( ::flixel::FlxCamera_obj::_storageTrianglesHead )) {
HXLINE( 593)			itemToReturn = ::flixel::FlxCamera_obj::_storageTrianglesHead;
HXLINE( 594)			 ::flixel::graphics::tile::FlxDrawTrianglesItem newHead = ( ( ::flixel::graphics::tile::FlxDrawTrianglesItem)(::flixel::FlxCamera_obj::_storageTrianglesHead->nextTyped) );
HXLINE( 595)			itemToReturn->reset();
HXLINE( 596)			::flixel::FlxCamera_obj::_storageTrianglesHead = newHead;
            		}
            		else {
HXLINE( 600)			itemToReturn =  ::flixel::graphics::tile::FlxDrawTrianglesItem_obj::__alloc( HX_CTX );
            		}
HXLINE( 603)		itemToReturn->graphics = graphic;
HXLINE( 604)		itemToReturn->antialiasing = smoothing;
HXLINE( 605)		itemToReturn->colored = isColored;
HXLINE( 606)		itemToReturn->blending = blendInt;
HXLINE( 608)		itemToReturn->nextTyped = this->_headTriangles;
HXLINE( 609)		this->_headTriangles = itemToReturn;
HXLINE( 611)		if (::hx::IsNull( this->_headOfDrawStack )) {
HXLINE( 613)			this->_headOfDrawStack = itemToReturn;
            		}
HXLINE( 616)		if (::hx::IsNotNull( this->_currentDrawItem )) {
HXLINE( 618)			this->_currentDrawItem->next = itemToReturn;
            		}
HXLINE( 621)		this->_currentDrawItem = itemToReturn;
HXLINE( 623)		return itemToReturn;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,getNewDrawTrianglesItem,return )

void FlxCamera_obj::clearDrawStack(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_628_clearDrawStack)
HXLINE( 629)		 ::flixel::graphics::tile::FlxDrawQuadsItem currTiles = this->_headTiles;
HXLINE( 630)		 ::flixel::graphics::tile::FlxDrawQuadsItem newTilesHead;
HXLINE( 632)		while(::hx::IsNotNull( currTiles )){
HXLINE( 634)			newTilesHead = ( ( ::flixel::graphics::tile::FlxDrawQuadsItem)(currTiles->nextTyped) );
HXLINE( 635)			currTiles->reset();
HXLINE( 636)			currTiles->nextTyped = ::flixel::FlxCamera_obj::_storageTilesHead;
HXLINE( 637)			::flixel::FlxCamera_obj::_storageTilesHead = currTiles;
HXLINE( 638)			currTiles = newTilesHead;
            		}
HXLINE( 641)		 ::flixel::graphics::tile::FlxDrawTrianglesItem currTriangles = this->_headTriangles;
HXLINE( 642)		 ::flixel::graphics::tile::FlxDrawTrianglesItem newTrianglesHead;
HXLINE( 644)		while(::hx::IsNotNull( currTriangles )){
HXLINE( 646)			newTrianglesHead = ( ( ::flixel::graphics::tile::FlxDrawTrianglesItem)(currTriangles->nextTyped) );
HXLINE( 647)			currTriangles->reset();
HXLINE( 648)			currTriangles->nextTyped = ::flixel::FlxCamera_obj::_storageTrianglesHead;
HXLINE( 649)			::flixel::FlxCamera_obj::_storageTrianglesHead = currTriangles;
HXLINE( 650)			currTriangles = newTrianglesHead;
            		}
HXLINE( 653)		this->_currentDrawItem = null();
HXLINE( 654)		this->_headOfDrawStack = null();
HXLINE( 655)		this->_headTiles = null();
HXLINE( 656)		this->_headTriangles = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,clearDrawStack,(void))

void FlxCamera_obj::render(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_661_render)
HXLINE( 662)		 ::flixel::graphics::tile::FlxDrawBaseItem currItem = this->_headOfDrawStack;
HXLINE( 663)		while(::hx::IsNotNull( currItem )){
HXLINE( 665)			currItem->render(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 666)			currItem = currItem->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,render,(void))

void FlxCamera_obj::drawPixels( ::flixel::graphics::frames::FlxFrame frame, ::openfl::display::BitmapData pixels, ::flixel::math::FlxMatrix matrix, ::openfl::geom::ColorTransform transform, ::Dynamic blend, ::Dynamic __o_smoothing, ::flixel::graphics::tile::FlxGraphicsShader shader){
            		 ::Dynamic smoothing = __o_smoothing;
            		if (::hx::IsNull(__o_smoothing)) smoothing = false;
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_673_drawPixels)
HXDLIN( 673)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 675)			this->_helperMatrix->copyFrom(matrix);
HXLINE( 677)			if (this->_useBlitMatrix) {
HXLINE( 679)				this->_helperMatrix->concat(this->_blitMatrix);
HXLINE( 680)				bool _hx_tmp;
HXDLIN( 680)				if (!(( (bool)(smoothing) ))) {
HXLINE( 680)					_hx_tmp = this->antialiasing;
            				}
            				else {
HXLINE( 680)					_hx_tmp = true;
            				}
HXDLIN( 680)				this->buffer->draw(pixels,this->_helperMatrix,null(),null(),null(),_hx_tmp);
            			}
            			else {
HXLINE( 684)				this->_helperMatrix->translate(-(this->viewOffsetX),-(this->viewOffsetY));
HXLINE( 685)				bool _hx_tmp;
HXDLIN( 685)				if (!(( (bool)(smoothing) ))) {
HXLINE( 685)					_hx_tmp = this->antialiasing;
            				}
            				else {
HXLINE( 685)					_hx_tmp = true;
            				}
HXDLIN( 685)				this->buffer->draw(pixels,this->_helperMatrix,null(),blend,null(),_hx_tmp);
            			}
            		}
            		else {
HXLINE( 690)			bool isColored;
HXDLIN( 690)			if (::hx::IsNotNull( transform )) {
HXLINE( 690)				isColored = ::flixel::util::FlxColorTransformUtil_obj::hasRGBMultipliers(transform);
            			}
            			else {
HXLINE( 690)				isColored = false;
            			}
HXLINE( 691)			bool hasColorOffsets;
HXDLIN( 691)			if (::hx::IsNotNull( transform )) {
HXLINE( 691)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(transform);
            			}
            			else {
HXLINE( 691)				hasColorOffsets = false;
            			}
HXLINE( 696)			 ::flixel::graphics::tile::FlxDrawQuadsItem drawItem = this->startQuadBatch(frame->parent,isColored,hasColorOffsets,blend,smoothing,shader);
HXLINE( 698)			drawItem->addQuad(frame,matrix,transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxCamera_obj,drawPixels,(void))

void FlxCamera_obj::copyPixels( ::flixel::graphics::frames::FlxFrame frame, ::openfl::display::BitmapData pixels, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::geom::ColorTransform transform, ::Dynamic blend, ::Dynamic __o_smoothing, ::flixel::graphics::tile::FlxGraphicsShader shader){
            		 ::Dynamic smoothing = __o_smoothing;
            		if (::hx::IsNull(__o_smoothing)) smoothing = false;
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_705_copyPixels)
HXDLIN( 705)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 707)			if (::hx::IsNotNull( pixels )) {
HXLINE( 709)				if (this->_useBlitMatrix) {
HXLINE( 711)					this->_helperMatrix->identity();
HXLINE( 712)					this->_helperMatrix->translate(destPoint->x,destPoint->y);
HXLINE( 713)					this->_helperMatrix->concat(this->_blitMatrix);
HXLINE( 714)					bool _hx_tmp;
HXDLIN( 714)					if (!(( (bool)(smoothing) ))) {
HXLINE( 714)						_hx_tmp = this->antialiasing;
            					}
            					else {
HXLINE( 714)						_hx_tmp = true;
            					}
HXDLIN( 714)					this->buffer->draw(pixels,this->_helperMatrix,null(),null(),null(),_hx_tmp);
            				}
            				else {
HXLINE( 718)					Float destPoint1 = destPoint->x;
HXDLIN( 718)					int _hx_tmp = ::Std_obj::_hx_int(this->viewOffsetX);
HXDLIN( 718)					this->_helperPoint->x = (destPoint1 - ( (Float)(_hx_tmp) ));
HXLINE( 719)					Float destPoint2 = destPoint->y;
HXDLIN( 719)					int _hx_tmp1 = ::Std_obj::_hx_int(this->viewOffsetY);
HXDLIN( 719)					this->_helperPoint->y = (destPoint2 - ( (Float)(_hx_tmp1) ));
HXLINE( 720)					this->buffer->copyPixels(pixels,sourceRect,this->_helperPoint,null(),null(),true);
            				}
            			}
            			else {
HXLINE( 723)				if (::hx::IsNotNull( frame )) {
HXLINE( 726)					frame->paint(this->buffer,destPoint,true,null());
            				}
            			}
            		}
            		else {
HXLINE( 731)			this->_helperMatrix->identity();
HXLINE( 732)			this->_helperMatrix->translate((destPoint->x + frame->offset->x),(destPoint->y + frame->offset->y));
HXLINE( 734)			bool isColored;
HXDLIN( 734)			if (::hx::IsNotNull( transform )) {
HXLINE( 734)				isColored = ::flixel::util::FlxColorTransformUtil_obj::hasRGBMultipliers(transform);
            			}
            			else {
HXLINE( 734)				isColored = false;
            			}
HXLINE( 735)			bool hasColorOffsets;
HXDLIN( 735)			if (::hx::IsNotNull( transform )) {
HXLINE( 735)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(transform);
            			}
            			else {
HXLINE( 735)				hasColorOffsets = false;
            			}
HXLINE( 738)			 ::flixel::graphics::tile::FlxDrawQuadsItem drawItem = this->startQuadBatch(frame->parent,isColored,hasColorOffsets,blend,smoothing,shader);
HXLINE( 742)			drawItem->addQuad(frame,this->_helperMatrix,transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxCamera_obj,copyPixels,(void))

void FlxCamera_obj::drawTriangles( ::flixel::graphics::FlxGraphic graphic, ::openfl::_Vector::FloatVector vertices, ::openfl::_Vector::IntVector indices, ::openfl::_Vector::FloatVector uvtData, ::openfl::_Vector::IntVector colors, ::flixel::math::FlxPoint position, ::Dynamic blend,::hx::Null< bool >  __o_repeat,::hx::Null< bool >  __o_smoothing){
            		bool repeat = __o_repeat.Default(false);
            		bool smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_749_drawTriangles)
HXDLIN( 749)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 751)			if (::hx::IsNull( position )) {
HXLINE( 752)				position = ::flixel::FlxCamera_obj::renderPoint->set(null(),null());
            			}
HXLINE( 754)			{
HXLINE( 754)				 ::flixel::math::FlxRect _this = this->_bounds;
HXDLIN( 754)				_this->x = ( (Float)(0) );
HXDLIN( 754)				_this->y = ( (Float)(0) );
HXDLIN( 754)				_this->width = ( (Float)(this->width) );
HXDLIN( 754)				_this->height = ( (Float)(this->height) );
            			}
HXLINE( 756)			int verticesLength = vertices->get_length();
HXLINE( 757)			int currentVertexPosition = 0;
HXLINE( 759)			Float tempX;
HXDLIN( 759)			Float tempY;
HXLINE( 760)			int i = 0;
HXLINE( 761)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxCamera_obj::renderRect;
HXDLIN( 761)			_this1->x = ( (Float)(0) );
HXDLIN( 761)			_this1->y = ( (Float)(0) );
HXDLIN( 761)			_this1->width = ( (Float)(0) );
HXDLIN( 761)			_this1->height = ( (Float)(0) );
HXDLIN( 761)			 ::flixel::math::FlxRect bounds = _this1;
HXLINE( 762)			{
HXLINE( 762)				::Dynamic this1 = ::flixel::FlxCamera_obj::drawVertices;
HXDLIN( 762)				( ( ::openfl::_Vector::FloatVector)(this1) )->splice(0,::flixel::FlxCamera_obj::drawVertices->get_length());
            			}
HXLINE( 764)			while((i < verticesLength)){
HXLINE( 766)				Float position1 = position->x;
HXDLIN( 766)				tempX = (position1 + vertices->get(i));
HXLINE( 767)				Float position2 = position->y;
HXDLIN( 767)				tempY = (position2 + vertices->get((i + 1)));
HXLINE( 769)				{
HXLINE( 769)					currentVertexPosition = (currentVertexPosition + 1);
HXDLIN( 769)					::flixel::FlxCamera_obj::drawVertices->set((currentVertexPosition - 1),tempX);
            				}
HXLINE( 770)				{
HXLINE( 770)					currentVertexPosition = (currentVertexPosition + 1);
HXDLIN( 770)					::flixel::FlxCamera_obj::drawVertices->set((currentVertexPosition - 1),tempY);
            				}
HXLINE( 772)				if ((i == 0)) {
HXLINE( 774)					bounds->x = tempX;
HXDLIN( 774)					bounds->y = tempY;
HXDLIN( 774)					bounds->width = ( (Float)(0) );
HXDLIN( 774)					bounds->height = ( (Float)(0) );
            				}
            				else {
HXLINE( 778)					if ((tempX < bounds->x)) {
HXLINE( 778)						 ::flixel::math::FlxRect bounds1 = bounds;
HXDLIN( 778)						bounds1->width = (bounds1->width + (bounds->x - tempX));
HXDLIN( 778)						bounds->x = tempX;
            					}
HXDLIN( 778)					if ((tempY < bounds->y)) {
HXLINE( 778)						 ::flixel::math::FlxRect bounds1 = bounds;
HXDLIN( 778)						bounds1->height = (bounds1->height + (bounds->y - tempY));
HXDLIN( 778)						bounds->y = tempY;
            					}
HXDLIN( 778)					if ((tempX > (bounds->x + bounds->width))) {
HXLINE( 778)						bounds->width = (tempX - bounds->x);
            					}
HXDLIN( 778)					if ((tempY > (bounds->y + bounds->height))) {
HXLINE( 778)						bounds->height = (tempY - bounds->y);
            					}
            				}
HXLINE( 781)				i = (i + 2);
            			}
HXLINE( 784)			if (position->_weak) {
HXLINE( 784)				position->put();
            			}
HXLINE( 786)			 ::flixel::math::FlxRect _this2 = this->_bounds;
HXDLIN( 786)			bool result;
HXDLIN( 786)			bool result1;
HXDLIN( 786)			bool result2;
HXDLIN( 786)			if (((bounds->x + bounds->width) > _this2->x)) {
HXLINE( 786)				result2 = (bounds->x < (_this2->x + _this2->width));
            			}
            			else {
HXLINE( 786)				result2 = false;
            			}
HXDLIN( 786)			if (result2) {
HXLINE( 786)				result1 = ((bounds->y + bounds->height) > _this2->y);
            			}
            			else {
HXLINE( 786)				result1 = false;
            			}
HXDLIN( 786)			if (result1) {
HXLINE( 786)				result = (bounds->y < (_this2->y + _this2->height));
            			}
            			else {
HXLINE( 786)				result = false;
            			}
HXDLIN( 786)			if (bounds->_weak) {
HXLINE( 786)				if (!(bounds->_inPool)) {
HXLINE( 786)					bounds->_inPool = true;
HXDLIN( 786)					bounds->_weak = false;
HXDLIN( 786)					::flixel::math::FlxRect_obj::_pool->putUnsafe(bounds);
            				}
            			}
HXDLIN( 786)			if (!(result)) {
HXLINE( 788)				::Dynamic this1 = ::flixel::FlxCamera_obj::drawVertices;
HXDLIN( 788)				( ( ::openfl::_Vector::FloatVector)(this1) )->splice((::flixel::FlxCamera_obj::drawVertices->get_length() - verticesLength),verticesLength);
            			}
            			else {
HXLINE( 792)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->clear();
HXLINE( 793)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->beginBitmapFill(graphic->bitmap,null(),repeat,smoothing);
HXLINE( 794)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->drawTriangles(::flixel::FlxCamera_obj::drawVertices,indices,uvtData,null());
HXLINE( 795)				::flixel::FlxCamera_obj::trianglesSprite->get_graphics()->endFill();
HXLINE( 798)				if (this->_useBlitMatrix) {
HXLINE( 799)					this->_helperMatrix->copyFrom(this->_blitMatrix);
            				}
            				else {
HXLINE( 802)					this->_helperMatrix->identity();
HXLINE( 803)					this->_helperMatrix->translate(-(this->viewOffsetX),-(this->viewOffsetY));
            				}
HXLINE( 806)				this->buffer->draw(::flixel::FlxCamera_obj::trianglesSprite,this->_helperMatrix,null(),null(),null(),null());
HXLINE( 808)				if (::flixel::FlxG_obj::debugger->drawDebug) {
HXLINE( 810)					 ::openfl::display::Graphics gfx = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXLINE( 811)					gfx->clear();
HXLINE( 812)					gfx->lineStyle(1,-16776961,((Float)0.5),null(),null(),null(),null(),null());
HXLINE( 813)					gfx->drawTriangles(::flixel::FlxCamera_obj::drawVertices,indices,null(),null());
HXLINE( 814)					this->get_camera()->buffer->draw(::flixel::util::FlxSpriteUtil_obj::flashGfxSprite,this->_helperMatrix,null(),null(),null(),null());
            				}
            			}
HXLINE( 820)			if (!(bounds->_inPool)) {
HXLINE( 820)				bounds->_inPool = true;
HXDLIN( 820)				bounds->_weak = false;
HXDLIN( 820)				::flixel::math::FlxRect_obj::_pool->putUnsafe(bounds);
            			}
            		}
            		else {
HXLINE( 824)			{
HXLINE( 824)				 ::flixel::math::FlxRect _this = this->_bounds;
HXDLIN( 824)				_this->x = ( (Float)(0) );
HXDLIN( 824)				_this->y = ( (Float)(0) );
HXDLIN( 824)				_this->width = ( (Float)(this->width) );
HXDLIN( 824)				_this->height = ( (Float)(this->height) );
            			}
HXLINE( 825)			bool isColored;
HXDLIN( 825)			if (::hx::IsNotNull( colors )) {
HXLINE( 825)				isColored = (colors->get_length() != 0);
            			}
            			else {
HXLINE( 825)				isColored = false;
            			}
HXLINE( 826)			 ::flixel::graphics::tile::FlxDrawTrianglesItem drawItem = this->startTrianglesBatch(graphic,smoothing,isColored,blend);
HXLINE( 827)			drawItem->addTriangles(vertices,indices,uvtData,colors,position,this->_bounds);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC9(FlxCamera_obj,drawTriangles,(void))

 ::flixel::math::FlxRect FlxCamera_obj::transformRect( ::flixel::math::FlxRect rect){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_837_transformRect)
HXLINE( 838)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 840)			{
HXLINE( 840)				 ::flixel::math::FlxRect rect1 = rect;
HXDLIN( 840)				rect1->x = (rect1->x + -(this->viewOffsetX));
HXDLIN( 840)				 ::flixel::math::FlxRect rect2 = rect;
HXDLIN( 840)				rect2->y = (rect2->y + -(this->viewOffsetY));
            			}
HXLINE( 842)			if (this->_useBlitMatrix) {
HXLINE( 844)				 ::flixel::math::FlxRect rect1 = rect;
HXDLIN( 844)				rect1->x = (rect1->x * this->zoom);
HXLINE( 845)				 ::flixel::math::FlxRect rect2 = rect;
HXDLIN( 845)				rect2->y = (rect2->y * this->zoom);
HXLINE( 846)				 ::flixel::math::FlxRect rect3 = rect;
HXDLIN( 846)				rect3->width = (rect3->width * this->zoom);
HXLINE( 847)				 ::flixel::math::FlxRect rect4 = rect;
HXDLIN( 847)				rect4->height = (rect4->height * this->zoom);
            			}
            		}
HXLINE( 851)		return rect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,transformRect,return )

 ::flixel::math::FlxPoint FlxCamera_obj::transformPoint( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_860_transformPoint)
HXLINE( 861)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 863)			{
HXLINE( 863)				Float Y = this->viewOffsetY;
HXDLIN( 863)				{
HXLINE( 863)					 ::flixel::math::FlxPoint _g = point;
HXDLIN( 863)					_g->set_x((_g->x - this->viewOffsetX));
            				}
HXDLIN( 863)				{
HXLINE( 863)					 ::flixel::math::FlxPoint _g1 = point;
HXDLIN( 863)					_g1->set_y((_g1->y - Y));
            				}
            			}
HXLINE( 865)			if (this->_useBlitMatrix) {
HXLINE( 866)				point->scale(this->zoom);
            			}
            		}
HXLINE( 869)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,transformPoint,return )

 ::flixel::math::FlxPoint FlxCamera_obj::transformVector( ::flixel::math::FlxPoint vector){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_878_transformVector)
HXLINE( 879)		bool _hx_tmp;
HXDLIN( 879)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 879)			_hx_tmp = this->_useBlitMatrix;
            		}
            		else {
HXLINE( 879)			_hx_tmp = false;
            		}
HXDLIN( 879)		if (_hx_tmp) {
HXLINE( 880)			vector->scale(this->zoom);
            		}
HXLINE( 882)		return vector;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,transformVector,return )

 ::openfl::display::DisplayObject FlxCamera_obj::transformObject( ::openfl::display::DisplayObject object){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_893_transformObject)
HXLINE( 894)		{
HXLINE( 894)			 ::openfl::display::DisplayObject _g = object;
HXDLIN( 894)			Float _hx_tmp = _g->get_scaleX();
HXDLIN( 894)			_g->set_scaleX((_hx_tmp * this->totalScaleX));
            		}
HXLINE( 895)		{
HXLINE( 895)			 ::openfl::display::DisplayObject _g1 = object;
HXDLIN( 895)			Float _hx_tmp1 = _g1->get_scaleY();
HXDLIN( 895)			_g1->set_scaleY((_hx_tmp1 * this->totalScaleY));
            		}
HXLINE( 897)		{
HXLINE( 897)			 ::openfl::display::DisplayObject _g2 = object;
HXDLIN( 897)			Float _hx_tmp2 = _g2->get_x();
HXDLIN( 897)			_g2->set_x((_hx_tmp2 - (this->scroll->x * this->totalScaleX)));
            		}
HXLINE( 898)		{
HXLINE( 898)			 ::openfl::display::DisplayObject _g3 = object;
HXDLIN( 898)			Float _hx_tmp3 = _g3->get_y();
HXDLIN( 898)			_g3->set_y((_hx_tmp3 - (this->scroll->y * this->totalScaleY)));
            		}
HXLINE( 900)		{
HXLINE( 900)			 ::openfl::display::DisplayObject _g4 = object;
HXDLIN( 900)			Float _hx_tmp4 = _g4->get_x();
HXDLIN( 900)			_g4->set_x((_hx_tmp4 - (((((Float)0.5) * ( (Float)(this->width) )) * (this->scaleX - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->x)));
            		}
HXLINE( 901)		{
HXLINE( 901)			 ::openfl::display::DisplayObject _g5 = object;
HXDLIN( 901)			Float _hx_tmp5 = _g5->get_y();
HXDLIN( 901)			_g5->set_y((_hx_tmp5 - (((((Float)0.5) * ( (Float)(this->height) )) * (this->scaleY - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->y)));
            		}
HXLINE( 903)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,transformObject,return )

void FlxCamera_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_971_destroy)
HXLINE( 972)		::flixel::util::FlxDestroyUtil_obj::removeChild(this->flashSprite,this->_scrollRect);
HXLINE( 974)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 976)			::flixel::util::FlxDestroyUtil_obj::removeChild(this->_scrollRect,this->_flashBitmap);
HXLINE( 977)			this->screen = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->screen)) );
HXLINE( 978)			this->buffer = null();
HXLINE( 979)			this->_flashBitmap = null();
HXLINE( 980)			this->_fill = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_fill);
            		}
            		else {
HXLINE( 985)			::flixel::util::FlxDestroyUtil_obj::removeChild(this->_scrollRect,this->debugLayer);
HXLINE( 986)			this->debugLayer = null();
HXLINE( 989)			::flixel::util::FlxDestroyUtil_obj::removeChild(this->_scrollRect,this->canvas);
HXLINE( 990)			if (::hx::IsNotNull( this->canvas )) {
HXLINE( 992)				{
HXLINE( 992)					int _g = 0;
HXDLIN( 992)					int _g1 = this->canvas->get_numChildren();
HXDLIN( 992)					while((_g < _g1)){
HXLINE( 992)						_g = (_g + 1);
HXDLIN( 992)						int i = (_g - 1);
HXLINE( 994)						this->canvas->removeChildAt(0);
            					}
            				}
HXLINE( 996)				this->canvas = null();
            			}
HXLINE( 999)			if (::hx::IsNotNull( this->_headOfDrawStack )) {
HXLINE(1001)				this->clearDrawStack();
            			}
HXLINE(1004)			this->_blitMatrix = null();
HXLINE(1005)			this->_helperMatrix = null();
HXLINE(1006)			this->_helperPoint = null();
            		}
HXLINE(1009)		this->_bounds = null();
HXLINE(1010)		this->scroll = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->scroll)) );
HXLINE(1011)		this->targetOffset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->targetOffset)) );
HXLINE(1012)		this->deadzone = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->deadzone)) );
HXLINE(1014)		this->target = null();
HXLINE(1015)		this->flashSprite = null();
HXLINE(1016)		this->_scrollRect = null();
HXLINE(1017)		this->_flashRect = null();
HXLINE(1018)		this->_flashPoint = null();
HXLINE(1019)		this->_fxFlashComplete = null();
HXLINE(1020)		this->_fxFadeComplete = null();
HXLINE(1021)		this->_fxShakeComplete = null();
HXLINE(1023)		this->super::destroy();
            	}


void FlxCamera_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1030_update)
HXLINE(1032)		if (::hx::IsNotNull( this->target )) {
HXLINE(1034)			this->updateFollow();
            		}
HXLINE(1037)		this->updateScroll();
HXLINE(1038)		this->updateFlash(elapsed);
HXLINE(1039)		this->updateFade(elapsed);
HXLINE(1041)		::Array< ::Dynamic> _hx_tmp;
HXDLIN(1041)		if (this->filtersEnabled) {
HXLINE(1041)			_hx_tmp = this->_filters;
            		}
            		else {
HXLINE(1041)			_hx_tmp = null();
            		}
HXDLIN(1041)		this->flashSprite->set_filters(_hx_tmp);
HXLINE(1043)		this->updateFlashSpritePosition();
HXLINE(1044)		this->updateShake(elapsed);
            	}


void FlxCamera_obj::updateScroll(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1052_updateScroll)
HXLINE(1054)		Float zoom = (this->zoom / ::flixel::FlxG_obj::initialZoom);
HXLINE(1056)		 ::Dynamic minX;
HXDLIN(1056)		if (::hx::IsNull( this->minScrollX )) {
HXLINE(1056)			minX = null();
            		}
            		else {
HXLINE(1056)			minX = (( (Float)(this->minScrollX) ) - (((zoom - ( (Float)(1) )) * ( (Float)(this->width) )) / (( (Float)(2) ) * zoom)));
            		}
HXLINE(1057)		 ::Dynamic maxX;
HXDLIN(1057)		if (::hx::IsNull( this->maxScrollX )) {
HXLINE(1057)			maxX = null();
            		}
            		else {
HXLINE(1057)			maxX = (this->maxScrollX + (((zoom - ( (Float)(1) )) * ( (Float)(this->width) )) / (( (Float)(2) ) * zoom)));
            		}
HXLINE(1058)		 ::Dynamic minY;
HXDLIN(1058)		if (::hx::IsNull( this->minScrollY )) {
HXLINE(1058)			minY = null();
            		}
            		else {
HXLINE(1058)			minY = (( (Float)(this->minScrollY) ) - (((zoom - ( (Float)(1) )) * ( (Float)(this->height) )) / (( (Float)(2) ) * zoom)));
            		}
HXLINE(1059)		 ::Dynamic maxY;
HXDLIN(1059)		if (::hx::IsNull( this->maxScrollY )) {
HXLINE(1059)			maxY = null();
            		}
            		else {
HXLINE(1059)			maxY = (this->maxScrollY + (((zoom - ( (Float)(1) )) * ( (Float)(this->height) )) / (( (Float)(2) ) * zoom)));
            		}
HXLINE(1062)		Float Value = this->scroll->x;
HXDLIN(1062)		 ::Dynamic Max;
HXDLIN(1062)		if (::hx::IsNotNull( maxX )) {
HXLINE(1062)			Max = (( (Float)(maxX) ) - ( (Float)(this->width) ));
            		}
            		else {
HXLINE(1062)			Max = null();
            		}
HXDLIN(1062)		Float lowerBound;
HXDLIN(1062)		bool lowerBound1;
HXDLIN(1062)		if (::hx::IsNotNull( minX )) {
HXLINE(1062)			lowerBound1 = ::hx::IsLess( Value,minX );
            		}
            		else {
HXLINE(1062)			lowerBound1 = false;
            		}
HXDLIN(1062)		if (lowerBound1) {
HXLINE(1062)			lowerBound = ( (Float)(minX) );
            		}
            		else {
HXLINE(1062)			lowerBound = Value;
            		}
HXDLIN(1062)		Float _hx_tmp;
HXDLIN(1062)		bool _hx_tmp1;
HXDLIN(1062)		if (::hx::IsNotNull( Max )) {
HXLINE(1062)			_hx_tmp1 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE(1062)			_hx_tmp1 = false;
            		}
HXDLIN(1062)		if (_hx_tmp1) {
HXLINE(1062)			_hx_tmp = ( (Float)(Max) );
            		}
            		else {
HXLINE(1062)			_hx_tmp = lowerBound;
            		}
HXDLIN(1062)		this->scroll->set_x(_hx_tmp);
HXLINE(1063)		Float Value1 = this->scroll->y;
HXDLIN(1063)		 ::Dynamic Max1;
HXDLIN(1063)		if (::hx::IsNotNull( maxY )) {
HXLINE(1063)			Max1 = (( (Float)(maxY) ) - ( (Float)(this->height) ));
            		}
            		else {
HXLINE(1063)			Max1 = null();
            		}
HXDLIN(1063)		Float lowerBound2;
HXDLIN(1063)		bool lowerBound3;
HXDLIN(1063)		if (::hx::IsNotNull( minY )) {
HXLINE(1063)			lowerBound3 = ::hx::IsLess( Value1,minY );
            		}
            		else {
HXLINE(1063)			lowerBound3 = false;
            		}
HXDLIN(1063)		if (lowerBound3) {
HXLINE(1063)			lowerBound2 = ( (Float)(minY) );
            		}
            		else {
HXLINE(1063)			lowerBound2 = Value1;
            		}
HXDLIN(1063)		Float _hx_tmp2;
HXDLIN(1063)		bool _hx_tmp3;
HXDLIN(1063)		if (::hx::IsNotNull( Max1 )) {
HXLINE(1063)			_hx_tmp3 = ::hx::IsGreater( lowerBound2,Max1 );
            		}
            		else {
HXLINE(1063)			_hx_tmp3 = false;
            		}
HXDLIN(1063)		if (_hx_tmp3) {
HXLINE(1063)			_hx_tmp2 = ( (Float)(Max1) );
            		}
            		else {
HXLINE(1063)			_hx_tmp2 = lowerBound2;
            		}
HXDLIN(1063)		this->scroll->set_y(_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateScroll,(void))

void FlxCamera_obj::updateFollow(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1074_updateFollow)
HXDLIN(1074)		if (::hx::IsNull( this->deadzone )) {
HXLINE(1076)			this->target->getMidpoint(this->_point);
HXLINE(1077)			this->_point->addPoint(this->targetOffset);
HXLINE(1078)			{
HXLINE(1078)				 ::flixel::math::FlxPoint point = this->_point;
HXDLIN(1078)				this->scroll->set((point->x - (( (Float)(this->width) ) * ((Float)0.5))),(point->y - (( (Float)(this->height) ) * ((Float)0.5))));
HXDLIN(1078)				if (point->_weak) {
HXLINE(1078)					point->put();
            				}
            			}
            		}
            		else {
HXLINE(1082)			Float edge;
HXLINE(1083)			Float targetX = (this->target->x + this->targetOffset->x);
HXLINE(1084)			Float targetY = (this->target->y + this->targetOffset->y);
HXLINE(1086)			if (::hx::IsEq( this->style,::flixel::FlxCameraFollowStyle_obj::SCREEN_BY_SCREEN_dyn() )) {
HXLINE(1088)				if ((targetX >= (this->scroll->x + this->width))) {
HXLINE(1090)					 ::flixel::math::FlxPoint _g = this->_scrollTarget;
HXDLIN(1090)					_g->set_x((_g->x + this->width));
            				}
            				else {
HXLINE(1092)					if ((targetX < this->scroll->x)) {
HXLINE(1094)						 ::flixel::math::FlxPoint _g = this->_scrollTarget;
HXDLIN(1094)						_g->set_x((_g->x - ( (Float)(this->width) )));
            					}
            				}
HXLINE(1097)				if ((targetY >= (this->scroll->y + this->height))) {
HXLINE(1099)					 ::flixel::math::FlxPoint _g = this->_scrollTarget;
HXDLIN(1099)					_g->set_y((_g->y + this->height));
            				}
            				else {
HXLINE(1101)					if ((targetY < this->scroll->y)) {
HXLINE(1103)						 ::flixel::math::FlxPoint _g = this->_scrollTarget;
HXDLIN(1103)						_g->set_y((_g->y - ( (Float)(this->height) )));
            					}
            				}
            			}
            			else {
HXLINE(1108)				edge = (targetX - this->deadzone->x);
HXLINE(1109)				if ((this->_scrollTarget->x > edge)) {
HXLINE(1111)					this->_scrollTarget->set_x(edge);
            				}
HXLINE(1113)				Float edge1 = (targetX + this->target->get_width());
HXDLIN(1113)				edge = ((edge1 - this->deadzone->x) - this->deadzone->width);
HXLINE(1114)				if ((this->_scrollTarget->x < edge)) {
HXLINE(1116)					this->_scrollTarget->set_x(edge);
            				}
HXLINE(1119)				edge = (targetY - this->deadzone->y);
HXLINE(1120)				if ((this->_scrollTarget->y > edge)) {
HXLINE(1122)					this->_scrollTarget->set_y(edge);
            				}
HXLINE(1124)				Float edge2 = (targetY + this->target->get_height());
HXDLIN(1124)				edge = ((edge2 - this->deadzone->y) - this->deadzone->height);
HXLINE(1125)				if ((this->_scrollTarget->y < edge)) {
HXLINE(1127)					this->_scrollTarget->set_y(edge);
            				}
            			}
HXLINE(1131)			if (::Std_obj::isOfType(this->target,::hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(1133)				if (::hx::IsNull( this->_lastTargetPosition )) {
HXLINE(1135)					Float X = this->target->x;
HXDLIN(1135)					Float Y = this->target->y;
HXDLIN(1135)					 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN(1135)					point->_inPool = false;
HXDLIN(1135)					this->_lastTargetPosition = point;
            				}
HXLINE(1137)				{
HXLINE(1137)					 ::flixel::math::FlxPoint _g = this->_scrollTarget;
HXDLIN(1137)					_g->set_x((_g->x + ((this->target->x - this->_lastTargetPosition->x) * this->followLead->x)));
            				}
HXLINE(1138)				{
HXLINE(1138)					 ::flixel::math::FlxPoint _g1 = this->_scrollTarget;
HXDLIN(1138)					_g1->set_y((_g1->y + ((this->target->y - this->_lastTargetPosition->y) * this->followLead->y)));
            				}
HXLINE(1140)				this->_lastTargetPosition->set_x(this->target->x);
HXLINE(1141)				this->_lastTargetPosition->set_y(this->target->y);
            			}
HXLINE(1144)			if ((this->followLerp >= (( (Float)(60) ) / ( (Float)(::flixel::FlxG_obj::updateFramerate) )))) {
HXLINE(1146)				 ::flixel::math::FlxPoint _this = this->scroll;
HXDLIN(1146)				 ::flixel::math::FlxPoint point = this->_scrollTarget;
HXDLIN(1146)				_this->set_x(point->x);
HXDLIN(1146)				_this->set_y(point->y);
HXDLIN(1146)				if (point->_weak) {
HXLINE(1146)					point->put();
            				}
            			}
            			else {
HXLINE(1150)				{
HXLINE(1150)					 ::flixel::math::FlxPoint _g = this->scroll;
HXDLIN(1150)					_g->set_x((_g->x + ((((this->_scrollTarget->x - this->scroll->x) * this->followLerp) * ( (Float)(::flixel::FlxG_obj::updateFramerate) )) / ( (Float)(60) ))));
            				}
HXLINE(1151)				{
HXLINE(1151)					 ::flixel::math::FlxPoint _g1 = this->scroll;
HXDLIN(1151)					_g1->set_y((_g1->y + ((((this->_scrollTarget->y - this->scroll->y) * this->followLerp) * ( (Float)(::flixel::FlxG_obj::updateFramerate) )) / ( (Float)(60) ))));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateFollow,(void))

void FlxCamera_obj::updateFlash(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1159_updateFlash)
HXDLIN(1159)		if ((this->_fxFlashAlpha > ((Float)0.0))) {
HXLINE(1161)			 ::flixel::FlxCamera _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1161)			_hx_tmp->_fxFlashAlpha = (_hx_tmp->_fxFlashAlpha - (elapsed / this->_fxFlashDuration));
HXLINE(1162)			bool _hx_tmp1;
HXDLIN(1162)			if ((this->_fxFlashAlpha <= 0)) {
HXLINE(1162)				_hx_tmp1 = ::hx::IsNotNull( this->_fxFlashComplete );
            			}
            			else {
HXLINE(1162)				_hx_tmp1 = false;
            			}
HXDLIN(1162)			if (_hx_tmp1) {
HXLINE(1164)				this->_fxFlashComplete();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateFlash,(void))

void FlxCamera_obj::updateFade(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1170_updateFade)
HXLINE(1171)		if (this->_fxFadeCompleted) {
HXLINE(1172)			return;
            		}
HXLINE(1174)		if (this->_fxFadeIn) {
HXLINE(1176)			 ::flixel::FlxCamera _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1176)			_hx_tmp->_fxFadeAlpha = (_hx_tmp->_fxFadeAlpha - (elapsed / this->_fxFadeDuration));
HXLINE(1177)			if ((this->_fxFadeAlpha <= ((Float)0.0))) {
HXLINE(1179)				this->_fxFadeAlpha = ((Float)0.0);
HXLINE(1180)				this->completeFade();
            			}
            		}
            		else {
HXLINE(1185)			 ::flixel::FlxCamera _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1185)			_hx_tmp->_fxFadeAlpha = (_hx_tmp->_fxFadeAlpha + (elapsed / this->_fxFadeDuration));
HXLINE(1186)			if ((this->_fxFadeAlpha >= ((Float)1.0))) {
HXLINE(1188)				this->_fxFadeAlpha = ((Float)1.0);
HXLINE(1189)				this->completeFade();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateFade,(void))

void FlxCamera_obj::completeFade(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1195_completeFade)
HXLINE(1196)		this->_fxFadeCompleted = true;
HXLINE(1197)		if (::hx::IsNotNull( this->_fxFadeComplete )) {
HXLINE(1198)			this->_fxFadeComplete();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,completeFade,(void))

void FlxCamera_obj::updateShake(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1203_updateShake)
HXDLIN(1203)		if ((this->_fxShakeDuration > 0)) {
HXLINE(1205)			 ::flixel::FlxCamera _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1205)			_hx_tmp->_fxShakeDuration = (_hx_tmp->_fxShakeDuration - elapsed);
HXLINE(1206)			if ((this->_fxShakeDuration <= 0)) {
HXLINE(1208)				if (::hx::IsNotNull( this->_fxShakeComplete )) {
HXLINE(1210)					this->_fxShakeComplete();
            				}
            			}
            			else {
HXLINE(1215)				if (::hx::IsNotEq( this->_fxShakeAxes,::flixel::util::FlxAxes_obj::Y_dyn() )) {
HXLINE(1217)					 ::openfl::display::Sprite _g = this->flashSprite;
HXDLIN(1217)					Float _hx_tmp = _g->get_x();
HXDLIN(1217)					Float _hx_tmp1 = ::flixel::FlxG_obj::random->_hx_float((-(this->_fxShakeIntensity) * ( (Float)(this->width) )),(this->_fxShakeIntensity * ( (Float)(this->width) )),null());
HXDLIN(1217)					_g->set_x((_hx_tmp + ((_hx_tmp1 * this->zoom) * ::flixel::FlxG_obj::scaleMode->scale->x)));
            				}
HXLINE(1219)				if (::hx::IsNotEq( this->_fxShakeAxes,::flixel::util::FlxAxes_obj::X_dyn() )) {
HXLINE(1221)					 ::openfl::display::Sprite _g = this->flashSprite;
HXDLIN(1221)					Float _hx_tmp = _g->get_y();
HXDLIN(1221)					Float _hx_tmp1 = ::flixel::FlxG_obj::random->_hx_float((-(this->_fxShakeIntensity) * ( (Float)(this->height) )),(this->_fxShakeIntensity * ( (Float)(this->height) )),null());
HXDLIN(1221)					_g->set_y((_hx_tmp + ((_hx_tmp1 * this->zoom) * ::flixel::FlxG_obj::scaleMode->scale->y)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,updateShake,(void))

void FlxCamera_obj::updateFlashSpritePosition(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1233_updateFlashSpritePosition)
HXDLIN(1233)		if (::hx::IsNotNull( this->flashSprite )) {
HXLINE(1235)			this->flashSprite->set_x(((this->x * ::flixel::FlxG_obj::scaleMode->scale->x) + this->_flashOffset->x));
HXLINE(1236)			this->flashSprite->set_y(((this->y * ::flixel::FlxG_obj::scaleMode->scale->y) + this->_flashOffset->y));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateFlashSpritePosition,(void))

void FlxCamera_obj::updateFlashOffset(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1245_updateFlashOffset)
HXLINE(1246)		this->_flashOffset->set_x((((( (Float)(this->width) ) * ((Float)0.5)) * ::flixel::FlxG_obj::scaleMode->scale->x) * this->initialZoom));
HXLINE(1247)		this->_flashOffset->set_y((((( (Float)(this->height) ) * ((Float)0.5)) * ::flixel::FlxG_obj::scaleMode->scale->y) * this->initialZoom));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateFlashOffset,(void))

void FlxCamera_obj::updateScrollRect(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1259_updateScrollRect)
HXLINE(1260)		 ::openfl::geom::Rectangle rect;
HXDLIN(1260)		if (::hx::IsNotNull( this->_scrollRect )) {
HXLINE(1260)			rect = this->_scrollRect->get_scrollRect();
            		}
            		else {
HXLINE(1260)			rect = null();
            		}
HXLINE(1262)		if (::hx::IsNotNull( rect )) {
HXLINE(1264)			rect->x = (rect->y = ( (Float)(0) ));
HXLINE(1266)			rect->width = ((( (Float)(this->width) ) * this->initialZoom) * ::flixel::FlxG_obj::scaleMode->scale->x);
HXLINE(1267)			rect->height = ((( (Float)(this->height) ) * this->initialZoom) * ::flixel::FlxG_obj::scaleMode->scale->y);
HXLINE(1269)			this->_scrollRect->set_scrollRect(rect);
HXLINE(1271)			this->_scrollRect->set_x((((Float)-0.5) * rect->width));
HXLINE(1272)			this->_scrollRect->set_y((((Float)-0.5) * rect->height));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateScrollRect,(void))

void FlxCamera_obj::updateInternalSpritePositions(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1284_updateInternalSpritePositions)
HXDLIN(1284)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1286)			if (::hx::IsNotNull( this->_flashBitmap )) {
HXLINE(1288)				this->_flashBitmap->set_x(( (Float)(0) ));
HXLINE(1289)				this->_flashBitmap->set_y(( (Float)(0) ));
            			}
            		}
            		else {
HXLINE(1294)			if (::hx::IsNotNull( this->canvas )) {
HXLINE(1296)				this->canvas->set_x((((((Float)-0.5) * ( (Float)(this->width) )) * (this->scaleX - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->x));
HXLINE(1297)				this->canvas->set_y((((((Float)-0.5) * ( (Float)(this->height) )) * (this->scaleY - this->initialZoom)) * ::flixel::FlxG_obj::scaleMode->scale->y));
HXLINE(1299)				this->canvas->set_scaleX(this->totalScaleX);
HXLINE(1300)				this->canvas->set_scaleY(this->totalScaleY);
HXLINE(1303)				if (::hx::IsNotNull( this->debugLayer )) {
HXLINE(1305)					 ::openfl::display::Sprite _hx_tmp = this->debugLayer;
HXDLIN(1305)					_hx_tmp->set_x(this->canvas->get_x());
HXLINE(1306)					 ::openfl::display::Sprite _hx_tmp1 = this->debugLayer;
HXDLIN(1306)					_hx_tmp1->set_y(this->canvas->get_y());
HXLINE(1308)					this->debugLayer->set_scaleX(this->totalScaleX);
HXLINE(1309)					this->debugLayer->set_scaleY(this->totalScaleY);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateInternalSpritePositions,(void))

void FlxCamera_obj::follow( ::flixel::FlxObject Target, ::flixel::FlxCameraFollowStyle Style, ::Dynamic Lerp){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1326_follow)
HXLINE(1327)		if (::hx::IsNull( Style )) {
HXLINE(1328)			Style = ::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn();
            		}
HXLINE(1330)		if (::hx::IsNull( Lerp )) {
HXLINE(1331)			Lerp = (( (Float)(60) ) / ( (Float)(::flixel::FlxG_obj::updateFramerate) ));
            		}
HXLINE(1333)		this->style = Style;
HXLINE(1334)		this->target = Target;
HXLINE(1335)		this->set_followLerp(( (Float)(Lerp) ));
HXLINE(1336)		Float helper;
HXLINE(1337)		Float w = ( (Float)(0) );
HXLINE(1338)		Float h = ( (Float)(0) );
HXLINE(1339)		this->_lastTargetPosition = null();
HXLINE(1341)		switch((int)(Style->_hx_getIndex())){
            			case (int)0: {
HXLINE(1344)				if (::hx::IsNotNull( this->target )) {
HXLINE(1346)					w = this->target->get_width();
HXLINE(1347)					h = this->target->get_height();
            				}
HXLINE(1349)				Float X = ((( (Float)(this->width) ) - w) / ( (Float)(2) ));
HXDLIN(1349)				Float Y = (((( (Float)(this->height) ) - h) / ( (Float)(2) )) - (h * ((Float)0.25)));
HXDLIN(1349)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1349)				_this->x = X;
HXDLIN(1349)				_this->y = Y;
HXDLIN(1349)				_this->width = w;
HXDLIN(1349)				_this->height = h;
HXDLIN(1349)				 ::flixel::math::FlxRect rect = _this;
HXDLIN(1349)				rect->_inPool = false;
HXDLIN(1349)				this->deadzone = rect;
            			}
            			break;
            			case (int)1: {
HXLINE(1352)				Float w = (( (Float)(this->width) ) / ( (Float)(8) ));
HXLINE(1353)				Float h = (( (Float)(this->height) ) / ( (Float)(3) ));
HXLINE(1354)				Float X = ((( (Float)(this->width) ) - w) / ( (Float)(2) ));
HXDLIN(1354)				Float Y = (((( (Float)(this->height) ) - h) / ( (Float)(2) )) - (h * ((Float)0.25)));
HXDLIN(1354)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1354)				_this->x = X;
HXDLIN(1354)				_this->y = Y;
HXDLIN(1354)				_this->width = w;
HXDLIN(1354)				_this->height = h;
HXDLIN(1354)				 ::flixel::math::FlxRect rect = _this;
HXDLIN(1354)				rect->_inPool = false;
HXDLIN(1354)				this->deadzone = rect;
            			}
            			break;
            			case (int)2: {
HXLINE(1357)				helper = (::Math_obj::max(( (Float)(this->width) ),( (Float)(this->height) )) / ( (Float)(4) ));
HXLINE(1358)				Float X = ((( (Float)(this->width) ) - helper) / ( (Float)(2) ));
HXDLIN(1358)				Float Y = ((( (Float)(this->height) ) - helper) / ( (Float)(2) ));
HXDLIN(1358)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1358)				_this->x = X;
HXDLIN(1358)				_this->y = Y;
HXDLIN(1358)				_this->width = helper;
HXDLIN(1358)				_this->height = helper;
HXDLIN(1358)				 ::flixel::math::FlxRect rect = _this;
HXDLIN(1358)				rect->_inPool = false;
HXDLIN(1358)				this->deadzone = rect;
            			}
            			break;
            			case (int)3: {
HXLINE(1361)				helper = (::Math_obj::max(( (Float)(this->width) ),( (Float)(this->height) )) / ( (Float)(8) ));
HXLINE(1362)				Float X = ((( (Float)(this->width) ) - helper) / ( (Float)(2) ));
HXDLIN(1362)				Float Y = ((( (Float)(this->height) ) - helper) / ( (Float)(2) ));
HXDLIN(1362)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1362)				_this->x = X;
HXDLIN(1362)				_this->y = Y;
HXDLIN(1362)				_this->width = helper;
HXDLIN(1362)				_this->height = helper;
HXDLIN(1362)				 ::flixel::math::FlxRect rect = _this;
HXDLIN(1362)				rect->_inPool = false;
HXDLIN(1362)				this->deadzone = rect;
            			}
            			break;
            			case (int)4: {
HXLINE(1365)				Float Width = ( (Float)(this->width) );
HXDLIN(1365)				Float Height = ( (Float)(this->height) );
HXDLIN(1365)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1365)				_this->x = ( (Float)(0) );
HXDLIN(1365)				_this->y = ( (Float)(0) );
HXDLIN(1365)				_this->width = Width;
HXDLIN(1365)				_this->height = Height;
HXDLIN(1365)				 ::flixel::math::FlxRect rect = _this;
HXDLIN(1365)				rect->_inPool = false;
HXDLIN(1365)				this->deadzone = rect;
            			}
            			break;
            			case (int)5: {
HXLINE(1368)				this->deadzone = null();
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxCamera_obj,follow,(void))

void FlxCamera_obj::snapToTarget(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1377_snapToTarget)
HXLINE(1378)		this->updateFollow();
HXLINE(1379)		{
HXLINE(1379)			 ::flixel::math::FlxPoint _this = this->scroll;
HXDLIN(1379)			 ::flixel::math::FlxPoint point = this->_scrollTarget;
HXDLIN(1379)			_this->set_x(point->x);
HXDLIN(1379)			_this->set_y(point->y);
HXDLIN(1379)			if (point->_weak) {
HXLINE(1379)				point->put();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,snapToTarget,(void))

void FlxCamera_obj::focusOn( ::flixel::math::FlxPoint point){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1388_focusOn)
HXLINE(1389)		this->scroll->set((point->x - (( (Float)(this->width) ) * ((Float)0.5))),(point->y - (( (Float)(this->height) ) * ((Float)0.5))));
HXLINE(1390)		if (point->_weak) {
HXLINE(1390)			point->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,focusOn,(void))

void FlxCamera_obj::flash(::hx::Null< int >  __o_Color,::hx::Null< Float >  __o_Duration, ::Dynamic OnComplete,::hx::Null< bool >  __o_Force){
            		int Color = __o_Color.Default(-1);
            		Float Duration = __o_Duration.Default(1);
            		bool Force = __o_Force.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1402_flash)
HXLINE(1403)		bool _hx_tmp;
HXDLIN(1403)		if (!(Force)) {
HXLINE(1403)			_hx_tmp = (this->_fxFlashAlpha > ((Float)0.0));
            		}
            		else {
HXLINE(1403)			_hx_tmp = false;
            		}
HXDLIN(1403)		if (_hx_tmp) {
HXLINE(1404)			return;
            		}
HXLINE(1406)		this->_fxFlashColor = Color;
HXLINE(1407)		if ((Duration <= 0)) {
HXLINE(1408)			Duration = ((Float)0.000001);
            		}
HXLINE(1409)		this->_fxFlashDuration = Duration;
HXLINE(1410)		this->_fxFlashComplete = OnComplete;
HXLINE(1411)		this->_fxFlashAlpha = ((Float)1.0);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,flash,(void))

void FlxCamera_obj::fade(::hx::Null< int >  __o_Color,::hx::Null< Float >  __o_Duration,::hx::Null< bool >  __o_FadeIn, ::Dynamic OnComplete,::hx::Null< bool >  __o_Force){
            		int Color = __o_Color.Default(-16777216);
            		Float Duration = __o_Duration.Default(1);
            		bool FadeIn = __o_FadeIn.Default(false);
            		bool Force = __o_Force.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1424_fade)
HXLINE(1425)		bool _hx_tmp;
HXDLIN(1425)		if (!(this->_fxFadeCompleted)) {
HXLINE(1425)			_hx_tmp = !(Force);
            		}
            		else {
HXLINE(1425)			_hx_tmp = false;
            		}
HXDLIN(1425)		if (_hx_tmp) {
HXLINE(1426)			return;
            		}
HXLINE(1428)		this->_fxFadeColor = Color;
HXLINE(1429)		if ((Duration <= 0)) {
HXLINE(1430)			Duration = ((Float)0.000001);
            		}
HXLINE(1432)		this->_fxFadeIn = FadeIn;
HXLINE(1433)		this->_fxFadeDuration = Duration;
HXLINE(1434)		this->_fxFadeComplete = OnComplete;
HXLINE(1436)		Float _hx_tmp1;
HXDLIN(1436)		if (this->_fxFadeIn) {
HXLINE(1436)			_hx_tmp1 = ((Float)0.999999);
            		}
            		else {
HXLINE(1436)			_hx_tmp1 = ((Float)0.000001);
            		}
HXDLIN(1436)		this->_fxFadeAlpha = _hx_tmp1;
HXLINE(1437)		this->_fxFadeCompleted = false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxCamera_obj,fade,(void))

void FlxCamera_obj::shake(::hx::Null< Float >  __o_Intensity,::hx::Null< Float >  __o_Duration, ::Dynamic OnComplete,::hx::Null< bool >  __o_Force, ::flixel::util::FlxAxes Axes){
            		Float Intensity = __o_Intensity.Default(((Float)0.05));
            		Float Duration = __o_Duration.Default(((Float)0.5));
            		bool Force = __o_Force.Default(true);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1451_shake)
HXLINE(1452)		if (::hx::IsNull( Axes )) {
HXLINE(1453)			Axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            		}
HXLINE(1455)		bool _hx_tmp;
HXDLIN(1455)		if (!(Force)) {
HXLINE(1455)			_hx_tmp = (this->_fxShakeDuration > 0);
            		}
            		else {
HXLINE(1455)			_hx_tmp = false;
            		}
HXDLIN(1455)		if (_hx_tmp) {
HXLINE(1456)			return;
            		}
HXLINE(1458)		this->_fxShakeIntensity = Intensity;
HXLINE(1459)		this->_fxShakeDuration = Duration;
HXLINE(1460)		this->_fxShakeComplete = OnComplete;
HXLINE(1461)		this->_fxShakeAxes = Axes;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxCamera_obj,shake,(void))

void FlxCamera_obj::stopFX(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1468_stopFX)
HXLINE(1469)		this->_fxFlashAlpha = ((Float)0.0);
HXLINE(1470)		this->_fxFadeAlpha = ((Float)0.0);
HXLINE(1471)		this->_fxShakeDuration = ( (Float)(0) );
HXLINE(1472)		this->updateFlashSpritePosition();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,stopFX,(void))

void FlxCamera_obj::setFilters(::Array< ::Dynamic> filters){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1480_setFilters)
HXDLIN(1480)		this->_filters = filters;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,setFilters,(void))

 ::flixel::FlxCamera FlxCamera_obj::copyFrom( ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1490_copyFrom)
HXLINE(1491)		this->setScrollBounds(Camera->minScrollX,Camera->maxScrollX,Camera->minScrollY,Camera->maxScrollY);
HXLINE(1493)		this->target = Camera->target;
HXLINE(1495)		if (::hx::IsNotNull( this->target )) {
HXLINE(1497)			if (::hx::IsNull( Camera->deadzone )) {
HXLINE(1499)				this->deadzone = null();
            			}
            			else {
HXLINE(1503)				if (::hx::IsNull( this->deadzone )) {
HXLINE(1505)					 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1505)					_this->x = ( (Float)(0) );
HXDLIN(1505)					_this->y = ( (Float)(0) );
HXDLIN(1505)					_this->width = ( (Float)(0) );
HXDLIN(1505)					_this->height = ( (Float)(0) );
HXDLIN(1505)					 ::flixel::math::FlxRect rect = _this;
HXDLIN(1505)					rect->_inPool = false;
HXDLIN(1505)					this->deadzone = rect;
            				}
HXLINE(1507)				{
HXLINE(1507)					 ::flixel::math::FlxRect _this = this->deadzone;
HXDLIN(1507)					 ::flixel::math::FlxRect Rect = Camera->deadzone;
HXDLIN(1507)					_this->x = Rect->x;
HXDLIN(1507)					_this->y = Rect->y;
HXDLIN(1507)					_this->width = Rect->width;
HXDLIN(1507)					_this->height = Rect->height;
HXDLIN(1507)					if (Rect->_weak) {
HXLINE(1507)						if (!(Rect->_inPool)) {
HXLINE(1507)							Rect->_inPool = true;
HXDLIN(1507)							Rect->_weak = false;
HXDLIN(1507)							::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            						}
            					}
            				}
            			}
            		}
HXLINE(1510)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,copyFrom,return )

void FlxCamera_obj::fill(int Color,::hx::Null< bool >  __o_BlendAlpha,::hx::Null< Float >  __o_FxAlpha, ::openfl::display::Graphics graphics){
            		bool BlendAlpha = __o_BlendAlpha.Default(true);
            		Float FxAlpha = __o_FxAlpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1521_fill)
HXDLIN(1521)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1523)			if (BlendAlpha) {
HXLINE(1525)				this->_fill->fillRect(this->_flashRect,Color);
HXLINE(1526)				this->buffer->copyPixels(this->_fill,this->_flashRect,this->_flashPoint,null(),null(),BlendAlpha);
            			}
            			else {
HXLINE(1530)				this->buffer->fillRect(this->_flashRect,Color);
            			}
            		}
            		else {
HXLINE(1535)			if ((FxAlpha == 0)) {
HXLINE(1536)				return;
            			}
HXLINE(1538)			 ::openfl::display::Graphics targetGraphics;
HXDLIN(1538)			if (::hx::IsNull( graphics )) {
HXLINE(1538)				targetGraphics = this->canvas->get_graphics();
            			}
            			else {
HXLINE(1538)				targetGraphics = graphics;
            			}
HXLINE(1540)			targetGraphics->beginFill(Color,FxAlpha);
HXLINE(1543)			targetGraphics->drawRect((this->viewOffsetX - ( (Float)(1) )),(this->viewOffsetY - ( (Float)(1) )),(this->viewWidth + 2),(this->viewHeight + 2));
HXLINE(1544)			targetGraphics->endFill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,fill,(void))

void FlxCamera_obj::drawFX(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1553_drawFX)
HXLINE(1554)		Float alphaComponent;
HXLINE(1557)		if ((this->_fxFlashAlpha > ((Float)0.0))) {
HXLINE(1559)			alphaComponent = ( (Float)(((this->_fxFlashColor >> 24) & 255)) );
HXLINE(1561)			if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1563)				Float _hx_tmp;
HXDLIN(1563)				if ((alphaComponent <= 0)) {
HXLINE(1563)					_hx_tmp = ( (Float)(255) );
            				}
            				else {
HXLINE(1563)					_hx_tmp = alphaComponent;
            				}
HXDLIN(1563)				int _hx_tmp1 = (::Std_obj::_hx_int((_hx_tmp * this->_fxFlashAlpha)) << 24);
HXDLIN(1563)				this->fill((_hx_tmp1 + (this->_fxFlashColor & 16777215)),null(),null(),null());
            			}
            			else {
HXLINE(1567)				int _hx_tmp = (this->_fxFlashColor & 16777215);
HXDLIN(1567)				Float _hx_tmp1;
HXDLIN(1567)				if ((alphaComponent <= 0)) {
HXLINE(1567)					_hx_tmp1 = ( (Float)(255) );
            				}
            				else {
HXLINE(1567)					_hx_tmp1 = alphaComponent;
            				}
HXDLIN(1567)				Float _hx_tmp2 = ((_hx_tmp1 * this->_fxFlashAlpha) / ( (Float)(255) ));
HXDLIN(1567)				this->fill(_hx_tmp,true,_hx_tmp2,this->canvas->get_graphics());
            			}
            		}
HXLINE(1572)		if ((this->_fxFadeAlpha > ((Float)0.0))) {
HXLINE(1574)			alphaComponent = ( (Float)(((this->_fxFadeColor >> 24) & 255)) );
HXLINE(1576)			if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1578)				Float _hx_tmp;
HXDLIN(1578)				if ((alphaComponent <= 0)) {
HXLINE(1578)					_hx_tmp = ( (Float)(255) );
            				}
            				else {
HXLINE(1578)					_hx_tmp = alphaComponent;
            				}
HXDLIN(1578)				int _hx_tmp1 = (::Std_obj::_hx_int((_hx_tmp * this->_fxFadeAlpha)) << 24);
HXDLIN(1578)				this->fill((_hx_tmp1 + (this->_fxFadeColor & 16777215)),null(),null(),null());
            			}
            			else {
HXLINE(1582)				int _hx_tmp = (this->_fxFadeColor & 16777215);
HXDLIN(1582)				Float _hx_tmp1;
HXDLIN(1582)				if ((alphaComponent <= 0)) {
HXLINE(1582)					_hx_tmp1 = ( (Float)(255) );
            				}
            				else {
HXLINE(1582)					_hx_tmp1 = alphaComponent;
            				}
HXDLIN(1582)				Float _hx_tmp2 = ((_hx_tmp1 * this->_fxFadeAlpha) / ( (Float)(255) ));
HXDLIN(1582)				this->fill(_hx_tmp,true,_hx_tmp2,this->canvas->get_graphics());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,drawFX,(void))

void FlxCamera_obj::checkResize(){
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_1590_checkResize)
HXDLIN(1590)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1592)			bool _hx_tmp;
HXDLIN(1592)			if ((this->width == this->buffer->width)) {
HXLINE(1592)				_hx_tmp = (this->height != this->buffer->height);
            			}
            			else {
HXLINE(1592)				_hx_tmp = true;
            			}
HXDLIN(1592)			if (_hx_tmp) {
HXLINE(1594)				 ::flixel::graphics::FlxGraphic oldBuffer = this->screen->graphic;
HXLINE(1595)				this->buffer =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,0);
HXLINE(1596)				this->screen->set_pixels(this->buffer);
HXLINE(1597)				this->screen->origin->set(null(),null());
HXLINE(1598)				this->_flashBitmap->set_bitmapData(this->buffer);
HXLINE(1599)				this->_flashRect->width = ( (Float)(this->width) );
HXLINE(1600)				this->_flashRect->height = ( (Float)(this->height) );
HXLINE(1601)				this->_fill = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_fill);
HXLINE(1602)				this->_fill =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,0);
HXLINE(1603)				::flixel::FlxG_obj::bitmap->removeIfNoUse(oldBuffer);
            			}
HXLINE(1606)			{
HXLINE(1606)				this->_blitMatrix->identity();
HXDLIN(1606)				this->_blitMatrix->translate(-(this->viewOffsetX),-(this->viewOffsetY));
HXDLIN(1606)				this->_blitMatrix->scale(this->scaleX,this->scaleY);
HXDLIN(1606)				bool _hx_tmp1;
HXDLIN(1606)				if (!((this->scaleX < this->initialZoom))) {
HXLINE(1606)					_hx_tmp1 = (this->scaleY < this->initialZoom);
            				}
            				else {
HXLINE(1606)					_hx_tmp1 = true;
            				}
HXDLIN(1606)				this->_useBlitMatrix = _hx_tmp1;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,checkResize,(void))

void FlxCamera_obj::updateBlitMatrix(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1611_updateBlitMatrix)
HXLINE(1612)		this->_blitMatrix->identity();
HXLINE(1613)		this->_blitMatrix->translate(-(this->viewOffsetX),-(this->viewOffsetY));
HXLINE(1614)		this->_blitMatrix->scale(this->scaleX,this->scaleY);
HXLINE(1616)		bool _hx_tmp;
HXDLIN(1616)		if (!((this->scaleX < this->initialZoom))) {
HXLINE(1616)			_hx_tmp = (this->scaleY < this->initialZoom);
            		}
            		else {
HXLINE(1616)			_hx_tmp = true;
            		}
HXDLIN(1616)		this->_useBlitMatrix = _hx_tmp;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,updateBlitMatrix,(void))

void FlxCamera_obj::setSize(int Width,int Height){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1626_setSize)
HXLINE(1627)		this->set_width(Width);
HXLINE(1628)		this->set_height(Height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxCamera_obj,setSize,(void))

void FlxCamera_obj::setPosition(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1639_setPosition)
HXLINE(1640)		this->set_x(X);
HXLINE(1641)		this->set_y(Y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxCamera_obj,setPosition,(void))

void FlxCamera_obj::setScrollBoundsRect(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_Width,::hx::Null< Float >  __o_Height,::hx::Null< bool >  __o_UpdateWorld){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            		Float Width = __o_Width.Default(0);
            		Float Height = __o_Height.Default(0);
            		bool UpdateWorld = __o_UpdateWorld.Default(false);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1654_setScrollBoundsRect)
HXLINE(1655)		if (UpdateWorld) {
HXLINE(1657)			 ::flixel::math::FlxRect _this = ::flixel::FlxG_obj::worldBounds;
HXDLIN(1657)			_this->x = X;
HXDLIN(1657)			_this->y = Y;
HXDLIN(1657)			_this->width = Width;
HXDLIN(1657)			_this->height = Height;
            		}
HXLINE(1660)		this->setScrollBounds(X,(X + Width),Y,(Y + Height));
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxCamera_obj,setScrollBoundsRect,(void))

void FlxCamera_obj::setScrollBounds( ::Dynamic MinX, ::Dynamic MaxX, ::Dynamic MinY, ::Dynamic MaxY){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1673_setScrollBounds)
HXLINE(1674)		this->minScrollX = MinX;
HXLINE(1675)		this->maxScrollX = MaxX;
HXLINE(1676)		this->minScrollY = MinY;
HXLINE(1677)		this->maxScrollY = MaxY;
HXLINE(1678)		this->updateScroll();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxCamera_obj,setScrollBounds,(void))

void FlxCamera_obj::setScale(Float X,Float Y){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1689_setScale)
HXLINE(1690)		this->scaleX = X;
HXLINE(1691)		this->scaleY = Y;
HXLINE(1693)		this->totalScaleX = (this->scaleX * ::flixel::FlxG_obj::scaleMode->scale->x);
HXLINE(1694)		this->totalScaleY = (this->scaleY * ::flixel::FlxG_obj::scaleMode->scale->y);
HXLINE(1696)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1698)			{
HXLINE(1698)				this->_blitMatrix->identity();
HXDLIN(1698)				this->_blitMatrix->translate(-(this->viewOffsetX),-(this->viewOffsetY));
HXDLIN(1698)				this->_blitMatrix->scale(this->scaleX,this->scaleY);
HXDLIN(1698)				bool _hx_tmp;
HXDLIN(1698)				if (!((this->scaleX < this->initialZoom))) {
HXLINE(1698)					_hx_tmp = (this->scaleY < this->initialZoom);
            				}
            				else {
HXLINE(1698)					_hx_tmp = true;
            				}
HXDLIN(1698)				this->_useBlitMatrix = _hx_tmp;
            			}
HXLINE(1700)			if (this->_useBlitMatrix) {
HXLINE(1702)				this->_flashBitmap->set_scaleX((this->initialZoom * ::flixel::FlxG_obj::scaleMode->scale->x));
HXLINE(1703)				this->_flashBitmap->set_scaleY((this->initialZoom * ::flixel::FlxG_obj::scaleMode->scale->y));
            			}
            			else {
HXLINE(1707)				this->_flashBitmap->set_scaleX(this->totalScaleX);
HXLINE(1708)				this->_flashBitmap->set_scaleY(this->totalScaleY);
            			}
            		}
HXLINE(1712)		{
HXLINE(1712)			this->viewOffsetX = (((((Float)0.5) * ( (Float)(this->width) )) * (this->scaleX - this->initialZoom)) / this->scaleX);
HXDLIN(1712)			this->viewOffsetWidth = (( (Float)(this->width) ) - this->viewOffsetX);
HXDLIN(1712)			this->viewWidth = (( (Float)(this->width) ) - (( (Float)(2) ) * this->viewOffsetX));
            		}
HXLINE(1713)		{
HXLINE(1713)			this->viewOffsetY = (((((Float)0.5) * ( (Float)(this->height) )) * (this->scaleY - this->initialZoom)) / this->scaleY);
HXDLIN(1713)			this->viewOffsetHeight = (( (Float)(this->height) ) - this->viewOffsetY);
HXDLIN(1713)			this->viewHeight = (( (Float)(this->height) ) - (( (Float)(2) ) * this->viewOffsetY));
            		}
HXLINE(1715)		this->updateScrollRect();
HXLINE(1716)		this->updateInternalSpritePositions();
HXLINE(1718)		::flixel::FlxG_obj::cameras->cameraResized->dispatch(::hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxCamera_obj,setScale,(void))

void FlxCamera_obj::onResize(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1726_onResize)
HXLINE(1727)		this->updateFlashOffset();
HXLINE(1728)		this->setScale(this->scaleX,this->scaleY);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,onResize,(void))

bool FlxCamera_obj::containsPoint( ::flixel::math::FlxPoint point,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height){
            		Float width = __o_width.Default(0);
            		Float height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1738_containsPoint)
HXDLIN(1738)		bool _hx_tmp;
HXDLIN(1738)		bool _hx_tmp1;
HXDLIN(1738)		if (((point->x + width) > this->viewOffsetX)) {
HXDLIN(1738)			_hx_tmp1 = (point->x < this->viewOffsetWidth);
            		}
            		else {
HXDLIN(1738)			_hx_tmp1 = false;
            		}
HXDLIN(1738)		if (_hx_tmp1) {
HXDLIN(1738)			_hx_tmp = ((point->y + height) > this->viewOffsetY);
            		}
            		else {
HXDLIN(1738)			_hx_tmp = false;
            		}
HXDLIN(1738)		if (_hx_tmp) {
HXDLIN(1738)			return (point->y < this->viewOffsetHeight);
            		}
            		else {
HXDLIN(1738)			return false;
            		}
HXDLIN(1738)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxCamera_obj,containsPoint,return )

Float FlxCamera_obj::set_followLerp(Float Value){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1743_set_followLerp)
HXDLIN(1743)		 ::Dynamic Max = (( (Float)(60) ) / ( (Float)(::flixel::FlxG_obj::updateFramerate) ));
HXDLIN(1743)		Float lowerBound;
HXDLIN(1743)		if ((Value < 0)) {
HXDLIN(1743)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXDLIN(1743)			lowerBound = Value;
            		}
HXDLIN(1743)		Float _hx_tmp;
HXDLIN(1743)		bool _hx_tmp1;
HXDLIN(1743)		if (::hx::IsNotNull( Max )) {
HXDLIN(1743)			_hx_tmp1 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXDLIN(1743)			_hx_tmp1 = false;
            		}
HXDLIN(1743)		if (_hx_tmp1) {
HXDLIN(1743)			_hx_tmp = ( (Float)(Max) );
            		}
            		else {
HXDLIN(1743)			_hx_tmp = lowerBound;
            		}
HXDLIN(1743)		return (this->followLerp = _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_followLerp,return )

int FlxCamera_obj::set_width(int Value){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1747_set_width)
HXLINE(1748)		bool _hx_tmp;
HXDLIN(1748)		if ((this->width != Value)) {
HXLINE(1748)			_hx_tmp = (Value > 0);
            		}
            		else {
HXLINE(1748)			_hx_tmp = false;
            		}
HXDLIN(1748)		if (_hx_tmp) {
HXLINE(1750)			this->width = Value;
HXLINE(1751)			{
HXLINE(1751)				this->viewOffsetX = (((((Float)0.5) * ( (Float)(this->width) )) * (this->scaleX - this->initialZoom)) / this->scaleX);
HXDLIN(1751)				this->viewOffsetWidth = (( (Float)(this->width) ) - this->viewOffsetX);
HXDLIN(1751)				this->viewWidth = (( (Float)(this->width) ) - (( (Float)(2) ) * this->viewOffsetX));
            			}
HXLINE(1752)			this->updateFlashOffset();
HXLINE(1753)			this->updateScrollRect();
HXLINE(1754)			this->updateInternalSpritePositions();
HXLINE(1756)			::flixel::FlxG_obj::cameras->cameraResized->dispatch(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1758)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_width,return )

int FlxCamera_obj::set_height(int Value){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1762_set_height)
HXLINE(1763)		bool _hx_tmp;
HXDLIN(1763)		if ((this->height != Value)) {
HXLINE(1763)			_hx_tmp = (Value > 0);
            		}
            		else {
HXLINE(1763)			_hx_tmp = false;
            		}
HXDLIN(1763)		if (_hx_tmp) {
HXLINE(1765)			this->height = Value;
HXLINE(1766)			{
HXLINE(1766)				this->viewOffsetY = (((((Float)0.5) * ( (Float)(this->height) )) * (this->scaleY - this->initialZoom)) / this->scaleY);
HXDLIN(1766)				this->viewOffsetHeight = (( (Float)(this->height) ) - this->viewOffsetY);
HXDLIN(1766)				this->viewHeight = (( (Float)(this->height) ) - (( (Float)(2) ) * this->viewOffsetY));
            			}
HXLINE(1767)			this->updateFlashOffset();
HXLINE(1768)			this->updateScrollRect();
HXLINE(1769)			this->updateInternalSpritePositions();
HXLINE(1771)			::flixel::FlxG_obj::cameras->cameraResized->dispatch(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1773)		return Value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_height,return )

Float FlxCamera_obj::set_zoom(Float Zoom){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1777_set_zoom)
HXLINE(1778)		Float _hx_tmp;
HXDLIN(1778)		if ((Zoom == 0)) {
HXLINE(1778)			_hx_tmp = ::flixel::FlxCamera_obj::defaultZoom;
            		}
            		else {
HXLINE(1778)			_hx_tmp = Zoom;
            		}
HXDLIN(1778)		this->zoom = _hx_tmp;
HXLINE(1779)		this->setScale(this->zoom,this->zoom);
HXLINE(1780)		return this->zoom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_zoom,return )

Float FlxCamera_obj::set_alpha(Float Alpha){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1784_set_alpha)
HXLINE(1785)		Float lowerBound;
HXDLIN(1785)		if ((Alpha < 0)) {
HXLINE(1785)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE(1785)			lowerBound = Alpha;
            		}
HXDLIN(1785)		Float _hx_tmp;
HXDLIN(1785)		if ((lowerBound > 1)) {
HXLINE(1785)			_hx_tmp = ( (Float)(1) );
            		}
            		else {
HXLINE(1785)			_hx_tmp = lowerBound;
            		}
HXDLIN(1785)		this->alpha = _hx_tmp;
HXLINE(1786)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1788)			this->_flashBitmap->set_alpha(Alpha);
            		}
            		else {
HXLINE(1792)			this->canvas->set_alpha(Alpha);
            		}
HXLINE(1794)		return Alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_alpha,return )

Float FlxCamera_obj::set_angle(Float Angle){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1798_set_angle)
HXLINE(1799)		this->angle = Angle;
HXLINE(1800)		this->flashSprite->set_rotation(Angle);
HXLINE(1801)		return Angle;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_angle,return )

int FlxCamera_obj::set_color(int Color){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1805_set_color)
HXLINE(1806)		this->color = Color;
HXLINE(1807)		 ::openfl::geom::ColorTransform colorTransform;
HXLINE(1809)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1811)			if (::hx::IsNull( this->_flashBitmap )) {
HXLINE(1813)				return Color;
            			}
HXLINE(1815)			colorTransform = this->_flashBitmap->get_transform()->get_colorTransform();
            		}
            		else {
HXLINE(1819)			colorTransform = this->canvas->get_transform()->get_colorTransform();
            		}
HXLINE(1822)		colorTransform->redMultiplier = (( (Float)(((this->color >> 16) & 255)) ) / ( (Float)(255) ));
HXLINE(1823)		colorTransform->greenMultiplier = (( (Float)(((this->color >> 8) & 255)) ) / ( (Float)(255) ));
HXLINE(1824)		colorTransform->blueMultiplier = (( (Float)((this->color & 255)) ) / ( (Float)(255) ));
HXLINE(1826)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1828)			this->_flashBitmap->get_transform()->set_colorTransform(colorTransform);
            		}
            		else {
HXLINE(1832)			this->canvas->get_transform()->set_colorTransform(colorTransform);
            		}
HXLINE(1835)		return Color;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_color,return )

bool FlxCamera_obj::set_antialiasing(bool Antialiasing){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1839_set_antialiasing)
HXLINE(1840)		this->antialiasing = Antialiasing;
HXLINE(1841)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1843)			this->_flashBitmap->smoothing = Antialiasing;
            		}
HXLINE(1845)		return Antialiasing;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_antialiasing,return )

Float FlxCamera_obj::set_x(Float x){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1849_set_x)
HXLINE(1850)		this->x = x;
HXLINE(1851)		this->updateFlashSpritePosition();
HXLINE(1852)		return x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_x,return )

Float FlxCamera_obj::set_y(Float y){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1856_set_y)
HXLINE(1857)		this->y = y;
HXLINE(1858)		this->updateFlashSpritePosition();
HXLINE(1859)		return y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCamera_obj,set_y,return )

bool FlxCamera_obj::set_visible(bool visible){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1863_set_visible)
HXLINE(1864)		if (::hx::IsNotNull( this->flashSprite )) {
HXLINE(1866)			this->flashSprite->set_visible(visible);
            		}
HXLINE(1868)		return (this->visible = visible);
            	}


void FlxCamera_obj::calcOffsetX(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1872_calcOffsetX)
HXLINE(1873)		this->viewOffsetX = (((((Float)0.5) * ( (Float)(this->width) )) * (this->scaleX - this->initialZoom)) / this->scaleX);
HXLINE(1874)		this->viewOffsetWidth = (( (Float)(this->width) ) - this->viewOffsetX);
HXLINE(1875)		this->viewWidth = (( (Float)(this->width) ) - (( (Float)(2) ) * this->viewOffsetX));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,calcOffsetX,(void))

void FlxCamera_obj::calcOffsetY(){
            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_1879_calcOffsetY)
HXLINE(1880)		this->viewOffsetY = (((((Float)0.5) * ( (Float)(this->height) )) * (this->scaleY - this->initialZoom)) / this->scaleY);
HXLINE(1881)		this->viewOffsetHeight = (( (Float)(this->height) ) - this->viewOffsetY);
HXLINE(1882)		this->viewHeight = (( (Float)(this->height) ) - (( (Float)(2) ) * this->viewOffsetY));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxCamera_obj,calcOffsetY,(void))

Float FlxCamera_obj::defaultZoom;

::Array< ::Dynamic> FlxCamera_obj::defaultCameras;

 ::flixel::graphics::tile::FlxDrawQuadsItem FlxCamera_obj::_storageTilesHead;

 ::flixel::graphics::tile::FlxDrawTrianglesItem FlxCamera_obj::_storageTrianglesHead;

 ::openfl::_Vector::FloatVector FlxCamera_obj::drawVertices;

 ::openfl::display::Sprite FlxCamera_obj::trianglesSprite;

 ::flixel::math::FlxPoint FlxCamera_obj::renderPoint;

 ::flixel::math::FlxRect FlxCamera_obj::renderRect;


::hx::ObjectPtr< FlxCamera_obj > FlxCamera_obj::__new(::hx::Null< int >  __o_X,::hx::Null< int >  __o_Y,::hx::Null< int >  __o_Width,::hx::Null< int >  __o_Height,::hx::Null< Float >  __o_Zoom) {
	::hx::ObjectPtr< FlxCamera_obj > __this = new FlxCamera_obj();
	__this->__construct(__o_X,__o_Y,__o_Width,__o_Height,__o_Zoom);
	return __this;
}

::hx::ObjectPtr< FlxCamera_obj > FlxCamera_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_X,::hx::Null< int >  __o_Y,::hx::Null< int >  __o_Width,::hx::Null< int >  __o_Height,::hx::Null< Float >  __o_Zoom) {
	FlxCamera_obj *__this = (FlxCamera_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxCamera_obj), true, "flixel.FlxCamera"));
	*(void **)__this = FlxCamera_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_Width,__o_Height,__o_Zoom);
	return __this;
}

FlxCamera_obj::FlxCamera_obj()
{
}

void FlxCamera_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxCamera);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(scaleX,"scaleX");
	HX_MARK_MEMBER_NAME(scaleY,"scaleY");
	HX_MARK_MEMBER_NAME(totalScaleX,"totalScaleX");
	HX_MARK_MEMBER_NAME(totalScaleY,"totalScaleY");
	HX_MARK_MEMBER_NAME(style,"style");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(targetOffset,"targetOffset");
	HX_MARK_MEMBER_NAME(followLerp,"followLerp");
	HX_MARK_MEMBER_NAME(deadzone,"deadzone");
	HX_MARK_MEMBER_NAME(minScrollX,"minScrollX");
	HX_MARK_MEMBER_NAME(maxScrollX,"maxScrollX");
	HX_MARK_MEMBER_NAME(minScrollY,"minScrollY");
	HX_MARK_MEMBER_NAME(maxScrollY,"maxScrollY");
	HX_MARK_MEMBER_NAME(scroll,"scroll");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(bgColor,"bgColor");
	HX_MARK_MEMBER_NAME(screen,"screen");
	HX_MARK_MEMBER_NAME(useBgAlphaBlending,"useBgAlphaBlending");
	HX_MARK_MEMBER_NAME(flashSprite,"flashSprite");
	HX_MARK_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(zoom,"zoom");
	HX_MARK_MEMBER_NAME(viewOffsetX,"viewOffsetX");
	HX_MARK_MEMBER_NAME(viewOffsetY,"viewOffsetY");
	HX_MARK_MEMBER_NAME(viewOffsetWidth,"viewOffsetWidth");
	HX_MARK_MEMBER_NAME(viewOffsetHeight,"viewOffsetHeight");
	HX_MARK_MEMBER_NAME(viewWidth,"viewWidth");
	HX_MARK_MEMBER_NAME(viewHeight,"viewHeight");
	HX_MARK_MEMBER_NAME(_blitMatrix,"_blitMatrix");
	HX_MARK_MEMBER_NAME(_useBlitMatrix,"_useBlitMatrix");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(antialiasing,"antialiasing");
	HX_MARK_MEMBER_NAME(followLead,"followLead");
	HX_MARK_MEMBER_NAME(filtersEnabled,"filtersEnabled");
	HX_MARK_MEMBER_NAME(_flashRect,"_flashRect");
	HX_MARK_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_MARK_MEMBER_NAME(_flashOffset,"_flashOffset");
	HX_MARK_MEMBER_NAME(_fxFlashColor,"_fxFlashColor");
	HX_MARK_MEMBER_NAME(_fxFlashDuration,"_fxFlashDuration");
	HX_MARK_MEMBER_NAME(_fxFlashComplete,"_fxFlashComplete");
	HX_MARK_MEMBER_NAME(_fxFlashAlpha,"_fxFlashAlpha");
	HX_MARK_MEMBER_NAME(_fxFadeColor,"_fxFadeColor");
	HX_MARK_MEMBER_NAME(_lastTargetPosition,"_lastTargetPosition");
	HX_MARK_MEMBER_NAME(_scrollTarget,"_scrollTarget");
	HX_MARK_MEMBER_NAME(_fxFadeDuration,"_fxFadeDuration");
	HX_MARK_MEMBER_NAME(_fxFadeIn,"_fxFadeIn");
	HX_MARK_MEMBER_NAME(_fxFadeComplete,"_fxFadeComplete");
	HX_MARK_MEMBER_NAME(_fxFadeCompleted,"_fxFadeCompleted");
	HX_MARK_MEMBER_NAME(_fxFadeAlpha,"_fxFadeAlpha");
	HX_MARK_MEMBER_NAME(_fxShakeIntensity,"_fxShakeIntensity");
	HX_MARK_MEMBER_NAME(_fxShakeDuration,"_fxShakeDuration");
	HX_MARK_MEMBER_NAME(_fxShakeComplete,"_fxShakeComplete");
	HX_MARK_MEMBER_NAME(_fxShakeAxes,"_fxShakeAxes");
	HX_MARK_MEMBER_NAME(_point,"_point");
	HX_MARK_MEMBER_NAME(_filters,"_filters");
	HX_MARK_MEMBER_NAME(initialZoom,"initialZoom");
	HX_MARK_MEMBER_NAME(_fill,"_fill");
	HX_MARK_MEMBER_NAME(_flashBitmap,"_flashBitmap");
	HX_MARK_MEMBER_NAME(_scrollRect,"_scrollRect");
	HX_MARK_MEMBER_NAME(_bounds,"_bounds");
	HX_MARK_MEMBER_NAME(canvas,"canvas");
	HX_MARK_MEMBER_NAME(debugLayer,"debugLayer");
	HX_MARK_MEMBER_NAME(_helperMatrix,"_helperMatrix");
	HX_MARK_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_MARK_MEMBER_NAME(_currentDrawItem,"_currentDrawItem");
	HX_MARK_MEMBER_NAME(_headOfDrawStack,"_headOfDrawStack");
	HX_MARK_MEMBER_NAME(_headTiles,"_headTiles");
	HX_MARK_MEMBER_NAME(_headTriangles,"_headTriangles");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxCamera_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(scaleX,"scaleX");
	HX_VISIT_MEMBER_NAME(scaleY,"scaleY");
	HX_VISIT_MEMBER_NAME(totalScaleX,"totalScaleX");
	HX_VISIT_MEMBER_NAME(totalScaleY,"totalScaleY");
	HX_VISIT_MEMBER_NAME(style,"style");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(targetOffset,"targetOffset");
	HX_VISIT_MEMBER_NAME(followLerp,"followLerp");
	HX_VISIT_MEMBER_NAME(deadzone,"deadzone");
	HX_VISIT_MEMBER_NAME(minScrollX,"minScrollX");
	HX_VISIT_MEMBER_NAME(maxScrollX,"maxScrollX");
	HX_VISIT_MEMBER_NAME(minScrollY,"minScrollY");
	HX_VISIT_MEMBER_NAME(maxScrollY,"maxScrollY");
	HX_VISIT_MEMBER_NAME(scroll,"scroll");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(bgColor,"bgColor");
	HX_VISIT_MEMBER_NAME(screen,"screen");
	HX_VISIT_MEMBER_NAME(useBgAlphaBlending,"useBgAlphaBlending");
	HX_VISIT_MEMBER_NAME(flashSprite,"flashSprite");
	HX_VISIT_MEMBER_NAME(pixelPerfectRender,"pixelPerfectRender");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(zoom,"zoom");
	HX_VISIT_MEMBER_NAME(viewOffsetX,"viewOffsetX");
	HX_VISIT_MEMBER_NAME(viewOffsetY,"viewOffsetY");
	HX_VISIT_MEMBER_NAME(viewOffsetWidth,"viewOffsetWidth");
	HX_VISIT_MEMBER_NAME(viewOffsetHeight,"viewOffsetHeight");
	HX_VISIT_MEMBER_NAME(viewWidth,"viewWidth");
	HX_VISIT_MEMBER_NAME(viewHeight,"viewHeight");
	HX_VISIT_MEMBER_NAME(_blitMatrix,"_blitMatrix");
	HX_VISIT_MEMBER_NAME(_useBlitMatrix,"_useBlitMatrix");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(antialiasing,"antialiasing");
	HX_VISIT_MEMBER_NAME(followLead,"followLead");
	HX_VISIT_MEMBER_NAME(filtersEnabled,"filtersEnabled");
	HX_VISIT_MEMBER_NAME(_flashRect,"_flashRect");
	HX_VISIT_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_VISIT_MEMBER_NAME(_flashOffset,"_flashOffset");
	HX_VISIT_MEMBER_NAME(_fxFlashColor,"_fxFlashColor");
	HX_VISIT_MEMBER_NAME(_fxFlashDuration,"_fxFlashDuration");
	HX_VISIT_MEMBER_NAME(_fxFlashComplete,"_fxFlashComplete");
	HX_VISIT_MEMBER_NAME(_fxFlashAlpha,"_fxFlashAlpha");
	HX_VISIT_MEMBER_NAME(_fxFadeColor,"_fxFadeColor");
	HX_VISIT_MEMBER_NAME(_lastTargetPosition,"_lastTargetPosition");
	HX_VISIT_MEMBER_NAME(_scrollTarget,"_scrollTarget");
	HX_VISIT_MEMBER_NAME(_fxFadeDuration,"_fxFadeDuration");
	HX_VISIT_MEMBER_NAME(_fxFadeIn,"_fxFadeIn");
	HX_VISIT_MEMBER_NAME(_fxFadeComplete,"_fxFadeComplete");
	HX_VISIT_MEMBER_NAME(_fxFadeCompleted,"_fxFadeCompleted");
	HX_VISIT_MEMBER_NAME(_fxFadeAlpha,"_fxFadeAlpha");
	HX_VISIT_MEMBER_NAME(_fxShakeIntensity,"_fxShakeIntensity");
	HX_VISIT_MEMBER_NAME(_fxShakeDuration,"_fxShakeDuration");
	HX_VISIT_MEMBER_NAME(_fxShakeComplete,"_fxShakeComplete");
	HX_VISIT_MEMBER_NAME(_fxShakeAxes,"_fxShakeAxes");
	HX_VISIT_MEMBER_NAME(_point,"_point");
	HX_VISIT_MEMBER_NAME(_filters,"_filters");
	HX_VISIT_MEMBER_NAME(initialZoom,"initialZoom");
	HX_VISIT_MEMBER_NAME(_fill,"_fill");
	HX_VISIT_MEMBER_NAME(_flashBitmap,"_flashBitmap");
	HX_VISIT_MEMBER_NAME(_scrollRect,"_scrollRect");
	HX_VISIT_MEMBER_NAME(_bounds,"_bounds");
	HX_VISIT_MEMBER_NAME(canvas,"canvas");
	HX_VISIT_MEMBER_NAME(debugLayer,"debugLayer");
	HX_VISIT_MEMBER_NAME(_helperMatrix,"_helperMatrix");
	HX_VISIT_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_VISIT_MEMBER_NAME(_currentDrawItem,"_currentDrawItem");
	HX_VISIT_MEMBER_NAME(_headOfDrawStack,"_headOfDrawStack");
	HX_VISIT_MEMBER_NAME(_headTiles,"_headTiles");
	HX_VISIT_MEMBER_NAME(_headTriangles,"_headTriangles");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxCamera_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { return ::hx::Val( zoom ); }
		if (HX_FIELD_EQ(inName,"fade") ) { return ::hx::Val( fade_dyn() ); }
		if (HX_FIELD_EQ(inName,"fill") ) { return ::hx::Val( fill_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { return ::hx::Val( style ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return ::hx::Val( alpha ); }
		if (HX_FIELD_EQ(inName,"angle") ) { return ::hx::Val( angle ); }
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"_fill") ) { return ::hx::Val( _fill ); }
		if (HX_FIELD_EQ(inName,"flash") ) { return ::hx::Val( flash_dyn() ); }
		if (HX_FIELD_EQ(inName,"shake") ) { return ::hx::Val( shake_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return ::hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return ::hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { return ::hx::Val( scaleX ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { return ::hx::Val( scaleY ); }
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return ::hx::Val( scroll ); }
		if (HX_FIELD_EQ(inName,"buffer") ) { return ::hx::Val( buffer ); }
		if (HX_FIELD_EQ(inName,"screen") ) { return ::hx::Val( screen ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"_point") ) { return ::hx::Val( _point ); }
		if (HX_FIELD_EQ(inName,"canvas") ) { return ::hx::Val( canvas ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"follow") ) { return ::hx::Val( follow_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopFX") ) { return ::hx::Val( stopFX_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawFX") ) { return ::hx::Val( drawFX_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgColor") ) { return ::hx::Val( bgColor ); }
		if (HX_FIELD_EQ(inName,"_bounds") ) { return ::hx::Val( _bounds ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"focusOn") ) { return ::hx::Val( focusOn_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSize") ) { return ::hx::Val( setSize_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadzone") ) { return ::hx::Val( deadzone ); }
		if (HX_FIELD_EQ(inName,"_filters") ) { return ::hx::Val( _filters ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return ::hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScale") ) { return ::hx::Val( setScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return ::hx::Val( onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_zoom") ) { return ::hx::Val( set_zoom_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"viewWidth") ) { return ::hx::Val( viewWidth ); }
		if (HX_FIELD_EQ(inName,"_fxFadeIn") ) { return ::hx::Val( _fxFadeIn ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return ::hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return ::hx::Val( set_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return ::hx::Val( set_color_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"followLerp") ) { return ::hx::Val( followLerp ); }
		if (HX_FIELD_EQ(inName,"minScrollX") ) { return ::hx::Val( minScrollX ); }
		if (HX_FIELD_EQ(inName,"maxScrollX") ) { return ::hx::Val( maxScrollX ); }
		if (HX_FIELD_EQ(inName,"minScrollY") ) { return ::hx::Val( minScrollY ); }
		if (HX_FIELD_EQ(inName,"maxScrollY") ) { return ::hx::Val( maxScrollY ); }
		if (HX_FIELD_EQ(inName,"viewHeight") ) { return ::hx::Val( viewHeight ); }
		if (HX_FIELD_EQ(inName,"followLead") ) { return ::hx::Val( followLead ); }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { return ::hx::Val( _flashRect ); }
		if (HX_FIELD_EQ(inName,"debugLayer") ) { return ::hx::Val( debugLayer ); }
		if (HX_FIELD_EQ(inName,"_headTiles") ) { return ::hx::Val( _headTiles ); }
		if (HX_FIELD_EQ(inName,"drawPixels") ) { return ::hx::Val( drawPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return ::hx::Val( copyPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateFade") ) { return ::hx::Val( updateFade_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFilters") ) { return ::hx::Val( setFilters_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalScaleX") ) { return ::hx::Val( totalScaleX ); }
		if (HX_FIELD_EQ(inName,"totalScaleY") ) { return ::hx::Val( totalScaleY ); }
		if (HX_FIELD_EQ(inName,"flashSprite") ) { return ::hx::Val( flashSprite ); }
		if (HX_FIELD_EQ(inName,"viewOffsetX") ) { return ::hx::Val( viewOffsetX ); }
		if (HX_FIELD_EQ(inName,"viewOffsetY") ) { return ::hx::Val( viewOffsetY ); }
		if (HX_FIELD_EQ(inName,"_blitMatrix") ) { return ::hx::Val( _blitMatrix ); }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { return ::hx::Val( _flashPoint ); }
		if (HX_FIELD_EQ(inName,"initialZoom") ) { return ::hx::Val( initialZoom ); }
		if (HX_FIELD_EQ(inName,"_scrollRect") ) { return ::hx::Val( _scrollRect ); }
		if (HX_FIELD_EQ(inName,"updateFlash") ) { return ::hx::Val( updateFlash_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateShake") ) { return ::hx::Val( updateShake_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkResize") ) { return ::hx::Val( checkResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return ::hx::Val( setPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return ::hx::Val( set_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcOffsetX") ) { return ::hx::Val( calcOffsetX_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcOffsetY") ) { return ::hx::Val( calcOffsetY_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"targetOffset") ) { return ::hx::Val( targetOffset ); }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { return ::hx::Val( antialiasing ); }
		if (HX_FIELD_EQ(inName,"_flashOffset") ) { return ::hx::Val( _flashOffset ); }
		if (HX_FIELD_EQ(inName,"_fxFadeColor") ) { return ::hx::Val( _fxFadeColor ); }
		if (HX_FIELD_EQ(inName,"_fxFadeAlpha") ) { return ::hx::Val( _fxFadeAlpha ); }
		if (HX_FIELD_EQ(inName,"_fxShakeAxes") ) { return ::hx::Val( _fxShakeAxes ); }
		if (HX_FIELD_EQ(inName,"_flashBitmap") ) { return ::hx::Val( _flashBitmap ); }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { return ::hx::Val( _helperPoint ); }
		if (HX_FIELD_EQ(inName,"updateScroll") ) { return ::hx::Val( updateScroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateFollow") ) { return ::hx::Val( updateFollow_dyn() ); }
		if (HX_FIELD_EQ(inName,"completeFade") ) { return ::hx::Val( completeFade_dyn() ); }
		if (HX_FIELD_EQ(inName,"snapToTarget") ) { return ::hx::Val( snapToTarget_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_fxFlashColor") ) { return ::hx::Val( _fxFlashColor ); }
		if (HX_FIELD_EQ(inName,"_fxFlashAlpha") ) { return ::hx::Val( _fxFlashAlpha ); }
		if (HX_FIELD_EQ(inName,"_scrollTarget") ) { return ::hx::Val( _scrollTarget ); }
		if (HX_FIELD_EQ(inName,"_helperMatrix") ) { return ::hx::Val( _helperMatrix ); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return ::hx::Val( drawTriangles_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformRect") ) { return ::hx::Val( transformRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return ::hx::Val( containsPoint_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_useBlitMatrix") ) { return ::hx::Val( _useBlitMatrix ); }
		if (HX_FIELD_EQ(inName,"filtersEnabled") ) { return ::hx::Val( filtersEnabled ); }
		if (HX_FIELD_EQ(inName,"_headTriangles") ) { return ::hx::Val( _headTriangles ); }
		if (HX_FIELD_EQ(inName,"startQuadBatch") ) { return ::hx::Val( startQuadBatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearDrawStack") ) { return ::hx::Val( clearDrawStack_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformPoint") ) { return ::hx::Val( transformPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_followLerp") ) { return ::hx::Val( set_followLerp_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"viewOffsetWidth") ) { return ::hx::Val( viewOffsetWidth ); }
		if (HX_FIELD_EQ(inName,"_fxFadeDuration") ) { return ::hx::Val( _fxFadeDuration ); }
		if (HX_FIELD_EQ(inName,"_fxFadeComplete") ) { return ::hx::Val( _fxFadeComplete ); }
		if (HX_FIELD_EQ(inName,"transformVector") ) { return ::hx::Val( transformVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformObject") ) { return ::hx::Val( transformObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScrollBounds") ) { return ::hx::Val( setScrollBounds_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"viewOffsetHeight") ) { return ::hx::Val( viewOffsetHeight ); }
		if (HX_FIELD_EQ(inName,"_fxFlashDuration") ) { return ::hx::Val( _fxFlashDuration ); }
		if (HX_FIELD_EQ(inName,"_fxFlashComplete") ) { return ::hx::Val( _fxFlashComplete ); }
		if (HX_FIELD_EQ(inName,"_fxFadeCompleted") ) { return ::hx::Val( _fxFadeCompleted ); }
		if (HX_FIELD_EQ(inName,"_fxShakeDuration") ) { return ::hx::Val( _fxShakeDuration ); }
		if (HX_FIELD_EQ(inName,"_fxShakeComplete") ) { return ::hx::Val( _fxShakeComplete ); }
		if (HX_FIELD_EQ(inName,"_currentDrawItem") ) { return ::hx::Val( _currentDrawItem ); }
		if (HX_FIELD_EQ(inName,"_headOfDrawStack") ) { return ::hx::Val( _headOfDrawStack ); }
		if (HX_FIELD_EQ(inName,"updateScrollRect") ) { return ::hx::Val( updateScrollRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBlitMatrix") ) { return ::hx::Val( updateBlitMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antialiasing") ) { return ::hx::Val( set_antialiasing_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_fxShakeIntensity") ) { return ::hx::Val( _fxShakeIntensity ); }
		if (HX_FIELD_EQ(inName,"updateFlashOffset") ) { return ::hx::Val( updateFlashOffset_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"useBgAlphaBlending") ) { return ::hx::Val( useBgAlphaBlending ); }
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { return ::hx::Val( pixelPerfectRender ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastTargetPosition") ) { return ::hx::Val( _lastTargetPosition ); }
		if (HX_FIELD_EQ(inName,"startTrianglesBatch") ) { return ::hx::Val( startTrianglesBatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScrollBoundsRect") ) { return ::hx::Val( setScrollBoundsRect_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getNewDrawTrianglesItem") ) { return ::hx::Val( getNewDrawTrianglesItem_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"updateFlashSpritePosition") ) { return ::hx::Val( updateFlashSpritePosition_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"updateInternalSpritePositions") ) { return ::hx::Val( updateInternalSpritePositions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxCamera_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"renderRect") ) { outValue = ( renderRect ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultZoom") ) { outValue = ( defaultZoom ); return true; }
		if (HX_FIELD_EQ(inName,"renderPoint") ) { outValue = ( renderPoint ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"drawVertices") ) { outValue = ( drawVertices ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCameras") ) { outValue = ( defaultCameras ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"trianglesSprite") ) { outValue = ( trianglesSprite ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_storageTilesHead") ) { outValue = ( _storageTilesHead ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_storageTrianglesHead") ) { outValue = ( _storageTrianglesHead ); return true; }
	}
	return false;
}

::hx::Val FlxCamera_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_x(inValue.Cast< Float >()) );x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_y(inValue.Cast< Float >()) );y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_zoom(inValue.Cast< Float >()) );zoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { style=inValue.Cast<  ::flixel::FlxCameraFollowStyle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_width(inValue.Cast< int >()) );width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_alpha(inValue.Cast< Float >()) );alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_angle(inValue.Cast< Float >()) );angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_color(inValue.Cast< int >()) );color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fill") ) { _fill=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleY") ) { scaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scroll") ) { scroll=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"screen") ) { screen=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_height(inValue.Cast< int >()) );height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_point") ) { _point=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canvas") ) { canvas=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgColor") ) { bgColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bounds") ) { _bounds=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadzone") ) { deadzone=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_filters") ) { _filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"viewWidth") ) { viewWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeIn") ) { _fxFadeIn=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"followLerp") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_followLerp(inValue.Cast< Float >()) );followLerp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minScrollX") ) { minScrollX=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollX") ) { maxScrollX=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minScrollY") ) { minScrollY=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollY") ) { maxScrollY=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"viewHeight") ) { viewHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"followLead") ) { followLead=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { _flashRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugLayer") ) { debugLayer=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headTiles") ) { _headTiles=inValue.Cast<  ::flixel::graphics::tile::FlxDrawQuadsItem >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalScaleX") ) { totalScaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalScaleY") ) { totalScaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flashSprite") ) { flashSprite=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"viewOffsetX") ) { viewOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"viewOffsetY") ) { viewOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_blitMatrix") ) { _blitMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { _flashPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"initialZoom") ) { initialZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollRect") ) { _scrollRect=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"targetOffset") ) { targetOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_antialiasing(inValue.Cast< bool >()) );antialiasing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashOffset") ) { _flashOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeColor") ) { _fxFadeColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeAlpha") ) { _fxFadeAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeAxes") ) { _fxShakeAxes=inValue.Cast<  ::flixel::util::FlxAxes >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashBitmap") ) { _flashBitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { _helperPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_fxFlashColor") ) { _fxFlashColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFlashAlpha") ) { _fxFlashAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollTarget") ) { _scrollTarget=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helperMatrix") ) { _helperMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_useBlitMatrix") ) { _useBlitMatrix=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filtersEnabled") ) { filtersEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headTriangles") ) { _headTriangles=inValue.Cast<  ::flixel::graphics::tile::FlxDrawTrianglesItem >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"viewOffsetWidth") ) { viewOffsetWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeDuration") ) { _fxFadeDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeComplete") ) { _fxFadeComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"viewOffsetHeight") ) { viewOffsetHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFlashDuration") ) { _fxFlashDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFlashComplete") ) { _fxFlashComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxFadeCompleted") ) { _fxFadeCompleted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeDuration") ) { _fxShakeDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fxShakeComplete") ) { _fxShakeComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_currentDrawItem") ) { _currentDrawItem=inValue.Cast<  ::flixel::graphics::tile::FlxDrawBaseItem >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headOfDrawStack") ) { _headOfDrawStack=inValue.Cast<  ::flixel::graphics::tile::FlxDrawBaseItem >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_fxShakeIntensity") ) { _fxShakeIntensity=inValue.Cast< Float >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"useBgAlphaBlending") ) { useBgAlphaBlending=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixelPerfectRender") ) { pixelPerfectRender=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastTargetPosition") ) { _lastTargetPosition=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxCamera_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"renderRect") ) { renderRect=ioValue.Cast<  ::flixel::math::FlxRect >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultZoom") ) { defaultZoom=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"renderPoint") ) { renderPoint=ioValue.Cast<  ::flixel::math::FlxPoint >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"drawVertices") ) { drawVertices=ioValue.Cast<  ::openfl::_Vector::FloatVector >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCameras") ) { defaultCameras=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"trianglesSprite") ) { trianglesSprite=ioValue.Cast<  ::openfl::display::Sprite >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_storageTilesHead") ) { _storageTilesHead=ioValue.Cast<  ::flixel::graphics::tile::FlxDrawQuadsItem >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_storageTrianglesHead") ) { _storageTrianglesHead=ioValue.Cast<  ::flixel::graphics::tile::FlxDrawTrianglesItem >(); return true; }
	}
	return false;
}

void FlxCamera_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("scaleX",8e,ea,25,3c));
	outFields->push(HX_("scaleY",8f,ea,25,3c));
	outFields->push(HX_("totalScaleX",72,dd,5b,02));
	outFields->push(HX_("totalScaleY",73,dd,5b,02));
	outFields->push(HX_("style",31,a5,1d,84));
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("targetOffset",c4,d1,c3,1c));
	outFields->push(HX_("followLerp",88,dc,83,d9));
	outFields->push(HX_("deadzone",d0,12,55,6d));
	outFields->push(HX_("minScrollX",39,80,8f,f6));
	outFields->push(HX_("maxScrollX",67,ad,fc,9a));
	outFields->push(HX_("minScrollY",3a,80,8f,f6));
	outFields->push(HX_("maxScrollY",68,ad,fc,9a));
	outFields->push(HX_("scroll",0d,d8,64,47));
	outFields->push(HX_("buffer",00,bd,94,d0));
	outFields->push(HX_("bgColor",5e,81,83,f7));
	outFields->push(HX_("screen",6c,3b,5d,47));
	outFields->push(HX_("useBgAlphaBlending",23,25,12,b2));
	outFields->push(HX_("flashSprite",d5,e9,0d,f4));
	outFields->push(HX_("pixelPerfectRender",dd,59,4f,2f));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("zoom",13,a3,f8,50));
	outFields->push(HX_("viewOffsetX",80,45,78,b9));
	outFields->push(HX_("viewOffsetY",81,45,78,b9));
	outFields->push(HX_("viewOffsetWidth",0e,1f,16,e1));
	outFields->push(HX_("viewOffsetHeight",df,85,94,c8));
	outFields->push(HX_("viewWidth",61,25,f7,0a));
	outFields->push(HX_("viewHeight",2c,08,99,43));
	outFields->push(HX_("_blitMatrix",75,45,ab,aa));
	outFields->push(HX_("_useBlitMatrix",be,57,dc,4e));
	outFields->push(HX_("alpha",5e,a7,96,21));
	outFields->push(HX_("angle",d3,43,e2,22));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("antialiasing",f4,16,b3,48));
	outFields->push(HX_("followLead",ad,cd,83,d9));
	outFields->push(HX_("filtersEnabled",06,08,9b,18));
	outFields->push(HX_("_flashRect",b5,c2,f3,5d));
	outFields->push(HX_("_flashPoint",9f,1d,2a,b7));
	outFields->push(HX_("_flashOffset",64,53,c1,f6));
	outFields->push(HX_("_fxFlashColor",64,98,14,dc));
	outFields->push(HX_("_fxFlashDuration",f3,7e,d1,2d));
	outFields->push(HX_("_fxFlashAlpha",5f,ce,4e,b3));
	outFields->push(HX_("_fxFadeColor",96,44,a8,b9));
	outFields->push(HX_("_lastTargetPosition",2f,d6,08,c4));
	outFields->push(HX_("_scrollTarget",1d,da,1d,c1));
	outFields->push(HX_("_fxFadeDuration",01,fe,dd,9f));
	outFields->push(HX_("_fxFadeIn",d2,da,fe,a8));
	outFields->push(HX_("_fxFadeCompleted",3e,8a,d9,a9));
	outFields->push(HX_("_fxFadeAlpha",91,7a,e2,90));
	outFields->push(HX_("_fxShakeIntensity",5e,86,94,7a));
	outFields->push(HX_("_fxShakeDuration",09,2e,72,36));
	outFields->push(HX_("_fxShakeAxes",5a,79,f0,5e));
	outFields->push(HX_("_point",91,fb,76,c2));
	outFields->push(HX_("_filters",3c,fb,fe,42));
	outFields->push(HX_("initialZoom",b7,71,1d,2d));
	outFields->push(HX_("_fill",62,ea,cc,f6));
	outFields->push(HX_("_flashBitmap",c0,cb,8d,87));
	outFields->push(HX_("_scrollRect",f0,a8,f0,db));
	outFields->push(HX_("_bounds",14,98,94,d4));
	outFields->push(HX_("canvas",d8,54,42,b8));
	outFields->push(HX_("debugLayer",7e,52,a4,6e));
	outFields->push(HX_("_helperMatrix",2e,81,ce,de));
	outFields->push(HX_("_helperPoint",03,e6,14,f8));
	outFields->push(HX_("_currentDrawItem",11,6b,5a,19));
	outFields->push(HX_("_headOfDrawStack",ce,c5,68,ac));
	outFields->push(HX_("_headTiles",06,ac,50,ff));
	outFields->push(HX_("_headTriangles",ac,b3,7c,97));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxCamera_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,scaleX),HX_("scaleX",8e,ea,25,3c)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,scaleY),HX_("scaleY",8f,ea,25,3c)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,totalScaleX),HX_("totalScaleX",72,dd,5b,02)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,totalScaleY),HX_("totalScaleY",73,dd,5b,02)},
	{::hx::fsObject /*  ::flixel::FlxCameraFollowStyle */ ,(int)offsetof(FlxCamera_obj,style),HX_("style",31,a5,1d,84)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(FlxCamera_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxCamera_obj,targetOffset),HX_("targetOffset",c4,d1,c3,1c)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,followLerp),HX_("followLerp",88,dc,83,d9)},
	{::hx::fsObject /*  ::flixel::math::FlxRect */ ,(int)offsetof(FlxCamera_obj,deadzone),HX_("deadzone",d0,12,55,6d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,minScrollX),HX_("minScrollX",39,80,8f,f6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,maxScrollX),HX_("maxScrollX",67,ad,fc,9a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,minScrollY),HX_("minScrollY",3a,80,8f,f6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,maxScrollY),HX_("maxScrollY",68,ad,fc,9a)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxCamera_obj,scroll),HX_("scroll",0d,d8,64,47)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxCamera_obj,buffer),HX_("buffer",00,bd,94,d0)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,bgColor),HX_("bgColor",5e,81,83,f7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxCamera_obj,screen),HX_("screen",6c,3b,5d,47)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,useBgAlphaBlending),HX_("useBgAlphaBlending",23,25,12,b2)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(FlxCamera_obj,flashSprite),HX_("flashSprite",d5,e9,0d,f4)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,pixelPerfectRender),HX_("pixelPerfectRender",dd,59,4f,2f)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,zoom),HX_("zoom",13,a3,f8,50)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,viewOffsetX),HX_("viewOffsetX",80,45,78,b9)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,viewOffsetY),HX_("viewOffsetY",81,45,78,b9)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,viewOffsetWidth),HX_("viewOffsetWidth",0e,1f,16,e1)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,viewOffsetHeight),HX_("viewOffsetHeight",df,85,94,c8)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,viewWidth),HX_("viewWidth",61,25,f7,0a)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,viewHeight),HX_("viewHeight",2c,08,99,43)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(FlxCamera_obj,_blitMatrix),HX_("_blitMatrix",75,45,ab,aa)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,_useBlitMatrix),HX_("_useBlitMatrix",be,57,dc,4e)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,alpha),HX_("alpha",5e,a7,96,21)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,angle),HX_("angle",d3,43,e2,22)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,color),HX_("color",63,71,5c,4a)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,antialiasing),HX_("antialiasing",f4,16,b3,48)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxCamera_obj,followLead),HX_("followLead",ad,cd,83,d9)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,filtersEnabled),HX_("filtersEnabled",06,08,9b,18)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(FlxCamera_obj,_flashRect),HX_("_flashRect",b5,c2,f3,5d)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(FlxCamera_obj,_flashPoint),HX_("_flashPoint",9f,1d,2a,b7)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxCamera_obj,_flashOffset),HX_("_flashOffset",64,53,c1,f6)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,_fxFlashColor),HX_("_fxFlashColor",64,98,14,dc)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFlashDuration),HX_("_fxFlashDuration",f3,7e,d1,2d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,_fxFlashComplete),HX_("_fxFlashComplete",58,70,0b,99)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFlashAlpha),HX_("_fxFlashAlpha",5f,ce,4e,b3)},
	{::hx::fsInt,(int)offsetof(FlxCamera_obj,_fxFadeColor),HX_("_fxFadeColor",96,44,a8,b9)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxCamera_obj,_lastTargetPosition),HX_("_lastTargetPosition",2f,d6,08,c4)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxCamera_obj,_scrollTarget),HX_("_scrollTarget",1d,da,1d,c1)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFadeDuration),HX_("_fxFadeDuration",01,fe,dd,9f)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,_fxFadeIn),HX_("_fxFadeIn",d2,da,fe,a8)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,_fxFadeComplete),HX_("_fxFadeComplete",66,ef,17,0b)},
	{::hx::fsBool,(int)offsetof(FlxCamera_obj,_fxFadeCompleted),HX_("_fxFadeCompleted",3e,8a,d9,a9)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxFadeAlpha),HX_("_fxFadeAlpha",91,7a,e2,90)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxShakeIntensity),HX_("_fxShakeIntensity",5e,86,94,7a)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,_fxShakeDuration),HX_("_fxShakeDuration",09,2e,72,36)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxCamera_obj,_fxShakeComplete),HX_("_fxShakeComplete",6e,1f,ac,a1)},
	{::hx::fsObject /*  ::flixel::util::FlxAxes */ ,(int)offsetof(FlxCamera_obj,_fxShakeAxes),HX_("_fxShakeAxes",5a,79,f0,5e)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxCamera_obj,_point),HX_("_point",91,fb,76,c2)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxCamera_obj,_filters),HX_("_filters",3c,fb,fe,42)},
	{::hx::fsFloat,(int)offsetof(FlxCamera_obj,initialZoom),HX_("initialZoom",b7,71,1d,2d)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxCamera_obj,_fill),HX_("_fill",62,ea,cc,f6)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(FlxCamera_obj,_flashBitmap),HX_("_flashBitmap",c0,cb,8d,87)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(FlxCamera_obj,_scrollRect),HX_("_scrollRect",f0,a8,f0,db)},
	{::hx::fsObject /*  ::flixel::math::FlxRect */ ,(int)offsetof(FlxCamera_obj,_bounds),HX_("_bounds",14,98,94,d4)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(FlxCamera_obj,canvas),HX_("canvas",d8,54,42,b8)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(FlxCamera_obj,debugLayer),HX_("debugLayer",7e,52,a4,6e)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(FlxCamera_obj,_helperMatrix),HX_("_helperMatrix",2e,81,ce,de)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(FlxCamera_obj,_helperPoint),HX_("_helperPoint",03,e6,14,f8)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxDrawBaseItem */ ,(int)offsetof(FlxCamera_obj,_currentDrawItem),HX_("_currentDrawItem",11,6b,5a,19)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxDrawBaseItem */ ,(int)offsetof(FlxCamera_obj,_headOfDrawStack),HX_("_headOfDrawStack",ce,c5,68,ac)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxDrawQuadsItem */ ,(int)offsetof(FlxCamera_obj,_headTiles),HX_("_headTiles",06,ac,50,ff)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxDrawTrianglesItem */ ,(int)offsetof(FlxCamera_obj,_headTriangles),HX_("_headTriangles",ac,b3,7c,97)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxCamera_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &FlxCamera_obj::defaultZoom,HX_("defaultZoom",74,9c,b7,22)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &FlxCamera_obj::defaultCameras,HX_("defaultCameras",6d,e3,71,12)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxDrawQuadsItem */ ,(void *) &FlxCamera_obj::_storageTilesHead,HX_("_storageTilesHead",e9,a8,61,af)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxDrawTrianglesItem */ ,(void *) &FlxCamera_obj::_storageTrianglesHead,HX_("_storageTrianglesHead",0f,09,78,17)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(void *) &FlxCamera_obj::drawVertices,HX_("drawVertices",1d,4c,09,40)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(void *) &FlxCamera_obj::trianglesSprite,HX_("trianglesSprite",10,d3,45,ab)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(void *) &FlxCamera_obj::renderPoint,HX_("renderPoint",1a,e1,40,92)},
	{::hx::fsObject /*  ::flixel::math::FlxRect */ ,(void *) &FlxCamera_obj::renderRect,HX_("renderRect",9a,47,b1,e8)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxCamera_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("scaleX",8e,ea,25,3c),
	HX_("scaleY",8f,ea,25,3c),
	HX_("totalScaleX",72,dd,5b,02),
	HX_("totalScaleY",73,dd,5b,02),
	HX_("style",31,a5,1d,84),
	HX_("target",51,f3,ec,86),
	HX_("targetOffset",c4,d1,c3,1c),
	HX_("followLerp",88,dc,83,d9),
	HX_("deadzone",d0,12,55,6d),
	HX_("minScrollX",39,80,8f,f6),
	HX_("maxScrollX",67,ad,fc,9a),
	HX_("minScrollY",3a,80,8f,f6),
	HX_("maxScrollY",68,ad,fc,9a),
	HX_("scroll",0d,d8,64,47),
	HX_("buffer",00,bd,94,d0),
	HX_("bgColor",5e,81,83,f7),
	HX_("screen",6c,3b,5d,47),
	HX_("useBgAlphaBlending",23,25,12,b2),
	HX_("flashSprite",d5,e9,0d,f4),
	HX_("pixelPerfectRender",dd,59,4f,2f),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("zoom",13,a3,f8,50),
	HX_("viewOffsetX",80,45,78,b9),
	HX_("viewOffsetY",81,45,78,b9),
	HX_("viewOffsetWidth",0e,1f,16,e1),
	HX_("viewOffsetHeight",df,85,94,c8),
	HX_("viewWidth",61,25,f7,0a),
	HX_("viewHeight",2c,08,99,43),
	HX_("_blitMatrix",75,45,ab,aa),
	HX_("_useBlitMatrix",be,57,dc,4e),
	HX_("alpha",5e,a7,96,21),
	HX_("angle",d3,43,e2,22),
	HX_("color",63,71,5c,4a),
	HX_("antialiasing",f4,16,b3,48),
	HX_("followLead",ad,cd,83,d9),
	HX_("filtersEnabled",06,08,9b,18),
	HX_("_flashRect",b5,c2,f3,5d),
	HX_("_flashPoint",9f,1d,2a,b7),
	HX_("_flashOffset",64,53,c1,f6),
	HX_("_fxFlashColor",64,98,14,dc),
	HX_("_fxFlashDuration",f3,7e,d1,2d),
	HX_("_fxFlashComplete",58,70,0b,99),
	HX_("_fxFlashAlpha",5f,ce,4e,b3),
	HX_("_fxFadeColor",96,44,a8,b9),
	HX_("_lastTargetPosition",2f,d6,08,c4),
	HX_("_scrollTarget",1d,da,1d,c1),
	HX_("_fxFadeDuration",01,fe,dd,9f),
	HX_("_fxFadeIn",d2,da,fe,a8),
	HX_("_fxFadeComplete",66,ef,17,0b),
	HX_("_fxFadeCompleted",3e,8a,d9,a9),
	HX_("_fxFadeAlpha",91,7a,e2,90),
	HX_("_fxShakeIntensity",5e,86,94,7a),
	HX_("_fxShakeDuration",09,2e,72,36),
	HX_("_fxShakeComplete",6e,1f,ac,a1),
	HX_("_fxShakeAxes",5a,79,f0,5e),
	HX_("_point",91,fb,76,c2),
	HX_("_filters",3c,fb,fe,42),
	HX_("initialZoom",b7,71,1d,2d),
	HX_("_fill",62,ea,cc,f6),
	HX_("_flashBitmap",c0,cb,8d,87),
	HX_("_scrollRect",f0,a8,f0,db),
	HX_("_bounds",14,98,94,d4),
	HX_("canvas",d8,54,42,b8),
	HX_("debugLayer",7e,52,a4,6e),
	HX_("_helperMatrix",2e,81,ce,de),
	HX_("_helperPoint",03,e6,14,f8),
	HX_("_currentDrawItem",11,6b,5a,19),
	HX_("_headOfDrawStack",ce,c5,68,ac),
	HX_("_headTiles",06,ac,50,ff),
	HX_("_headTriangles",ac,b3,7c,97),
	HX_("startQuadBatch",b1,bc,12,5e),
	HX_("startTrianglesBatch",11,0b,b7,6e),
	HX_("getNewDrawTrianglesItem",f0,c3,0a,12),
	HX_("clearDrawStack",57,f1,1b,0a),
	HX_("render",56,6b,29,05),
	HX_("drawPixels",51,6a,6d,ce),
	HX_("copyPixels",c2,54,6e,42),
	HX_("drawTriangles",07,44,68,de),
	HX_("transformRect",b0,cc,f4,78),
	HX_("transformPoint",44,cf,11,3d),
	HX_("transformVector",4f,2b,b3,d2),
	HX_("transformObject",4b,f9,94,50),
	HX_("destroy",fa,2c,86,24),
	HX_("update",09,86,05,87),
	HX_("updateScroll",f6,7e,28,47),
	HX_("updateFollow",5a,38,5a,f9),
	HX_("updateFlash",e7,9e,24,e8),
	HX_("updateFade",25,a0,6a,fc),
	HX_("completeFade",d5,32,78,b7),
	HX_("updateShake",fd,47,b5,61),
	HX_("updateFlashSpritePosition",15,1f,55,df),
	HX_("updateFlashOffset",da,51,21,f5),
	HX_("updateScrollRect",3a,ab,52,53),
	HX_("updateInternalSpritePositions",1f,1f,f9,76),
	HX_("follow",71,91,96,f9),
	HX_("snapToTarget",96,07,43,96),
	HX_("focusOn",17,4b,83,41),
	HX_("flash",b0,35,8c,02),
	HX_("fade",7c,b5,b5,43),
	HX_("shake",c6,de,1c,7c),
	HX_("stopFX",d4,b1,39,0f),
	HX_("setFilters",39,c6,25,5c),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("fill",83,ce,bb,43),
	HX_("drawFX",56,72,d6,df),
	HX_("checkResize",dc,2c,8d,ea),
	HX_("updateBlitMatrix",bf,47,0d,22),
	HX_("setSize",83,e1,d7,11),
	HX_("setPosition",6b,6a,5b,fb),
	HX_("setScrollBoundsRect",68,88,5d,8e),
	HX_("setScrollBounds",24,ad,95,dc),
	HX_("setScale",88,37,03,87),
	HX_("onResize",73,50,28,e8),
	HX_("containsPoint",b1,b9,eb,92),
	HX_("set_followLerp",45,4d,99,6f),
	HX_("set_width",69,fe,5c,f1),
	HX_("set_height",24,16,51,f6),
	HX_("set_zoom",10,b8,10,7f),
	HX_("set_alpha",c1,ef,90,48),
	HX_("set_angle",36,8c,dc,49),
	HX_("set_color",c6,b9,56,71),
	HX_("set_antialiasing",f1,f0,93,a3),
	HX_("set_x",5b,9b,2f,7a),
	HX_("set_y",5c,9b,2f,7a),
	HX_("set_visible",95,df,8b,33),
	HX_("calcOffsetX",50,85,4b,73),
	HX_("calcOffsetY",51,85,4b,73),
	::String(null()) };

static void FlxCamera_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxCamera_obj::defaultZoom,"defaultZoom");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::defaultCameras,"defaultCameras");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::_storageTilesHead,"_storageTilesHead");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::_storageTrianglesHead,"_storageTrianglesHead");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::drawVertices,"drawVertices");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::trianglesSprite,"trianglesSprite");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::renderPoint,"renderPoint");
	HX_MARK_MEMBER_NAME(FlxCamera_obj::renderRect,"renderRect");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxCamera_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::defaultZoom,"defaultZoom");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::defaultCameras,"defaultCameras");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::_storageTilesHead,"_storageTilesHead");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::_storageTrianglesHead,"_storageTrianglesHead");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::drawVertices,"drawVertices");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::trianglesSprite,"trianglesSprite");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::renderPoint,"renderPoint");
	HX_VISIT_MEMBER_NAME(FlxCamera_obj::renderRect,"renderRect");
};

#endif

::hx::Class FlxCamera_obj::__mClass;

static ::String FlxCamera_obj_sStaticFields[] = {
	HX_("defaultZoom",74,9c,b7,22),
	HX_("defaultCameras",6d,e3,71,12),
	HX_("_storageTilesHead",e9,a8,61,af),
	HX_("_storageTrianglesHead",0f,09,78,17),
	HX_("drawVertices",1d,4c,09,40),
	HX_("trianglesSprite",10,d3,45,ab),
	HX_("renderPoint",1a,e1,40,92),
	HX_("renderRect",9a,47,b1,e8),
	::String(null())
};

void FlxCamera_obj::__register()
{
	FlxCamera_obj _hx_dummy;
	FlxCamera_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.FlxCamera",05,18,e2,d7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxCamera_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxCamera_obj::__SetStatic;
	__mClass->mMarkFunc = FlxCamera_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxCamera_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxCamera_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxCamera_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxCamera_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxCamera_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxCamera_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxCamera_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::_Vector::FloatVector _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_491_boot)
HXDLIN( 491)			int length = null();
HXDLIN( 491)			bool fixed = null();
HXDLIN( 491)			::Array< Float > array = null();
HXDLIN( 491)			return  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,array,true);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_491_boot)
HXDLIN( 491)		drawVertices = ( ( ::openfl::_Vector::FloatVector)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d1aae230bd422321_496_boot)
HXDLIN( 496)		trianglesSprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::flixel::math::FlxPoint _hx_run(){
            			HX_STACKFRAME(&_hx_pos_d1aae230bd422321_502_boot)
HXDLIN( 502)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 502)			point->_inPool = false;
HXDLIN( 502)			return point;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_502_boot)
HXDLIN( 502)		renderPoint = ( ( ::flixel::math::FlxPoint)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::flixel::math::FlxRect _hx_run(){
            			HX_STACKFRAME(&_hx_pos_d1aae230bd422321_504_boot)
HXDLIN( 504)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 504)			_this->x = ( (Float)(0) );
HXDLIN( 504)			_this->y = ( (Float)(0) );
HXDLIN( 504)			_this->width = ( (Float)(0) );
HXDLIN( 504)			_this->height = ( (Float)(0) );
HXDLIN( 504)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 504)			rect->_inPool = false;
HXDLIN( 504)			return rect;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d1aae230bd422321_504_boot)
HXDLIN( 504)		renderRect = ( ( ::flixel::math::FlxRect)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

} // end namespace flixel
