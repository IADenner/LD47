// Generated by Haxe 4.1.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DShape
#include <openfl/_internal/renderer/context3D/Context3DShape.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d11618aadd936e00_116_new,"openfl.display.DisplayObjectContainer","new",0x4362e03c,"openfl.display.DisplayObjectContainer.new","openfl/display/DisplayObjectContainer.hx",116,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_158_addChild,"openfl.display.DisplayObjectContainer","addChild",0x5694c25f,"openfl.display.DisplayObjectContainer.addChild","openfl/display/DisplayObjectContainer.hx",158,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_193_addChildAt,"openfl.display.DisplayObjectContainer","addChildAt",0xb7119132,"openfl.display.DisplayObjectContainer.addChildAt","openfl/display/DisplayObjectContainer.hx",193,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_303_areInaccessibleObjectsUnderPoint,"openfl.display.DisplayObjectContainer","areInaccessibleObjectsUnderPoint",0x2380e0e1,"openfl.display.DisplayObjectContainer.areInaccessibleObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",303,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_319_contains,"openfl.display.DisplayObjectContainer","contains",0xc3f94cc3,"openfl.display.DisplayObjectContainer.contains","openfl/display/DisplayObjectContainer.hx",319,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_342_getChildAt,"openfl.display.DisplayObjectContainer","getChildAt",0x9ee8eb5d,"openfl.display.DisplayObjectContainer.getChildAt","openfl/display/DisplayObjectContainer.hx",342,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_370_getChildByName,"openfl.display.DisplayObjectContainer","getChildByName",0x64b33f2c,"openfl.display.DisplayObjectContainer.getChildByName","openfl/display/DisplayObjectContainer.hx",370,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_388_getChildIndex,"openfl.display.DisplayObjectContainer","getChildIndex",0xcc3e62e8,"openfl.display.DisplayObjectContainer.getChildIndex","openfl/display/DisplayObjectContainer.hx",388,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_417_getObjectsUnderPoint,"openfl.display.DisplayObjectContainer","getObjectsUnderPoint",0x85c6693a,"openfl.display.DisplayObjectContainer.getObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",417,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_444_removeChild,"openfl.display.DisplayObjectContainer","removeChild",0x1a99d294,"openfl.display.DisplayObjectContainer.removeChild","openfl/display/DisplayObjectContainer.hx",444,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_499_removeChildAt,"openfl.display.DisplayObjectContainer","removeChildAt",0x52a2d8a7,"openfl.display.DisplayObjectContainer.removeChildAt","openfl/display/DisplayObjectContainer.hx",499,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_520_removeChildren,"openfl.display.DisplayObjectContainer","removeChildren",0xfbffdb47,"openfl.display.DisplayObjectContainer.removeChildren","openfl/display/DisplayObjectContainer.hx",520,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_549_resolve,"openfl.display.DisplayObjectContainer","resolve",0x8cca40c8,"openfl.display.DisplayObjectContainer.resolve","openfl/display/DisplayObjectContainer.hx",549,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_601_setChildIndex,"openfl.display.DisplayObjectContainer","setChildIndex",0x114444f4,"openfl.display.DisplayObjectContainer.setChildIndex","openfl/display/DisplayObjectContainer.hx",601,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_619_stopAllMovieClips,"openfl.display.DisplayObjectContainer","stopAllMovieClips",0x46e0f9ce,"openfl.display.DisplayObjectContainer.stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",619,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_634_swapChildren,"openfl.display.DisplayObjectContainer","swapChildren",0xe0695f96,"openfl.display.DisplayObjectContainer.swapChildren","openfl/display/DisplayObjectContainer.hx",634,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_656_swapChildrenAt,"openfl.display.DisplayObjectContainer","swapChildrenAt",0xd5312a29,"openfl.display.DisplayObjectContainer.swapChildrenAt","openfl/display/DisplayObjectContainer.hx",656,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_665___cleanup,"openfl.display.DisplayObjectContainer","__cleanup",0x2346b9e0,"openfl.display.DisplayObjectContainer.__cleanup","openfl/display/DisplayObjectContainer.hx",665,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_677___cleanupRemovedChildren,"openfl.display.DisplayObjectContainer","__cleanupRemovedChildren",0x4395feff,"openfl.display.DisplayObjectContainer.__cleanupRemovedChildren","openfl/display/DisplayObjectContainer.hx",677,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_691___dispatchChildren,"openfl.display.DisplayObjectContainer","__dispatchChildren",0x7a91a8dd,"openfl.display.DisplayObjectContainer.__dispatchChildren","openfl/display/DisplayObjectContainer.hx",691,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_709___enterFrame,"openfl.display.DisplayObjectContainer","__enterFrame",0x3af993b9,"openfl.display.DisplayObjectContainer.__enterFrame","openfl/display/DisplayObjectContainer.hx",709,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_716___getBounds,"openfl.display.DisplayObjectContainer","__getBounds",0xe74ca467,"openfl.display.DisplayObjectContainer.__getBounds","openfl/display/DisplayObjectContainer.hx",716,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_736___getFilterBounds,"openfl.display.DisplayObjectContainer","__getFilterBounds",0xbea2d3bf,"openfl.display.DisplayObjectContainer.__getFilterBounds","openfl/display/DisplayObjectContainer.hx",736,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_757___getRenderBounds,"openfl.display.DisplayObjectContainer","__getRenderBounds",0x21a0a9dd,"openfl.display.DisplayObjectContainer.__getRenderBounds","openfl/display/DisplayObjectContainer.hx",757,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_786___hitTest,"openfl.display.DisplayObjectContainer","__hitTest",0x5a840e01,"openfl.display.DisplayObjectContainer.__hitTest","openfl/display/DisplayObjectContainer.hx",786,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_875___hitTestMask,"openfl.display.DisplayObjectContainer","__hitTestMask",0x4f390f8d,"openfl.display.DisplayObjectContainer.__hitTestMask","openfl/display/DisplayObjectContainer.hx",875,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_890___readGraphicsData,"openfl.display.DisplayObjectContainer","__readGraphicsData",0x782e37cf,"openfl.display.DisplayObjectContainer.__readGraphicsData","openfl/display/DisplayObjectContainer.hx",890,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_903___renderCairo,"openfl.display.DisplayObjectContainer","__renderCairo",0x687e990e,"openfl.display.DisplayObjectContainer.__renderCairo","openfl/display/DisplayObjectContainer.hx",903,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_938___renderCairoMask,"openfl.display.DisplayObjectContainer","__renderCairoMask",0x110aa51a,"openfl.display.DisplayObjectContainer.__renderCairoMask","openfl/display/DisplayObjectContainer.hx",938,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_955___renderCanvas,"openfl.display.DisplayObjectContainer","__renderCanvas",0x09986192,"openfl.display.DisplayObjectContainer.__renderCanvas","openfl/display/DisplayObjectContainer.hx",955,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_990___renderCanvasMask,"openfl.display.DisplayObjectContainer","__renderCanvasMask",0xd78cff9e,"openfl.display.DisplayObjectContainer.__renderCanvasMask","openfl/display/DisplayObjectContainer.hx",990,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1005___renderDOM,"openfl.display.DisplayObjectContainer","__renderDOM",0xd2304188,"openfl.display.DisplayObjectContainer.__renderDOM","openfl/display/DisplayObjectContainer.hx",1005,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1044___renderDOMClear,"openfl.display.DisplayObjectContainer","__renderDOMClear",0xae5612e5,"openfl.display.DisplayObjectContainer.__renderDOMClear","openfl/display/DisplayObjectContainer.hx",1044,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1062___renderGL,"openfl.display.DisplayObjectContainer","__renderGL",0x3eef01bf,"openfl.display.DisplayObjectContainer.__renderGL","openfl/display/DisplayObjectContainer.hx",1062,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1103___renderGLMask,"openfl.display.DisplayObjectContainer","__renderGLMask",0x75bbba4b,"openfl.display.DisplayObjectContainer.__renderGLMask","openfl/display/DisplayObjectContainer.hx",1103,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1119___setStageReference,"openfl.display.DisplayObjectContainer","__setStageReference",0x58cb6d2b,"openfl.display.DisplayObjectContainer.__setStageReference","openfl/display/DisplayObjectContainer.hx",1119,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1133___setWorldTransformInvalid,"openfl.display.DisplayObjectContainer","__setWorldTransformInvalid",0xa8fd351f,"openfl.display.DisplayObjectContainer.__setWorldTransformInvalid","openfl/display/DisplayObjectContainer.hx",1133,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1148___shouldCacheHardware,"openfl.display.DisplayObjectContainer","__shouldCacheHardware",0xd831e693,"openfl.display.DisplayObjectContainer.__shouldCacheHardware","openfl/display/DisplayObjectContainer.hx",1148,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1167___stopAllMovieClips,"openfl.display.DisplayObjectContainer","__stopAllMovieClips",0xb7ce11ae,"openfl.display.DisplayObjectContainer.__stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",1167,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1174___tabTest,"openfl.display.DisplayObjectContainer","__tabTest",0xbd744b03,"openfl.display.DisplayObjectContainer.__tabTest","openfl/display/DisplayObjectContainer.hx",1174,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1195___update,"openfl.display.DisplayObjectContainer","__update",0xc6b2e3cd,"openfl.display.DisplayObjectContainer.__update","openfl/display/DisplayObjectContainer.hx",1195,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1210_get_numChildren,"openfl.display.DisplayObjectContainer","get_numChildren",0x73b78b18,"openfl.display.DisplayObjectContainer.get_numChildren","openfl/display/DisplayObjectContainer.hx",1210,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1215_get_tabChildren,"openfl.display.DisplayObjectContainer","get_tabChildren",0x62bd2e27,"openfl.display.DisplayObjectContainer.get_tabChildren","openfl/display/DisplayObjectContainer.hx",1215,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_1219_set_tabChildren,"openfl.display.DisplayObjectContainer","set_tabChildren",0x5e88ab33,"openfl.display.DisplayObjectContainer.set_tabChildren","openfl/display/DisplayObjectContainer.hx",1219,0x5f4d3d72)
namespace openfl{
namespace display{

void DisplayObjectContainer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_116_new)
HXLINE( 117)		super::__construct();
HXLINE( 119)		this->mouseChildren = true;
HXLINE( 120)		this->_hx___tabChildren = true;
HXLINE( 122)		this->_hx___children = ::Array_obj< ::Dynamic>::__new();
HXLINE( 123)		int length = null();
HXDLIN( 123)		bool fixed = null();
HXDLIN( 123)		::Array< ::Dynamic> array = null();
HXDLIN( 123)		this->_hx___removedChildren =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,array,true);
            	}

Dynamic DisplayObjectContainer_obj::__CreateEmpty() { return new DisplayObjectContainer_obj; }

void *DisplayObjectContainer_obj::_hx_vtable = 0;

Dynamic DisplayObjectContainer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DisplayObjectContainer_obj > _hx_result = new DisplayObjectContainer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayObjectContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x0330636f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
	}
}

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_158_addChild)
HXDLIN( 158)		return this->addChildAt(child,this->get_numChildren());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,addChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChildAt( ::openfl::display::DisplayObject child,int index){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_193_addChildAt)
HXLINE( 194)		if (::hx::IsNull( child )) {
HXLINE( 196)			 ::openfl::errors::TypeError error =  ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,HX_("Error #2007: Parameter child must be non-null.",30,5a,a7,aa));
HXLINE( 197)			error->errorID = 2007;
HXLINE( 198)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(error));
            		}
            		else {
HXLINE( 201)			if (::hx::IsEq( child->stage,child )) {
HXLINE( 203)				 ::openfl::errors::ArgumentError error =  ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Error #3783: A Stage object cannot be added as the child of another object.",fa,51,93,42));
HXLINE( 204)				error->errorID = 3783;
HXLINE( 205)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(error));
            			}
            		}
HXLINE( 209)		bool _hx_tmp;
HXDLIN( 209)		if ((index <= this->_hx___children->length)) {
HXLINE( 209)			_hx_tmp = (index < 0);
            		}
            		else {
HXLINE( 209)			_hx_tmp = true;
            		}
HXDLIN( 209)		if (_hx_tmp) {
HXLINE( 211)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Invalid index position ",80,59,50,86) + index)));
            		}
HXLINE( 214)		if (::hx::IsEq( child->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 216)			if (::hx::IsNotEq( this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE( 218)				this->_hx___children->remove(child);
HXLINE( 219)				this->_hx___children->insert(index,child);
HXLINE( 221)				if (!(this->_hx___renderDirty)) {
HXLINE( 221)					this->_hx___renderDirty = true;
HXDLIN( 221)					this->_hx___setParentRenderDirty();
            				}
            			}
            		}
            		else {
HXLINE( 226)			if (::hx::IsNotNull( child->parent )) {
HXLINE( 228)				child->parent->removeChild(child);
            			}
HXLINE( 231)			this->_hx___children->insert(index,child);
HXLINE( 232)			child->parent = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 234)			bool addedToStage;
HXDLIN( 234)			if (::hx::IsNotNull( this->stage )) {
HXLINE( 234)				addedToStage = ::hx::IsNull( child->stage );
            			}
            			else {
HXLINE( 234)				addedToStage = false;
            			}
HXLINE( 236)			if (addedToStage) {
HXLINE( 238)				this->_hx___setStageReference(this->stage);
            			}
HXLINE( 241)			child->_hx___setTransformDirty();
HXLINE( 242)			if (!(child->_hx___renderDirty)) {
HXLINE( 242)				child->_hx___renderDirty = true;
HXDLIN( 242)				child->_hx___setParentRenderDirty();
            			}
HXLINE( 243)			if (!(this->_hx___renderDirty)) {
HXLINE( 243)				this->_hx___renderDirty = true;
HXDLIN( 243)				this->_hx___setParentRenderDirty();
            			}
HXLINE( 246)			 ::openfl::events::Event event = ::openfl::events::Event_obj::_hx___pool->get().StaticCast<  ::openfl::events::Event >();
HXLINE( 247)			event->type = HX_("added",c0,d4,43,1c);
HXLINE( 251)			event->bubbles = true;
HXLINE( 253)			event->target = child;
HXLINE( 255)			child->_hx___dispatchWithCapture(event);
HXLINE( 258)			::openfl::events::Event_obj::_hx___pool->release(event);
HXLINE( 261)			if (addedToStage) {
HXLINE( 266)				event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("addedToStage",63,22,55,0c),false,false);
HXLINE( 269)				child->_hx___dispatchWithCapture(event);
HXLINE( 270)				child->_hx___dispatchChildren(event);
            			}
            		}
HXLINE( 278)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,addChildAt,return )

bool DisplayObjectContainer_obj::areInaccessibleObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_303_areInaccessibleObjectsUnderPoint)
HXDLIN( 303)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,areInaccessibleObjectsUnderPoint,return )

bool DisplayObjectContainer_obj::contains( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_319_contains)
HXLINE( 320)		while(true){
HXLINE( 320)			bool _hx_tmp;
HXDLIN( 320)			if (::hx::IsNotEq( child,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 320)				_hx_tmp = ::hx::IsNotNull( child );
            			}
            			else {
HXLINE( 320)				_hx_tmp = false;
            			}
HXDLIN( 320)			if (!(_hx_tmp)) {
HXLINE( 320)				goto _hx_goto_4;
            			}
HXLINE( 322)			child = child->parent;
            		}
            		_hx_goto_4:;
HXLINE( 325)		return ::hx::IsEq( child,::hx::ObjectPtr<OBJ_>(this) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,contains,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_342_getChildAt)
HXLINE( 343)		bool _hx_tmp;
HXDLIN( 343)		if ((index >= 0)) {
HXLINE( 343)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 343)			_hx_tmp = false;
            		}
HXDLIN( 343)		if (_hx_tmp) {
HXLINE( 345)			return this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >();
            		}
HXLINE( 348)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildAt,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildByName(::String name){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_370_getChildByName)
HXLINE( 371)		{
HXLINE( 371)			int _g = 0;
HXDLIN( 371)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 371)			while((_g < _g1->length)){
HXLINE( 371)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 371)				_g = (_g + 1);
HXLINE( 373)				if ((child->get_name() == name)) {
HXLINE( 373)					return child;
            				}
            			}
            		}
HXLINE( 376)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildByName,return )

int DisplayObjectContainer_obj::getChildIndex( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_388_getChildIndex)
HXLINE( 389)		{
HXLINE( 389)			int _g = 0;
HXDLIN( 389)			int _g1 = this->_hx___children->length;
HXDLIN( 389)			while((_g < _g1)){
HXLINE( 389)				_g = (_g + 1);
HXDLIN( 389)				int i = (_g - 1);
HXLINE( 391)				if (::hx::IsEq( this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE( 391)					return i;
            				}
            			}
            		}
HXLINE( 394)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildIndex,return )

::Array< ::Dynamic> DisplayObjectContainer_obj::getObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_417_getObjectsUnderPoint)
HXLINE( 418)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 419)		this->_hx___hitTest(point->x,point->y,false,stack,false,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 420)		stack->reverse();
HXLINE( 421)		return stack;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getObjectsUnderPoint,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_444_removeChild)
HXLINE( 445)		bool _hx_tmp;
HXDLIN( 445)		if (::hx::IsNotNull( child )) {
HXLINE( 445)			_hx_tmp = ::hx::IsEq( child->parent,::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 445)			_hx_tmp = false;
            		}
HXDLIN( 445)		if (_hx_tmp) {
HXLINE( 447)			child->_hx___setTransformDirty();
HXLINE( 448)			if (!(child->_hx___renderDirty)) {
HXLINE( 448)				child->_hx___renderDirty = true;
HXDLIN( 448)				child->_hx___setParentRenderDirty();
            			}
HXLINE( 449)			if (!(this->_hx___renderDirty)) {
HXLINE( 449)				this->_hx___renderDirty = true;
HXDLIN( 449)				this->_hx___setParentRenderDirty();
            			}
HXLINE( 451)			 ::openfl::events::Event event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removed",a0,1f,00,f3),true,null());
HXLINE( 452)			child->_hx___dispatchWithCapture(event);
HXLINE( 454)			if (::hx::IsNotNull( this->stage )) {
HXLINE( 456)				bool _hx_tmp;
HXDLIN( 456)				if (::hx::IsNotNull( child->stage )) {
HXLINE( 456)					_hx_tmp = ::hx::IsEq( this->stage->get_focus(),child );
            				}
            				else {
HXLINE( 456)					_hx_tmp = false;
            				}
HXDLIN( 456)				if (_hx_tmp) {
HXLINE( 458)					this->stage->set_focus(null());
            				}
HXLINE( 461)				 ::openfl::events::Event event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removedFromStage",34,21,76,ba),false,false);
HXLINE( 462)				child->_hx___dispatchWithCapture(event);
HXLINE( 463)				child->_hx___dispatchChildren(event);
HXLINE( 464)				child->_hx___setStageReference(null());
            			}
HXLINE( 467)			child->parent = null();
HXLINE( 468)			this->_hx___children->remove(child);
HXLINE( 469)			this->_hx___removedChildren->push(child);
HXLINE( 470)			child->_hx___setTransformDirty();
            		}
HXLINE( 473)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_499_removeChildAt)
HXLINE( 500)		bool _hx_tmp;
HXDLIN( 500)		if ((index >= 0)) {
HXLINE( 500)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 500)			_hx_tmp = false;
            		}
HXDLIN( 500)		if (_hx_tmp) {
HXLINE( 502)			return this->removeChild(this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >());
            		}
HXLINE( 505)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChildAt,return )

void DisplayObjectContainer_obj::removeChildren(::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(0);
            		int endIndex = __o_endIndex.Default(2147483647);
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_520_removeChildren)
HXLINE( 521)		if ((endIndex == (int)2147483647)) {
HXLINE( 523)			endIndex = (this->_hx___children->length - 1);
HXLINE( 525)			if ((endIndex < 0)) {
HXLINE( 527)				return;
            			}
            		}
HXLINE( 531)		if ((beginIndex > (this->_hx___children->length - 1))) {
HXLINE( 533)			return;
            		}
            		else {
HXLINE( 535)			bool _hx_tmp;
HXDLIN( 535)			bool _hx_tmp1;
HXDLIN( 535)			if ((endIndex >= beginIndex)) {
HXLINE( 535)				_hx_tmp1 = (beginIndex < 0);
            			}
            			else {
HXLINE( 535)				_hx_tmp1 = true;
            			}
HXDLIN( 535)			if (!(_hx_tmp1)) {
HXLINE( 535)				_hx_tmp = (endIndex > this->_hx___children->length);
            			}
            			else {
HXLINE( 535)				_hx_tmp = true;
            			}
HXDLIN( 535)			if (_hx_tmp) {
HXLINE( 537)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds.",17,96,1b,51))));
            			}
            		}
HXLINE( 540)		int numRemovals = (endIndex - beginIndex);
HXLINE( 541)		while((numRemovals >= 0)){
HXLINE( 543)			this->removeChildAt(beginIndex);
HXLINE( 544)			numRemovals = (numRemovals - 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,removeChildren,(void))

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::resolve(::String fieldName){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_549_resolve)
HXLINE( 550)		if (::hx::IsNull( this->_hx___children )) {
HXLINE( 550)			return null();
            		}
HXLINE( 552)		{
HXLINE( 552)			int _g = 0;
HXDLIN( 552)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 552)			while((_g < _g1->length)){
HXLINE( 552)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 552)				_g = (_g + 1);
HXLINE( 554)				if ((child->get_name() == fieldName)) {
HXLINE( 556)					return child;
            				}
            			}
            		}
HXLINE( 560)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,resolve,return )

void DisplayObjectContainer_obj::setChildIndex( ::openfl::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_601_setChildIndex)
HXDLIN( 601)		bool _hx_tmp;
HXDLIN( 601)		bool _hx_tmp1;
HXDLIN( 601)		if ((index >= 0)) {
HXDLIN( 601)			_hx_tmp1 = (index <= this->_hx___children->length);
            		}
            		else {
HXDLIN( 601)			_hx_tmp1 = false;
            		}
HXDLIN( 601)		if (_hx_tmp1) {
HXDLIN( 601)			_hx_tmp = ::hx::IsEq( child->parent,::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 601)			_hx_tmp = false;
            		}
HXDLIN( 601)		if (_hx_tmp) {
HXLINE( 603)			this->_hx___children->remove(child);
HXLINE( 604)			this->_hx___children->insert(index,child);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,setChildIndex,(void))

void DisplayObjectContainer_obj::stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_619_stopAllMovieClips)
HXDLIN( 619)		this->_hx___stopAllMovieClips();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,stopAllMovieClips,(void))

void DisplayObjectContainer_obj::swapChildren( ::openfl::display::DisplayObject child1, ::openfl::display::DisplayObject child2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_634_swapChildren)
HXDLIN( 634)		bool _hx_tmp;
HXDLIN( 634)		if (::hx::IsEq( child1->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXDLIN( 634)			_hx_tmp = ::hx::IsEq( child2->parent,::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 634)			_hx_tmp = false;
            		}
HXDLIN( 634)		if (_hx_tmp) {
HXLINE( 636)			int index1 = this->_hx___children->indexOf(child1,null());
HXLINE( 637)			int index2 = this->_hx___children->indexOf(child2,null());
HXLINE( 639)			this->_hx___children[index1] = child2;
HXLINE( 640)			this->_hx___children[index2] = child1;
HXLINE( 642)			if (!(this->_hx___renderDirty)) {
HXLINE( 642)				this->_hx___renderDirty = true;
HXDLIN( 642)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildren,(void))

void DisplayObjectContainer_obj::swapChildrenAt(int index1,int index2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_656_swapChildrenAt)
HXLINE( 657)		 ::openfl::display::DisplayObject swap = this->_hx___children->__get(index1).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 658)		this->_hx___children[index1] = this->_hx___children->__get(index2).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 659)		this->_hx___children[index2] = swap;
HXLINE( 660)		swap = null();
HXLINE( 661)		if (!(this->_hx___renderDirty)) {
HXLINE( 661)			this->_hx___renderDirty = true;
HXDLIN( 661)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildrenAt,(void))

void DisplayObjectContainer_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_665___cleanup)
HXLINE( 666)		this->super::_hx___cleanup();
HXLINE( 668)		{
HXLINE( 668)			int _g = 0;
HXDLIN( 668)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 668)			while((_g < _g1->length)){
HXLINE( 668)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 668)				_g = (_g + 1);
HXLINE( 670)				child->_hx___cleanup();
            			}
            		}
HXLINE( 673)		{
HXLINE( 673)			{
HXLINE( 673)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 673)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 673)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 673)					if (::hx::IsNull( orphan1->stage )) {
HXLINE( 673)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 673)			this->_hx___removedChildren->set_length(0);
            		}
            	}


void DisplayObjectContainer_obj::_hx___cleanupRemovedChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_677___cleanupRemovedChildren)
HXLINE( 678)		{
HXLINE( 678)			 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 678)			while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 678)				 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 680)				if (::hx::IsNull( orphan1->stage )) {
HXLINE( 682)					orphan1->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 686)		this->_hx___removedChildren->set_length(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,_hx___cleanupRemovedChildren,(void))

void DisplayObjectContainer_obj::_hx___dispatchChildren( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_691___dispatchChildren)
HXDLIN( 691)		if (::hx::IsNotNull( this->_hx___children )) {
HXLINE( 693)			int _g = 0;
HXDLIN( 693)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 693)			while((_g < _g1->length)){
HXLINE( 693)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 693)				_g = (_g + 1);
HXLINE( 695)				event->target = child;
HXLINE( 697)				if (!(child->_hx___dispatchWithCapture(event))) {
HXLINE( 699)					goto _hx_goto_27;
            				}
HXLINE( 702)				child->_hx___dispatchChildren(event);
            			}
            			_hx_goto_27:;
            		}
            	}


void DisplayObjectContainer_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_709___enterFrame)
HXDLIN( 709)		int _g = 0;
HXDLIN( 709)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 709)		while((_g < _g1->length)){
HXDLIN( 709)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 709)			_g = (_g + 1);
HXLINE( 711)			child->_hx___enterFrame(deltaTime);
            		}
            	}


void DisplayObjectContainer_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_716___getBounds)
HXLINE( 717)		this->super::_hx___getBounds(rect,matrix);
HXLINE( 719)		if ((this->_hx___children->length == 0)) {
HXLINE( 719)			return;
            		}
HXLINE( 721)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 723)		{
HXLINE( 723)			int _g = 0;
HXDLIN( 723)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 723)			while((_g < _g1->length)){
HXLINE( 723)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 723)				_g = (_g + 1);
HXLINE( 725)				bool _hx_tmp;
HXDLIN( 725)				if ((child->_hx___scaleX != 0)) {
HXLINE( 725)					_hx_tmp = (child->_hx___scaleY == 0);
            				}
            				else {
HXLINE( 725)					_hx_tmp = true;
            				}
HXDLIN( 725)				if (_hx_tmp) {
HXLINE( 725)					continue;
            				}
HXLINE( 727)				{
HXLINE( 727)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 727)					childWorldTransform->a = ((local->a * matrix->a) + (local->b * matrix->c));
HXDLIN( 727)					childWorldTransform->b = ((local->a * matrix->b) + (local->b * matrix->d));
HXDLIN( 727)					childWorldTransform->c = ((local->c * matrix->a) + (local->d * matrix->c));
HXDLIN( 727)					childWorldTransform->d = ((local->c * matrix->b) + (local->d * matrix->d));
HXDLIN( 727)					childWorldTransform->tx = (((local->tx * matrix->a) + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 727)					childWorldTransform->ty = (((local->tx * matrix->b) + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 729)				child->_hx___getBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 732)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


void DisplayObjectContainer_obj::_hx___getFilterBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_736___getFilterBounds)
HXLINE( 737)		this->super::_hx___getFilterBounds(rect,matrix);
HXLINE( 738)		if (::hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 738)			return;
            		}
HXLINE( 740)		if ((this->_hx___children->length == 0)) {
HXLINE( 740)			return;
            		}
HXLINE( 742)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 744)		{
HXLINE( 744)			int _g = 0;
HXDLIN( 744)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 744)			while((_g < _g1->length)){
HXLINE( 744)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 744)				_g = (_g + 1);
HXLINE( 746)				bool _hx_tmp;
HXDLIN( 746)				bool _hx_tmp1;
HXDLIN( 746)				if ((child->_hx___scaleX != 0)) {
HXLINE( 746)					_hx_tmp1 = (child->_hx___scaleY == 0);
            				}
            				else {
HXLINE( 746)					_hx_tmp1 = true;
            				}
HXDLIN( 746)				if (!(_hx_tmp1)) {
HXLINE( 746)					_hx_tmp = child->_hx___isMask;
            				}
            				else {
HXLINE( 746)					_hx_tmp = true;
            				}
HXDLIN( 746)				if (_hx_tmp) {
HXLINE( 746)					continue;
            				}
HXLINE( 748)				{
HXLINE( 748)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 748)					childWorldTransform->a = ((local->a * matrix->a) + (local->b * matrix->c));
HXDLIN( 748)					childWorldTransform->b = ((local->a * matrix->b) + (local->b * matrix->d));
HXDLIN( 748)					childWorldTransform->c = ((local->c * matrix->a) + (local->d * matrix->c));
HXDLIN( 748)					childWorldTransform->d = ((local->c * matrix->b) + (local->d * matrix->d));
HXDLIN( 748)					childWorldTransform->tx = (((local->tx * matrix->a) + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 748)					childWorldTransform->ty = (((local->tx * matrix->b) + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 750)				child->_hx___getFilterBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 753)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


void DisplayObjectContainer_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_757___getRenderBounds)
HXLINE( 758)		if (::hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 760)			this->super::_hx___getRenderBounds(rect,matrix);
HXLINE( 761)			return;
            		}
            		else {
HXLINE( 765)			this->super::_hx___getBounds(rect,matrix);
            		}
HXLINE( 768)		if ((this->_hx___children->length == 0)) {
HXLINE( 768)			return;
            		}
HXLINE( 770)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 772)		{
HXLINE( 772)			int _g = 0;
HXDLIN( 772)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 772)			while((_g < _g1->length)){
HXLINE( 772)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 772)				_g = (_g + 1);
HXLINE( 774)				bool _hx_tmp;
HXDLIN( 774)				bool _hx_tmp1;
HXDLIN( 774)				if ((child->_hx___scaleX != 0)) {
HXLINE( 774)					_hx_tmp1 = (child->_hx___scaleY == 0);
            				}
            				else {
HXLINE( 774)					_hx_tmp1 = true;
            				}
HXDLIN( 774)				if (!(_hx_tmp1)) {
HXLINE( 774)					_hx_tmp = child->_hx___isMask;
            				}
            				else {
HXLINE( 774)					_hx_tmp = true;
            				}
HXDLIN( 774)				if (_hx_tmp) {
HXLINE( 774)					continue;
            				}
HXLINE( 776)				{
HXLINE( 776)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 776)					childWorldTransform->a = ((local->a * matrix->a) + (local->b * matrix->c));
HXDLIN( 776)					childWorldTransform->b = ((local->a * matrix->b) + (local->b * matrix->d));
HXDLIN( 776)					childWorldTransform->c = ((local->c * matrix->a) + (local->d * matrix->c));
HXDLIN( 776)					childWorldTransform->d = ((local->c * matrix->b) + (local->d * matrix->d));
HXDLIN( 776)					childWorldTransform->tx = (((local->tx * matrix->a) + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 776)					childWorldTransform->ty = (((local->tx * matrix->b) + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 778)				child->_hx___getRenderBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 781)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


bool DisplayObjectContainer_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_786___hitTest)
HXLINE( 787)		bool _hx_tmp;
HXDLIN( 787)		bool _hx_tmp1;
HXDLIN( 787)		if (hitObject->get_visible()) {
HXLINE( 787)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE( 787)			_hx_tmp1 = true;
            		}
HXDLIN( 787)		if (!(_hx_tmp1)) {
HXLINE( 787)			bool _hx_tmp1;
HXDLIN( 787)			if (interactiveOnly) {
HXLINE( 787)				_hx_tmp1 = !(this->mouseEnabled);
            			}
            			else {
HXLINE( 787)				_hx_tmp1 = false;
            			}
HXDLIN( 787)			if (_hx_tmp1) {
HXLINE( 787)				_hx_tmp = !(this->mouseChildren);
            			}
            			else {
HXLINE( 787)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 787)			_hx_tmp = true;
            		}
HXDLIN( 787)		if (_hx_tmp) {
HXLINE( 787)			return false;
            		}
HXLINE( 788)		bool _hx_tmp2;
HXDLIN( 788)		if (::hx::IsNotNull( this->get_mask() )) {
HXLINE( 788)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 788)			_hx_tmp2 = false;
            		}
HXDLIN( 788)		if (_hx_tmp2) {
HXLINE( 788)			return false;
            		}
HXLINE( 790)		if (::hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 792)			 ::openfl::geom::Point point = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE( 793)			point->setTo(x,y);
HXLINE( 794)			{
HXLINE( 794)				 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN( 794)				Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 794)				if ((norm == 0)) {
HXLINE( 794)					point->x = -(_this->tx);
HXDLIN( 794)					point->y = -(_this->ty);
            				}
            				else {
HXLINE( 794)					Float px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - point->y)) + (_this->d * (point->x - _this->tx))));
HXDLIN( 794)					point->y = ((((Float)1.0) / norm) * ((_this->a * (point->y - _this->ty)) + (_this->b * (_this->tx - point->x))));
HXDLIN( 794)					point->x = px;
            				}
            			}
HXLINE( 796)			if (!(this->_hx___scrollRect->containsPoint(point))) {
HXLINE( 798)				::openfl::geom::Point_obj::_hx___pool->release(point);
HXLINE( 799)				return false;
            			}
HXLINE( 802)			::openfl::geom::Point_obj::_hx___pool->release(point);
            		}
HXLINE( 805)		int i = this->_hx___children->length;
HXLINE( 806)		if (interactiveOnly) {
HXLINE( 808)			bool _hx_tmp;
HXDLIN( 808)			if (::hx::IsNotNull( stack )) {
HXLINE( 808)				_hx_tmp = !(this->mouseChildren);
            			}
            			else {
HXLINE( 808)				_hx_tmp = true;
            			}
HXDLIN( 808)			if (_hx_tmp) {
HXLINE( 810)				while(true){
HXLINE( 810)					i = (i - 1);
HXDLIN( 810)					if (!((i >= 0))) {
HXLINE( 810)						goto _hx_goto_37;
            					}
HXLINE( 812)					if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,null(),true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 814)						if (::hx::IsNotNull( stack )) {
HXLINE( 816)							stack->push(hitObject);
            						}
HXLINE( 819)						return true;
            					}
            				}
            				_hx_goto_37:;
            			}
            			else {
HXLINE( 823)				if (::hx::IsNotNull( stack )) {
HXLINE( 825)					int length = stack->length;
HXLINE( 827)					bool interactive = false;
HXLINE( 828)					bool hitTest = false;
HXLINE( 830)					while(true){
HXLINE( 830)						i = (i - 1);
HXDLIN( 830)						if (!((i >= 0))) {
HXLINE( 830)							goto _hx_goto_38;
            						}
HXLINE( 832)						interactive = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___getInteractive(null());
HXLINE( 834)						bool _hx_tmp;
HXDLIN( 834)						if (!(interactive)) {
HXLINE( 834)							if (this->mouseEnabled) {
HXLINE( 834)								_hx_tmp = !(hitTest);
            							}
            							else {
HXLINE( 834)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 834)							_hx_tmp = true;
            						}
HXDLIN( 834)						if (_hx_tmp) {
HXLINE( 836)							if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 838)								hitTest = true;
HXLINE( 840)								bool _hx_tmp;
HXDLIN( 840)								if (interactive) {
HXLINE( 840)									_hx_tmp = (stack->length > length);
            								}
            								else {
HXLINE( 840)									_hx_tmp = false;
            								}
HXDLIN( 840)								if (_hx_tmp) {
HXLINE( 842)									goto _hx_goto_38;
            								}
            							}
            						}
            					}
            					_hx_goto_38:;
HXLINE( 848)					if (hitTest) {
HXLINE( 850)						stack->insert(length,hitObject);
HXLINE( 851)						return true;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 857)			bool hitTest = false;
HXLINE( 859)			while(true){
HXLINE( 859)				i = (i - 1);
HXDLIN( 859)				if (!((i >= 0))) {
HXLINE( 859)					goto _hx_goto_39;
            				}
HXLINE( 861)				if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,false,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 863)					hitTest = true;
HXLINE( 864)					if (::hx::IsNull( stack )) {
HXLINE( 864)						goto _hx_goto_39;
            					}
            				}
            			}
            			_hx_goto_39:;
HXLINE( 868)			return hitTest;
            		}
HXLINE( 871)		return false;
            	}


bool DisplayObjectContainer_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_875___hitTestMask)
HXLINE( 876)		int i = this->_hx___children->length;
HXLINE( 878)		while(true){
HXLINE( 878)			i = (i - 1);
HXDLIN( 878)			if (!((i >= 0))) {
HXLINE( 878)				goto _hx_goto_41;
            			}
HXLINE( 880)			if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTestMask(x,y)) {
HXLINE( 882)				return true;
            			}
            		}
            		_hx_goto_41:;
HXLINE( 886)		return false;
            	}


void DisplayObjectContainer_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData,bool recurse){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_890___readGraphicsData)
HXLINE( 891)		this->super::_hx___readGraphicsData(graphicsData,recurse);
HXLINE( 893)		if (recurse) {
HXLINE( 895)			int _g = 0;
HXDLIN( 895)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 895)			while((_g < _g1->length)){
HXLINE( 895)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 895)				_g = (_g + 1);
HXLINE( 897)				child->_hx___readGraphicsData(graphicsData,recurse);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_903___renderCairo)
HXLINE( 905)		{
HXLINE( 905)			{
HXLINE( 905)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 905)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 905)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 905)					if (::hx::IsNull( orphan1->stage )) {
HXLINE( 905)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 905)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE( 907)		bool _hx_tmp;
HXDLIN( 907)		if (this->_hx___renderable) {
HXLINE( 907)			_hx_tmp = (this->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE( 907)			_hx_tmp = true;
            		}
HXDLIN( 907)		if (_hx_tmp) {
HXLINE( 907)			return;
            		}
HXLINE( 909)		this->super::_hx___renderCairo(renderer);
HXLINE( 911)		bool _hx_tmp1;
HXDLIN( 911)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 911)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 911)			_hx_tmp1 = false;
            		}
HXDLIN( 911)		if (_hx_tmp1) {
HXLINE( 911)			return;
            		}
HXLINE( 913)		renderer->_hx___pushMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 915)		if (::hx::IsNotNull( renderer->_hx___stage )) {
HXLINE( 917)			{
HXLINE( 917)				int _g = 0;
HXDLIN( 917)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 917)				while((_g < _g1->length)){
HXLINE( 917)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 917)					_g = (_g + 1);
HXLINE( 919)					child->_hx___renderCairo(renderer);
HXLINE( 920)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE( 923)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE( 927)			int _g = 0;
HXDLIN( 927)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 927)			while((_g < _g1->length)){
HXLINE( 927)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 927)				_g = (_g + 1);
HXLINE( 929)				child->_hx___renderCairo(renderer);
            			}
            		}
HXLINE( 933)		renderer->_hx___popMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCairoMask( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_938___renderCairoMask)
HXLINE( 940)		{
HXLINE( 940)			{
HXLINE( 940)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 940)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 940)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 940)					if (::hx::IsNull( orphan1->stage )) {
HXLINE( 940)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 940)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE( 942)		if (::hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 944)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(this->_hx___graphics,renderer);
            		}
HXLINE( 947)		{
HXLINE( 947)			int _g = 0;
HXDLIN( 947)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 947)			while((_g < _g1->length)){
HXLINE( 947)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 947)				_g = (_g + 1);
HXLINE( 949)				child->_hx___renderCairoMask(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_955___renderCanvas)
HXLINE( 956)		{
HXLINE( 956)			{
HXLINE( 956)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 956)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 956)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 956)					if (::hx::IsNull( orphan1->stage )) {
HXLINE( 956)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 956)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE( 958)		bool _hx_tmp;
HXDLIN( 958)		bool _hx_tmp1;
HXDLIN( 958)		if (this->_hx___renderable) {
HXLINE( 958)			_hx_tmp1 = (this->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE( 958)			_hx_tmp1 = true;
            		}
HXDLIN( 958)		if (!(_hx_tmp1)) {
HXLINE( 958)			if (::hx::IsNotNull( this->get_mask() )) {
HXLINE( 958)				if (!((this->get_mask()->get_width() <= 0))) {
HXLINE( 958)					_hx_tmp = (this->get_mask()->get_height() <= 0);
            				}
            				else {
HXLINE( 958)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 958)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 958)			_hx_tmp = true;
            		}
HXDLIN( 958)		if (_hx_tmp) {
HXLINE( 958)			return;
            		}
HXLINE( 961)		this->super::_hx___renderCanvas(renderer);
HXLINE( 963)		bool _hx_tmp2;
HXDLIN( 963)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 963)			_hx_tmp2 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 963)			_hx_tmp2 = false;
            		}
HXDLIN( 963)		if (_hx_tmp2) {
HXLINE( 963)			return;
            		}
HXLINE( 965)		renderer->_hx___pushMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 967)		if (::hx::IsNotNull( renderer->_hx___stage )) {
HXLINE( 969)			{
HXLINE( 969)				int _g = 0;
HXDLIN( 969)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 969)				while((_g < _g1->length)){
HXLINE( 969)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 969)					_g = (_g + 1);
HXLINE( 971)					child->_hx___renderCanvas(renderer);
HXLINE( 972)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE( 975)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE( 979)			int _g = 0;
HXDLIN( 979)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 979)			while((_g < _g1->length)){
HXLINE( 979)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 979)				_g = (_g + 1);
HXLINE( 981)				child->_hx___renderCanvas(renderer);
            			}
            		}
HXLINE( 985)		renderer->_hx___popMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderCanvasMask( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_990___renderCanvasMask)
HXLINE( 991)		{
HXLINE( 991)			{
HXLINE( 991)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 991)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 991)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 991)					if (::hx::IsNull( orphan1->stage )) {
HXLINE( 991)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 991)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE( 993)		if (::hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 995)			::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(this->_hx___graphics,renderer);
            		}
HXLINE( 998)		{
HXLINE( 998)			int _g = 0;
HXDLIN( 998)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 998)			while((_g < _g1->length)){
HXLINE( 998)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 998)				_g = (_g + 1);
HXLINE(1000)				child->_hx___renderCanvasMask(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1005___renderDOM)
HXLINE(1006)		{
HXLINE(1006)			 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN(1006)			while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1006)				 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1008)				if (::hx::IsNull( orphan1->stage )) {
HXLINE(1010)					orphan1->_hx___renderDOM(renderer);
            				}
            			}
            		}
HXLINE(1014)		{
HXLINE(1014)			{
HXLINE(1014)				 ::Dynamic orphan1 = this->_hx___removedChildren->iterator();
HXDLIN(1014)				while(( (bool)(orphan1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1014)					 ::openfl::display::DisplayObject orphan = ( ( ::openfl::display::DisplayObject)(orphan1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(1014)					if (::hx::IsNull( orphan->stage )) {
HXLINE(1014)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1014)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE(1016)		this->super::_hx___renderDOM(renderer);
HXLINE(1018)		bool _hx_tmp;
HXDLIN(1018)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1018)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1018)			_hx_tmp = false;
            		}
HXDLIN(1018)		if (_hx_tmp) {
HXLINE(1018)			return;
            		}
HXLINE(1020)		renderer->_hx___pushMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXLINE(1022)		if (::hx::IsNotNull( renderer->_hx___stage )) {
HXLINE(1024)			{
HXLINE(1024)				int _g = 0;
HXDLIN(1024)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1024)				while((_g < _g1->length)){
HXLINE(1024)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1024)					_g = (_g + 1);
HXLINE(1026)					child->_hx___renderDOM(renderer);
HXLINE(1027)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE(1030)			this->_hx___renderDirty = false;
            		}
            		else {
HXLINE(1034)			int _g = 0;
HXDLIN(1034)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1034)			while((_g < _g1->length)){
HXLINE(1034)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1034)				_g = (_g + 1);
HXLINE(1036)				child->_hx___renderDOM(renderer);
            			}
            		}
HXLINE(1040)		renderer->_hx___popMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
            	}


void DisplayObjectContainer_obj::_hx___renderDOMClear( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1044___renderDOMClear)
HXLINE(1045)		{
HXLINE(1045)			 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN(1045)			while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1045)				 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1047)				if (::hx::IsNull( orphan1->stage )) {
HXLINE(1049)					orphan1->_hx___renderDOMClear(renderer);
            				}
            			}
            		}
HXLINE(1053)		{
HXLINE(1053)			{
HXLINE(1053)				 ::Dynamic orphan1 = this->_hx___removedChildren->iterator();
HXDLIN(1053)				while(( (bool)(orphan1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1053)					 ::openfl::display::DisplayObject orphan = ( ( ::openfl::display::DisplayObject)(orphan1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(1053)					if (::hx::IsNull( orphan->stage )) {
HXLINE(1053)						orphan->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1053)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE(1055)		{
HXLINE(1055)			int _g = 0;
HXDLIN(1055)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1055)			while((_g < _g1->length)){
HXLINE(1055)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1055)				_g = (_g + 1);
HXLINE(1057)				child->_hx___renderDOMClear(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1062___renderGL)
HXLINE(1063)		{
HXLINE(1063)			{
HXLINE(1063)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN(1063)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1063)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(1063)					if (::hx::IsNull( orphan1->stage )) {
HXLINE(1063)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1063)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE(1065)		bool _hx_tmp;
HXDLIN(1065)		if (this->_hx___renderable) {
HXLINE(1065)			_hx_tmp = (this->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE(1065)			_hx_tmp = true;
            		}
HXDLIN(1065)		if (_hx_tmp) {
HXLINE(1065)			return;
            		}
HXLINE(1067)		this->super::_hx___renderGL(renderer);
HXLINE(1069)		bool _hx_tmp1;
HXDLIN(1069)		if (::hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1069)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1069)			_hx_tmp1 = false;
            		}
HXDLIN(1069)		if (_hx_tmp1) {
HXLINE(1069)			return;
            		}
HXLINE(1071)		if ((this->_hx___children->length > 0)) {
HXLINE(1073)			renderer->_hx___pushMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
HXLINE(1076)			if (::hx::IsNotNull( renderer->_hx___stage )) {
HXLINE(1078)				{
HXLINE(1078)					int _g = 0;
HXDLIN(1078)					::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1078)					while((_g < _g1->length)){
HXLINE(1078)						 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1078)						_g = (_g + 1);
HXLINE(1080)						child->_hx___renderGL(renderer);
HXLINE(1081)						child->_hx___renderDirty = false;
            					}
            				}
HXLINE(1084)				this->_hx___renderDirty = false;
            			}
            			else {
HXLINE(1088)				int _g = 0;
HXDLIN(1088)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1088)				while((_g < _g1->length)){
HXLINE(1088)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1088)					_g = (_g + 1);
HXLINE(1090)					child->_hx___renderGL(renderer);
            				}
            			}
            		}
HXLINE(1095)		if ((this->_hx___children->length > 0)) {
HXLINE(1098)			renderer->_hx___popMaskObject(::hx::ObjectPtr<OBJ_>(this),null());
            		}
            	}


void DisplayObjectContainer_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1103___renderGLMask)
HXLINE(1104)		{
HXLINE(1104)			{
HXLINE(1104)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN(1104)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1104)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(1104)					if (::hx::IsNull( orphan1->stage )) {
HXLINE(1104)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1104)			this->_hx___removedChildren->set_length(0);
            		}
HXLINE(1106)		if (::hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1109)			::openfl::_internal::renderer::context3D::Context3DShape_obj::renderMask(::hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE(1112)		{
HXLINE(1112)			int _g = 0;
HXDLIN(1112)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1112)			while((_g < _g1->length)){
HXLINE(1112)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1112)				_g = (_g + 1);
HXLINE(1114)				child->_hx___renderGLMask(renderer);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1119___setStageReference)
HXLINE(1120)		this->super::_hx___setStageReference(stage);
HXLINE(1122)		if (::hx::IsNotNull( this->_hx___children )) {
HXLINE(1124)			int _g = 0;
HXDLIN(1124)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1124)			while((_g < _g1->length)){
HXLINE(1124)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1124)				_g = (_g + 1);
HXLINE(1126)				child->_hx___setStageReference(stage);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___setWorldTransformInvalid(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1133___setWorldTransformInvalid)
HXDLIN(1133)		if (!(this->_hx___worldTransformInvalid)) {
HXLINE(1135)			this->_hx___worldTransformInvalid = true;
HXLINE(1137)			if (::hx::IsNotNull( this->_hx___children )) {
HXLINE(1139)				int _g = 0;
HXDLIN(1139)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1139)				while((_g < _g1->length)){
HXLINE(1139)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1139)					_g = (_g + 1);
HXLINE(1141)					child->_hx___setWorldTransformInvalid();
            				}
            			}
            		}
            	}


 ::Dynamic DisplayObjectContainer_obj::_hx___shouldCacheHardware( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1148___shouldCacheHardware)
HXLINE(1149)		if (::hx::IsEq( value,true )) {
HXLINE(1149)			return true;
            		}
HXLINE(1150)		value = this->super::_hx___shouldCacheHardware(value);
HXLINE(1151)		if (::hx::IsEq( value,true )) {
HXLINE(1151)			return true;
            		}
HXLINE(1153)		if (::hx::IsNotNull( this->_hx___children )) {
HXLINE(1155)			int _g = 0;
HXDLIN(1155)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1155)			while((_g < _g1->length)){
HXLINE(1155)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1155)				_g = (_g + 1);
HXLINE(1157)				value = child->_hx___shouldCacheHardware(value);
HXLINE(1158)				if (::hx::IsEq( value,true )) {
HXLINE(1158)					return true;
            				}
            			}
            		}
HXLINE(1162)		return value;
            	}


void DisplayObjectContainer_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1167___stopAllMovieClips)
HXDLIN(1167)		int _g = 0;
HXDLIN(1167)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1167)		while((_g < _g1->length)){
HXDLIN(1167)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1167)			_g = (_g + 1);
HXLINE(1169)			child->_hx___stopAllMovieClips();
            		}
            	}


void DisplayObjectContainer_obj::_hx___tabTest(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1174___tabTest)
HXLINE(1175)		this->super::_hx___tabTest(stack);
HXLINE(1177)		if (!(this->get_tabChildren())) {
HXLINE(1177)			return;
            		}
HXLINE(1179)		bool interactive = false;
HXLINE(1180)		 ::openfl::display::InteractiveObject interactiveObject = null();
HXLINE(1182)		{
HXLINE(1182)			int _g = 0;
HXDLIN(1182)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1182)			while((_g < _g1->length)){
HXLINE(1182)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1182)				_g = (_g + 1);
HXLINE(1184)				interactive = child->_hx___getInteractive(null());
HXLINE(1186)				if (interactive) {
HXLINE(1188)					interactiveObject = ( ( ::openfl::display::InteractiveObject)(child) );
HXLINE(1189)					interactiveObject->_hx___tabTest(stack);
            				}
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1195___update)
HXLINE(1196)		this->super::_hx___update(transformOnly,updateChildren);
HXLINE(1198)		if (updateChildren) {
HXLINE(1200)			int _g = 0;
HXDLIN(1200)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN(1200)			while((_g < _g1->length)){
HXLINE(1200)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1200)				_g = (_g + 1);
HXLINE(1202)				child->_hx___update(transformOnly,true);
            			}
            		}
            	}


int DisplayObjectContainer_obj::get_numChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1210_get_numChildren)
HXDLIN(1210)		return this->_hx___children->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_numChildren,return )

bool DisplayObjectContainer_obj::get_tabChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_1215_get_tabChildren)
HXDLIN(1215)		return this->_hx___tabChildren;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_tabChildren,return )

bool DisplayObjectContainer_obj::set_tabChildren(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_1219_set_tabChildren)
HXLINE(1220)		if ((this->_hx___tabChildren != value)) {
HXLINE(1222)			this->_hx___tabChildren = value;
HXLINE(1224)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("tabChildrenChange",44,91,b5,de),true,false));
            		}
HXLINE(1227)		return this->_hx___tabChildren;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,set_tabChildren,return )


::hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__new() {
	::hx::ObjectPtr< DisplayObjectContainer_obj > __this = new DisplayObjectContainer_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__alloc(::hx::Ctx *_hx_ctx) {
	DisplayObjectContainer_obj *__this = (DisplayObjectContainer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObjectContainer_obj), true, "openfl.display.DisplayObjectContainer"));
	*(void **)__this = DisplayObjectContainer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DisplayObjectContainer_obj::DisplayObjectContainer_obj()
{
}

void DisplayObjectContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObjectContainer);
	HX_MARK_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_MARK_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	HX_MARK_MEMBER_NAME(_hx___tabChildren,"__tabChildren");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObjectContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_VISIT_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	HX_VISIT_MEMBER_NAME(_hx___tabChildren,"__tabChildren");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DisplayObjectContainer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"resolve") ) { return ::hx::Val( resolve_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addChild") ) { return ::hx::Val( addChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return ::hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return ::hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return ::hx::Val( _hx___cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return ::hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"__tabTest") ) { return ::hx::Val( _hx___tabTest_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return ::hx::Val( addChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildAt") ) { return ::hx::Val( getChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return ::hx::Val( _hx___renderGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numChildren") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_numChildren() ); }
		if (HX_FIELD_EQ(inName,"tabChildren") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_tabChildren() ); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return ::hx::Val( removeChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return ::hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return ::hx::Val( _hx___renderDOM_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"swapChildren") ) { return ::hx::Val( swapChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return ::hx::Val( _hx___enterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { return ::hx::Val( mouseChildren ); }
		if (HX_FIELD_EQ(inName,"__tabChildren") ) { return ::hx::Val( _hx___tabChildren ); }
		if (HX_FIELD_EQ(inName,"getChildIndex") ) { return ::hx::Val( getChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return ::hx::Val( removeChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setChildIndex") ) { return ::hx::Val( setChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return ::hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return ::hx::Val( _hx___renderCairo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getChildByName") ) { return ::hx::Val( getChildByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildren") ) { return ::hx::Val( removeChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapChildrenAt") ) { return ::hx::Val( swapChildrenAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return ::hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return ::hx::Val( _hx___renderGLMask_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_numChildren") ) { return ::hx::Val( get_numChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabChildren") ) { return ::hx::Val( get_tabChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tabChildren") ) { return ::hx::Val( set_tabChildren_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return ::hx::Val( _hx___renderDOMClear_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { return ::hx::Val( _hx___removedChildren ); }
		if (HX_FIELD_EQ(inName,"stopAllMovieClips") ) { return ::hx::Val( stopAllMovieClips_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getFilterBounds") ) { return ::hx::Val( _hx___getFilterBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return ::hx::Val( _hx___getRenderBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return ::hx::Val( _hx___renderCairoMask_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__dispatchChildren") ) { return ::hx::Val( _hx___dispatchChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return ::hx::Val( _hx___readGraphicsData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return ::hx::Val( _hx___renderCanvasMask_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return ::hx::Val( _hx___setStageReference_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return ::hx::Val( _hx___stopAllMovieClips_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getObjectsUnderPoint") ) { return ::hx::Val( getObjectsUnderPoint_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__shouldCacheHardware") ) { return ::hx::Val( _hx___shouldCacheHardware_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__cleanupRemovedChildren") ) { return ::hx::Val( _hx___cleanupRemovedChildren_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__setWorldTransformInvalid") ) { return ::hx::Val( _hx___setWorldTransformInvalid_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"areInaccessibleObjectsUnderPoint") ) { return ::hx::Val( areInaccessibleObjectsUnderPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DisplayObjectContainer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"tabChildren") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_tabChildren(inValue.Cast< bool >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { mouseChildren=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__tabChildren") ) { _hx___tabChildren=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { _hx___removedChildren=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DisplayObjectContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mouseChildren",84,18,6b,ff));
	outFields->push(HX_("numChildren",a5,69,80,5c));
	outFields->push(HX_("tabChildren",b4,0c,86,4b));
	outFields->push(HX_("__removedChildren",df,c5,0e,d3));
	outFields->push(HX_("__tabChildren",94,4d,fe,93));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DisplayObjectContainer_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,mouseChildren),HX_("mouseChildren",84,18,6b,ff)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(DisplayObjectContainer_obj,_hx___removedChildren),HX_("__removedChildren",df,c5,0e,d3)},
	{::hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,_hx___tabChildren),HX_("__tabChildren",94,4d,fe,93)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DisplayObjectContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String DisplayObjectContainer_obj_sMemberFields[] = {
	HX_("mouseChildren",84,18,6b,ff),
	HX_("__removedChildren",df,c5,0e,d3),
	HX_("__tabChildren",94,4d,fe,93),
	HX_("addChild",bb,cf,16,bf),
	HX_("addChildAt",8e,ad,36,ce),
	HX_("areInaccessibleObjectsUnderPoint",3d,22,9b,1e),
	HX_("contains",1f,5a,7b,2c),
	HX_("getChildAt",b9,07,0e,b6),
	HX_("getChildByName",88,b9,73,a3),
	HX_("getChildIndex",0c,68,02,b9),
	HX_("getObjectsUnderPoint",96,10,d5,80),
	HX_("removeChild",b8,86,ed,43),
	HX_("removeChildAt",cb,dd,66,3f),
	HX_("removeChildren",a3,55,c0,3a),
	HX_("resolve",ec,12,60,67),
	HX_("setChildIndex",18,4a,08,fe),
	HX_("stopAllMovieClips",f2,60,f8,a0),
	HX_("swapChildren",f2,4a,53,e0),
	HX_("swapChildrenAt",85,a4,f1,13),
	HX_("__cleanup",04,5d,90,2c),
	HX_("__cleanupRemovedChildren",5b,84,61,c1),
	HX_("__dispatchChildren",39,81,f4,f4),
	HX_("__enterFrame",15,7f,e3,3a),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__getFilterBounds",e3,3a,ba,18),
	HX_("__getRenderBounds",01,11,b8,7b),
	HX_("__hitTest",25,b1,cd,63),
	HX_("__hitTestMask",b1,14,fd,3b),
	HX_("__readGraphicsData",2b,10,91,f2),
	HX_("__renderCairo",32,9e,42,55),
	HX_("__renderCairoMask",3e,0c,22,6b),
	HX_("__renderCanvas",ee,db,58,48),
	HX_("__renderCanvasMask",fa,d7,ef,51),
	HX_("__renderDOM",ac,f5,83,fb),
	HX_("__renderDOMClear",41,dc,ee,79),
	HX_("__renderGL",1b,1e,14,56),
	HX_("__renderGLMask",a7,34,7c,b4),
	HX_("__setStageReference",4f,e5,e5,f4),
	HX_("__setWorldTransformInvalid",7b,c9,b9,d4),
	HX_("__shouldCacheHardware",b7,af,f5,89),
	HX_("__stopAllMovieClips",d2,89,e8,53),
	HX_("__tabTest",27,ee,bd,c6),
	HX_("__update",29,f1,34,2f),
	HX_("get_numChildren",3c,21,62,1d),
	HX_("get_tabChildren",4b,c4,67,0c),
	HX_("set_tabChildren",57,41,33,08),
	::String(null()) };

::hx::Class DisplayObjectContainer_obj::__mClass;

void DisplayObjectContainer_obj::__register()
{
	DisplayObjectContainer_obj _hx_dummy;
	DisplayObjectContainer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display.DisplayObjectContainer",4a,52,ef,89);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DisplayObjectContainer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DisplayObjectContainer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObjectContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObjectContainer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
