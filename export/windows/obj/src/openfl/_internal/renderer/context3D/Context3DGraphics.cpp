// Generated by Haxe 4.1.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_ShaderBuffer
#include <openfl/_internal/renderer/ShaderBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DBuffer
#include <openfl/_internal/renderer/context3D/Context3DBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DElementType
#include <openfl/_internal/renderer/context3D/Context3DElementType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DGraphics
#include <openfl/_internal/renderer/context3D/Context3DGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DMaskShader
#include <openfl/_internal/renderer/context3D/Context3DMaskShader.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_40_buildBuffer,"openfl._internal.renderer.context3D.Context3DGraphics","buildBuffer",0x73ee0a82,"openfl._internal.renderer.context3D.Context3DGraphics.buildBuffer","openfl/_internal/renderer/context3D/Context3DGraphics.hx",40,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_369_isCompatible,"openfl._internal.renderer.context3D.Context3DGraphics","isCompatible",0x42b459aa,"openfl._internal.renderer.context3D.Context3DGraphics.isCompatible","openfl/_internal/renderer/context3D/Context3DGraphics.hx",369,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_462_render,"openfl._internal.renderer.context3D.Context3DGraphics","render",0x91022022,"openfl._internal.renderer.context3D.Context3DGraphics.render","openfl/_internal/renderer/context3D/Context3DGraphics.hx",462,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_819_renderMask,"openfl._internal.renderer.context3D.Context3DGraphics","renderMask",0xd361462e,"openfl._internal.renderer.context3D.Context3DGraphics.renderMask","openfl/_internal/renderer/context3D/Context3DGraphics.hx",819,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_828_resizeIndexBuffer,"openfl._internal.renderer.context3D.Context3DGraphics","resizeIndexBuffer",0x8595e6d2,"openfl._internal.renderer.context3D.Context3DGraphics.resizeIndexBuffer","openfl/_internal/renderer/context3D/Context3DGraphics.hx",828,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_876_resizeVertexBuffer,"openfl._internal.renderer.context3D.Context3DGraphics","resizeVertexBuffer",0xd24b2a64,"openfl._internal.renderer.context3D.Context3DGraphics.resizeVertexBuffer","openfl/_internal/renderer/context3D/Context3DGraphics.hx",876,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_33_boot,"openfl._internal.renderer.context3D.Context3DGraphics","boot",0xd9dd2dfe,"openfl._internal.renderer.context3D.Context3DGraphics.boot","openfl/_internal/renderer/context3D/Context3DGraphics.hx",33,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_35_boot,"openfl._internal.renderer.context3D.Context3DGraphics","boot",0xd9dd2dfe,"openfl._internal.renderer.context3D.Context3DGraphics.boot","openfl/_internal/renderer/context3D/Context3DGraphics.hx",35,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_37_boot,"openfl._internal.renderer.context3D.Context3DGraphics","boot",0xd9dd2dfe,"openfl._internal.renderer.context3D.Context3DGraphics.boot","openfl/_internal/renderer/context3D/Context3DGraphics.hx",37,0x6c5d2b1c)
namespace openfl{
namespace _internal{
namespace renderer{
namespace context3D{

void Context3DGraphics_obj::__construct() { }

Dynamic Context3DGraphics_obj::__CreateEmpty() { return new Context3DGraphics_obj; }

void *Context3DGraphics_obj::_hx_vtable = 0;

Dynamic Context3DGraphics_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Context3DGraphics_obj > _hx_result = new Context3DGraphics_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Context3DGraphics_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x12a5f19a;
}

 ::openfl::display::BitmapData Context3DGraphics_obj::blankBitmapData;

bool Context3DGraphics_obj::maskRender;

 ::openfl::geom::ColorTransform Context3DGraphics_obj::tempColorTransform;

void Context3DGraphics_obj::buildBuffer( ::openfl::display::Graphics graphics, ::openfl::display::OpenGLRenderer renderer){
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_40_buildBuffer)
HXLINE(  41)		int quadBufferPosition = 0;
HXLINE(  42)		int triangleIndexBufferPosition = 0;
HXLINE(  43)		int vertexBufferPosition = 0;
HXLINE(  44)		int vertexBufferPositionUVT = 0;
HXLINE(  46)		 ::openfl::_internal::renderer::DrawCommandReader data =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,graphics->_hx___commands);
HXLINE(  48)		 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(  50)		 ::openfl::geom::Rectangle tileRect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(  51)		 ::openfl::geom::Matrix tileTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE(  53)		 ::openfl::display::BitmapData bitmap = null();
HXLINE(  55)		{
HXLINE(  55)			int _g = 0;
HXDLIN(  55)			::Array< ::Dynamic> _g1 = graphics->_hx___commands->types;
HXDLIN(  55)			while((_g < _g1->length)){
HXLINE(  55)				 ::openfl::_internal::renderer::DrawCommandType type = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN(  55)				_g = (_g + 1);
HXLINE(  57)				switch((int)(type->_hx_getIndex())){
            					case (int)0: {
HXLINE(  60)						switch((int)(data->prev->_hx_getIndex())){
            							case (int)0: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->oPos = (data1->oPos + 2);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  60)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)1: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->iPos = (data1->iPos + 1);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  60)								data2->fPos = (data2->fPos + 1);
            							}
            							break;
            							case (int)2: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->oPos = (data1->oPos + 4);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  60)								data2->iiPos = (data2->iiPos + 2);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  60)								data3->ffPos = (data3->ffPos + 1);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  60)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)3: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)4: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->fPos = (data1->fPos + 6);
            							}
            							break;
            							case (int)5: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)6: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->fPos = (data1->fPos + 3);
            							}
            							break;
            							case (int)7: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)8: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->oPos = (data1->oPos + 3);
            							}
            							break;
            							case (int)9: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)10: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->fPos = (data1->fPos + 5);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  60)								data2->oPos = (data2->oPos + 1);
            							}
            							break;
            							case (int)12: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->oPos = (data1->oPos + 4);
            							}
            							break;
            							case (int)13: {
            							}
            							break;
            							case (int)14: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->oPos = (data1->oPos + 2);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  60)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)15: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->oPos = (data1->oPos + 4);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  60)								data2->iiPos = (data2->iiPos + 2);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  60)								data3->ffPos = (data3->ffPos + 1);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  60)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)16: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->oPos = (data1->oPos + 4);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  60)								data2->iPos = (data2->iPos + 1);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  60)								data3->fPos = (data3->fPos + 2);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  60)								data4->bPos = (data4->bPos + 1);
            							}
            							break;
            							case (int)17: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->fPos = (data1->fPos + 2);
            							}
            							break;
            							case (int)18: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->fPos = (data1->fPos + 2);
            							}
            							break;
            							case (int)19: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)20: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)21: case (int)22: {
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  60)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN(  60)						 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN(  60)						 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE(  61)						bitmap = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
            					}
            					break;
            					case (int)1: {
HXLINE(  64)						bitmap = null();
HXLINE(  65)						{
HXLINE(  65)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->oPos = (data1->oPos + 2);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  65)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->iPos = (data1->iPos + 1);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  65)									data2->fPos = (data2->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->oPos = (data1->oPos + 4);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  65)									data2->iiPos = (data2->iiPos + 2);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  65)									data3->ffPos = (data3->ffPos + 1);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  65)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->fPos = (data1->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->fPos = (data1->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->oPos = (data1->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->fPos = (data1->fPos + 5);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  65)									data2->oPos = (data2->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->oPos = (data1->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->oPos = (data1->oPos + 2);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  65)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->oPos = (data1->oPos + 4);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  65)									data2->iiPos = (data2->iiPos + 2);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  65)									data3->ffPos = (data3->ffPos + 1);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  65)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->oPos = (data1->oPos + 4);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  65)									data2->iPos = (data2->iPos + 1);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  65)									data3->fPos = (data3->fPos + 2);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  65)									data4->bPos = (data4->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  65)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(  65)							data->prev = type;
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(  68)						switch((int)(data->prev->_hx_getIndex())){
            							case (int)0: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->oPos = (data1->oPos + 2);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  68)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)1: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->iPos = (data1->iPos + 1);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  68)								data2->fPos = (data2->fPos + 1);
            							}
            							break;
            							case (int)2: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->oPos = (data1->oPos + 4);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  68)								data2->iiPos = (data2->iiPos + 2);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  68)								data3->ffPos = (data3->ffPos + 1);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  68)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)3: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)4: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->fPos = (data1->fPos + 6);
            							}
            							break;
            							case (int)5: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)6: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->fPos = (data1->fPos + 3);
            							}
            							break;
            							case (int)7: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)8: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->oPos = (data1->oPos + 3);
            							}
            							break;
            							case (int)9: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)10: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->fPos = (data1->fPos + 5);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  68)								data2->oPos = (data2->oPos + 1);
            							}
            							break;
            							case (int)12: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->oPos = (data1->oPos + 4);
            							}
            							break;
            							case (int)13: {
            							}
            							break;
            							case (int)14: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->oPos = (data1->oPos + 2);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  68)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)15: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->oPos = (data1->oPos + 4);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  68)								data2->iiPos = (data2->iiPos + 2);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  68)								data3->ffPos = (data3->ffPos + 1);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  68)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)16: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->oPos = (data1->oPos + 4);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  68)								data2->iPos = (data2->iPos + 1);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  68)								data3->fPos = (data3->fPos + 2);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  68)								data4->bPos = (data4->bPos + 1);
            							}
            							break;
            							case (int)17: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->fPos = (data1->fPos + 2);
            							}
            							break;
            							case (int)18: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->fPos = (data1->fPos + 2);
            							}
            							break;
            							case (int)19: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)20: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  68)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)21: case (int)22: {
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  68)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_SHADER_FILL_dyn();
HXDLIN(  68)						 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN(  68)						 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE(  69)						 ::openfl::_internal::renderer::ShaderBuffer shaderBuffer = ( ( ::openfl::_internal::renderer::ShaderBuffer)(c->buffer->o->__get(c->oPos)) );
HXLINE(  71)						bitmap = null();
HXLINE(  73)						if (::hx::IsNotNull( shaderBuffer )) {
HXLINE(  75)							int _g = 0;
HXDLIN(  75)							int _g1 = shaderBuffer->inputCount;
HXDLIN(  75)							while((_g < _g1)){
HXLINE(  75)								_g = (_g + 1);
HXDLIN(  75)								int i = (_g - 1);
HXLINE(  77)								if ((shaderBuffer->inputRefs->__get(i).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >()->name == HX_("bitmap",ef,0f,0c,f1))) {
HXLINE(  79)									bitmap = shaderBuffer->inputs->__get(i).StaticCast<  ::openfl::display::BitmapData >();
HXLINE(  80)									goto _hx_goto_1;
            								}
            							}
            							_hx_goto_1:;
            						}
            					}
            					break;
            					case (int)8: {
HXLINE(  88)						if (::hx::IsNotNull( bitmap )) {
HXLINE(  90)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->oPos = (data1->oPos + 2);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  90)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->iPos = (data1->iPos + 1);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  90)									data2->fPos = (data2->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->oPos = (data1->oPos + 4);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  90)									data2->iiPos = (data2->iiPos + 2);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  90)									data3->ffPos = (data3->ffPos + 1);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  90)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->fPos = (data1->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->fPos = (data1->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->oPos = (data1->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->fPos = (data1->fPos + 5);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  90)									data2->oPos = (data2->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->oPos = (data1->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->oPos = (data1->oPos + 2);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  90)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->oPos = (data1->oPos + 4);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  90)									data2->iiPos = (data2->iiPos + 2);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  90)									data3->ffPos = (data3->ffPos + 1);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  90)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->oPos = (data1->oPos + 4);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  90)									data2->iPos = (data2->iPos + 1);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  90)									data3->fPos = (data3->fPos + 2);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  90)									data4->bPos = (data4->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  90)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(  90)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_QUADS_dyn();
HXDLIN(  90)							 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN(  90)							 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE(  91)							 ::openfl::_Vector::FloatVector rects = ( ( ::openfl::_Vector::FloatVector)(c->buffer->o->__get(c->oPos)) );
HXLINE(  92)							 ::openfl::_Vector::IntVector indices = ( ( ::openfl::_Vector::IntVector)(c->buffer->o->__get((c->oPos + 1))) );
HXLINE(  93)							 ::openfl::_Vector::FloatVector transforms = ( ( ::openfl::_Vector::FloatVector)(c->buffer->o->__get((c->oPos + 2))) );
HXLINE(  96)							::Array< Float > rects1;
HXDLIN(  96)							if (::hx::IsNull( rects )) {
HXLINE(  96)								rects1 = null();
            							}
            							else {
HXLINE(  96)								rects1 = ( (::Array< Float >)(rects->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
            							}
HXLINE(  97)							::Array< int > indices1;
HXDLIN(  97)							if (::hx::IsNull( indices )) {
HXLINE(  97)								indices1 = null();
            							}
            							else {
HXLINE(  97)								indices1 = ( (::Array< int >)(indices->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
            							}
HXLINE(  98)							::Array< Float > transforms1;
HXDLIN(  98)							if (::hx::IsNull( transforms )) {
HXLINE(  98)								transforms1 = null();
            							}
            							else {
HXLINE(  98)								transforms1 = ( (::Array< Float >)(transforms->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
            							}
HXLINE( 101)							bool hasIndices = ::hx::IsNotNull( indices1 );
HXLINE( 102)							bool transformABCD = false;
HXDLIN( 102)							bool transformXY = false;
HXLINE( 104)							int length;
HXDLIN( 104)							if (hasIndices) {
HXLINE( 104)								length = indices1->length;
            							}
            							else {
HXLINE( 104)								length = ::Math_obj::floor((( (Float)(rects1->length) ) / ( (Float)(4) )));
            							}
HXLINE( 105)							if ((length == 0)) {
HXLINE( 105)								return;
            							}
HXLINE( 107)							if (::hx::IsNotNull( transforms1 )) {
HXLINE( 109)								if ((transforms1->length >= (length * 6))) {
HXLINE( 111)									transformABCD = true;
HXLINE( 112)									transformXY = true;
            								}
            								else {
HXLINE( 114)									if ((transforms1->length >= (length * 4))) {
HXLINE( 116)										transformABCD = true;
            									}
            									else {
HXLINE( 118)										if ((transforms1->length >= (length * 2))) {
HXLINE( 120)											transformXY = true;
            										}
            									}
            								}
            							}
HXLINE( 124)							int dataPerVertex = 4;
HXLINE( 125)							int stride = (dataPerVertex * 4);
HXLINE( 127)							if (::hx::IsNull( graphics->_hx___quadBuffer )) {
HXLINE( 129)								graphics->_hx___quadBuffer =  ::openfl::_internal::renderer::context3D::Context3DBuffer_obj::__alloc( HX_CTX ,context,::openfl::_internal::renderer::context3D::Context3DElementType_obj::QUADS_dyn(),length,dataPerVertex);
            							}
            							else {
HXLINE( 133)								graphics->_hx___quadBuffer->resize((quadBufferPosition + length),dataPerVertex);
            							}
HXLINE( 136)							int vertexOffset;
HXDLIN( 136)							Float alpha = ((Float)1.0);
HXDLIN( 136)							 ::Dynamic tileData;
HXDLIN( 136)							 ::Dynamic id;
HXLINE( 137)							Float tileWidth;
HXDLIN( 137)							Float tileHeight;
HXLINE( 141)							Float uvX;
HXDLIN( 141)							Float uvY;
HXDLIN( 141)							Float uvWidth;
HXDLIN( 141)							Float uvHeight;
HXLINE( 142)							Float x;
HXDLIN( 142)							Float y;
HXDLIN( 142)							Float x2;
HXDLIN( 142)							Float y2;
HXDLIN( 142)							Float x3;
HXDLIN( 142)							Float y3;
HXDLIN( 142)							Float x4;
HXDLIN( 142)							Float y4;
HXLINE( 143)							int ri;
HXDLIN( 143)							int ti;
HXLINE( 145)							 ::lime::utils::ArrayBufferView vertexBufferData = graphics->_hx___quadBuffer->vertexBufferData;
HXLINE( 137)							int bitmapWidth = bitmap->width;
HXDLIN( 137)							int bitmapHeight = bitmap->height;
HXLINE( 163)							 ::openfl::geom::Rectangle sourceRect = bitmap->rect;
HXLINE( 165)							{
HXLINE( 165)								int _g = 0;
HXDLIN( 165)								int _g1 = length;
HXDLIN( 165)								while((_g < _g1)){
HXLINE( 165)									_g = (_g + 1);
HXDLIN( 165)									int i = (_g - 1);
HXLINE( 167)									vertexOffset = ((quadBufferPosition + i) * stride);
HXLINE( 169)									if (hasIndices) {
HXLINE( 169)										ri = (indices1->__get(i) * 4);
            									}
            									else {
HXLINE( 169)										ri = (i * 4);
            									}
HXLINE( 170)									if ((ri < 0)) {
HXLINE( 170)										continue;
            									}
HXLINE( 171)									tileRect->setTo(rects1->__get(ri),rects1->__get((ri + 1)),rects1->__get((ri + 2)),rects1->__get((ri + 3)));
HXLINE( 173)									tileWidth = tileRect->width;
HXLINE( 174)									tileHeight = tileRect->height;
HXLINE( 176)									bool _hx_tmp;
HXDLIN( 176)									if (!((tileWidth <= 0))) {
HXLINE( 176)										_hx_tmp = (tileHeight <= 0);
            									}
            									else {
HXLINE( 176)										_hx_tmp = true;
            									}
HXDLIN( 176)									if (_hx_tmp) {
HXLINE( 178)										continue;
            									}
HXLINE( 181)									bool _hx_tmp1;
HXDLIN( 181)									if (transformABCD) {
HXLINE( 181)										_hx_tmp1 = transformXY;
            									}
            									else {
HXLINE( 181)										_hx_tmp1 = false;
            									}
HXDLIN( 181)									if (_hx_tmp1) {
HXLINE( 183)										ti = (i * 6);
HXLINE( 184)										tileTransform->setTo(transforms1->__get(ti),transforms1->__get((ti + 1)),transforms1->__get((ti + 2)),transforms1->__get((ti + 3)),transforms1->__get((ti + 4)),transforms1->__get((ti + 5)));
            									}
            									else {
HXLINE( 187)										if (transformABCD) {
HXLINE( 189)											ti = (i * 4);
HXLINE( 190)											tileTransform->setTo(transforms1->__get(ti),transforms1->__get((ti + 1)),transforms1->__get((ti + 2)),transforms1->__get((ti + 3)),tileRect->x,tileRect->y);
            										}
            										else {
HXLINE( 192)											if (transformXY) {
HXLINE( 194)												ti = (i * 2);
HXLINE( 195)												tileTransform->tx = transforms1->__get(ti);
HXLINE( 196)												tileTransform->ty = transforms1->__get((ti + 1));
            											}
            											else {
HXLINE( 200)												tileTransform->tx = tileRect->x;
HXLINE( 201)												tileTransform->ty = tileRect->y;
            											}
            										}
            									}
HXLINE( 204)									uvX = (tileRect->x / ( (Float)(bitmapWidth) ));
HXLINE( 205)									uvY = (tileRect->y / ( (Float)(bitmapHeight) ));
HXLINE( 206)									uvWidth = (tileRect->get_right() / ( (Float)(bitmapWidth) ));
HXLINE( 207)									uvHeight = (tileRect->get_bottom() / ( (Float)(bitmapHeight) ));
HXLINE( 209)									x = (((( (Float)(0) ) * tileTransform->a) + (( (Float)(0) ) * tileTransform->c)) + tileTransform->tx);
HXLINE( 210)									y = (((( (Float)(0) ) * tileTransform->b) + (( (Float)(0) ) * tileTransform->d)) + tileTransform->ty);
HXLINE( 211)									x2 = (((tileWidth * tileTransform->a) + (( (Float)(0) ) * tileTransform->c)) + tileTransform->tx);
HXLINE( 212)									y2 = (((tileWidth * tileTransform->b) + (( (Float)(0) ) * tileTransform->d)) + tileTransform->ty);
HXLINE( 213)									x3 = (((( (Float)(0) ) * tileTransform->a) + (tileHeight * tileTransform->c)) + tileTransform->tx);
HXLINE( 214)									y3 = (((( (Float)(0) ) * tileTransform->b) + (tileHeight * tileTransform->d)) + tileTransform->ty);
HXLINE( 215)									x4 = (((tileWidth * tileTransform->a) + (tileHeight * tileTransform->c)) + tileTransform->tx);
HXLINE( 216)									y4 = (((tileWidth * tileTransform->b) + (tileHeight * tileTransform->d)) + tileTransform->ty);
HXLINE( 218)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (vertexOffset * 4)),x);
HXLINE( 219)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((vertexOffset + 1) * 4)),y);
HXLINE( 220)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((vertexOffset + 2) * 4)),uvX);
HXLINE( 221)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((vertexOffset + 3) * 4)),uvY);
HXLINE( 223)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((vertexOffset + dataPerVertex) * 4)),x2);
HXLINE( 224)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + dataPerVertex) + 1) * 4)),y2);
HXLINE( 225)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + dataPerVertex) + 2) * 4)),uvWidth);
HXLINE( 226)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + dataPerVertex) + 3) * 4)),uvY);
HXLINE( 228)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((vertexOffset + (dataPerVertex * 2)) * 4)),x3);
HXLINE( 229)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + (dataPerVertex * 2)) + 1) * 4)),y3);
HXLINE( 230)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + (dataPerVertex * 2)) + 2) * 4)),uvX);
HXLINE( 231)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + (dataPerVertex * 2)) + 3) * 4)),uvHeight);
HXLINE( 233)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((vertexOffset + (dataPerVertex * 3)) * 4)),x4);
HXLINE( 234)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + (dataPerVertex * 3)) + 1) * 4)),y4);
HXLINE( 235)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + (dataPerVertex * 3)) + 2) * 4)),uvWidth);
HXLINE( 236)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + (dataPerVertex * 3)) + 3) * 4)),uvHeight);
            								}
            							}
HXLINE( 239)							quadBufferPosition = (quadBufferPosition + length);
            						}
            					}
            					break;
            					case (int)12: {
HXLINE( 243)						switch((int)(data->prev->_hx_getIndex())){
            							case (int)0: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->oPos = (data1->oPos + 2);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 243)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)1: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->iPos = (data1->iPos + 1);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 243)								data2->fPos = (data2->fPos + 1);
            							}
            							break;
            							case (int)2: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->oPos = (data1->oPos + 4);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 243)								data2->iiPos = (data2->iiPos + 2);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 243)								data3->ffPos = (data3->ffPos + 1);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 243)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)3: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)4: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->fPos = (data1->fPos + 6);
            							}
            							break;
            							case (int)5: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)6: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->fPos = (data1->fPos + 3);
            							}
            							break;
            							case (int)7: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)8: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->oPos = (data1->oPos + 3);
            							}
            							break;
            							case (int)9: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)10: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->fPos = (data1->fPos + 5);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 243)								data2->oPos = (data2->oPos + 1);
            							}
            							break;
            							case (int)12: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->oPos = (data1->oPos + 4);
            							}
            							break;
            							case (int)13: {
            							}
            							break;
            							case (int)14: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->oPos = (data1->oPos + 2);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 243)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)15: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->oPos = (data1->oPos + 4);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 243)								data2->iiPos = (data2->iiPos + 2);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 243)								data3->ffPos = (data3->ffPos + 1);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 243)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)16: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->oPos = (data1->oPos + 4);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 243)								data2->iPos = (data2->iPos + 1);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 243)								data3->fPos = (data3->fPos + 2);
HXDLIN( 243)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 243)								data4->bPos = (data4->bPos + 1);
            							}
            							break;
            							case (int)17: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->fPos = (data1->fPos + 2);
            							}
            							break;
            							case (int)18: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->fPos = (data1->fPos + 2);
            							}
            							break;
            							case (int)19: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)20: {
HXLINE( 243)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 243)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)21: case (int)22: {
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 243)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN( 243)						 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN( 243)						 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE( 244)						 ::openfl::_Vector::FloatVector vertices = ( ( ::openfl::_Vector::FloatVector)(c->buffer->o->__get(c->oPos)) );
HXLINE( 245)						 ::openfl::_Vector::IntVector indices = ( ( ::openfl::_Vector::IntVector)(c->buffer->o->__get((c->oPos + 1))) );
HXLINE( 246)						 ::openfl::_Vector::FloatVector uvtData = ( ( ::openfl::_Vector::FloatVector)(c->buffer->o->__get((c->oPos + 2))) );
HXLINE( 247)						 ::Dynamic culling = c->buffer->o->__get((c->oPos + 3));
HXLINE( 249)						bool hasIndices = ::hx::IsNotNull( indices );
HXLINE( 250)						int numVertices = ::Math_obj::floor((( (Float)(vertices->get_length()) ) / ( (Float)(2) )));
HXLINE( 251)						int length;
HXDLIN( 251)						if (hasIndices) {
HXLINE( 251)							length = indices->get_length();
            						}
            						else {
HXLINE( 251)							length = numVertices;
            						}
HXLINE( 253)						bool hasUVData = ::hx::IsNotNull( uvtData );
HXLINE( 254)						bool hasUVTData;
HXDLIN( 254)						if (hasUVData) {
HXLINE( 254)							hasUVTData = (uvtData->get_length() >= (numVertices * 3));
            						}
            						else {
HXLINE( 254)							hasUVTData = false;
            						}
HXLINE( 255)						int vertLength;
HXDLIN( 255)						if (hasUVTData) {
HXLINE( 255)							vertLength = 4;
            						}
            						else {
HXLINE( 255)							vertLength = 2;
            						}
HXLINE( 256)						int uvStride;
HXDLIN( 256)						if (hasUVTData) {
HXLINE( 256)							uvStride = 3;
            						}
            						else {
HXLINE( 256)							uvStride = 2;
            						}
HXLINE( 258)						int dataPerVertex = (vertLength + 2);
HXLINE( 259)						int vertexOffset;
HXDLIN( 259)						if (hasUVTData) {
HXLINE( 259)							vertexOffset = vertexBufferPositionUVT;
            						}
            						else {
HXLINE( 259)							vertexOffset = vertexBufferPosition;
            						}
HXLINE( 264)						::openfl::_internal::renderer::context3D::Context3DGraphics_obj::resizeVertexBuffer(graphics,hasUVTData,(vertexOffset + (length * dataPerVertex)));
HXLINE( 267)						 ::lime::utils::ArrayBufferView vertexBufferData;
HXDLIN( 267)						if (hasUVTData) {
HXLINE( 267)							vertexBufferData = graphics->_hx___vertexBufferDataUVT;
            						}
            						else {
HXLINE( 267)							vertexBufferData = graphics->_hx___vertexBufferData;
            						}
HXLINE( 268)						int offset;
HXDLIN( 268)						int vertOffset;
HXDLIN( 268)						int uvOffset;
HXDLIN( 268)						Float t;
HXLINE( 270)						{
HXLINE( 270)							int _g = 0;
HXDLIN( 270)							int _g1 = length;
HXDLIN( 270)							while((_g < _g1)){
HXLINE( 270)								_g = (_g + 1);
HXDLIN( 270)								int i = (_g - 1);
HXLINE( 272)								offset = (vertexOffset + (i * dataPerVertex));
HXLINE( 273)								if (hasIndices) {
HXLINE( 273)									vertOffset = (indices->get(i) * 2);
            								}
            								else {
HXLINE( 273)									vertOffset = (i * 2);
            								}
HXLINE( 274)								if (hasIndices) {
HXLINE( 274)									uvOffset = (indices->get(i) * uvStride);
            								}
            								else {
HXLINE( 274)									uvOffset = (i * uvStride);
            								}
HXLINE( 278)								if (hasUVTData) {
HXLINE( 280)									t = uvtData->get((uvOffset + 2));
HXLINE( 282)									{
HXLINE( 282)										Float val = (vertices->get(vertOffset) / t);
HXDLIN( 282)										 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (offset * 4)),val);
            									}
HXLINE( 283)									{
HXLINE( 283)										Float val1 = (vertices->get((vertOffset + 1)) / t);
HXDLIN( 283)										 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((offset + 1) * 4)),val1);
            									}
HXLINE( 284)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((offset + 2) * 4)),0);
HXLINE( 285)									{
HXLINE( 285)										Float val2 = (( (Float)(1) ) / t);
HXDLIN( 285)										 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((offset + 3) * 4)),val2);
            									}
            								}
            								else {
HXLINE( 289)									{
HXLINE( 289)										Float val = vertices->get(vertOffset);
HXDLIN( 289)										 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (offset * 4)),val);
            									}
HXLINE( 290)									{
HXLINE( 290)										Float val1 = vertices->get((vertOffset + 1));
HXDLIN( 290)										 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((offset + 1) * 4)),val1);
            									}
            								}
HXLINE( 293)								{
HXLINE( 293)									Float val;
HXDLIN( 293)									if (hasUVData) {
HXLINE( 293)										val = uvtData->get(uvOffset);
            									}
            									else {
HXLINE( 293)										val = ( (Float)(0) );
            									}
HXDLIN( 293)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((offset + vertLength) * 4)),val);
            								}
HXLINE( 294)								{
HXLINE( 294)									Float val1;
HXDLIN( 294)									if (hasUVData) {
HXLINE( 294)										val1 = uvtData->get((uvOffset + 1));
            									}
            									else {
HXLINE( 294)										val1 = ( (Float)(0) );
            									}
HXDLIN( 294)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((offset + vertLength) + 1) * 4)),val1);
            								}
            							}
            						}
HXLINE( 298)						if (hasUVTData) {
HXLINE( 300)							vertexBufferPositionUVT = (vertexBufferPositionUVT + (length * dataPerVertex));
            						}
            						else {
HXLINE( 304)							vertexBufferPosition = (vertexBufferPosition + (length * dataPerVertex));
            						}
            					}
            					break;
            					case (int)13: {
HXLINE( 308)						bitmap = null();
            					}
            					break;
            					default:{
HXLINE( 311)						switch((int)(data->prev->_hx_getIndex())){
            							case (int)0: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->oPos = (data1->oPos + 2);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 311)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)1: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->iPos = (data1->iPos + 1);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 311)								data2->fPos = (data2->fPos + 1);
            							}
            							break;
            							case (int)2: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->oPos = (data1->oPos + 4);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 311)								data2->iiPos = (data2->iiPos + 2);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 311)								data3->ffPos = (data3->ffPos + 1);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 311)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)3: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)4: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->fPos = (data1->fPos + 6);
            							}
            							break;
            							case (int)5: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)6: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->fPos = (data1->fPos + 3);
            							}
            							break;
            							case (int)7: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)8: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->oPos = (data1->oPos + 3);
            							}
            							break;
            							case (int)9: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)10: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->fPos = (data1->fPos + 5);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 311)								data2->oPos = (data2->oPos + 1);
            							}
            							break;
            							case (int)12: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->oPos = (data1->oPos + 4);
            							}
            							break;
            							case (int)13: {
            							}
            							break;
            							case (int)14: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->oPos = (data1->oPos + 2);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 311)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)15: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->oPos = (data1->oPos + 4);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 311)								data2->iiPos = (data2->iiPos + 2);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 311)								data3->ffPos = (data3->ffPos + 1);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 311)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)16: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->oPos = (data1->oPos + 4);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 311)								data2->iPos = (data2->iPos + 1);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 311)								data3->fPos = (data3->fPos + 2);
HXDLIN( 311)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 311)								data4->bPos = (data4->bPos + 1);
            							}
            							break;
            							case (int)17: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->fPos = (data1->fPos + 2);
            							}
            							break;
            							case (int)18: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->fPos = (data1->fPos + 2);
            							}
            							break;
            							case (int)19: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)20: {
HXLINE( 311)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 311)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)21: case (int)22: {
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 311)						data->prev = type;
            					}
            				}
            			}
            		}
HXLINE( 317)		if ((quadBufferPosition > 0)) {
HXLINE( 319)			graphics->_hx___quadBuffer->flushVertexBufferData();
            		}
HXLINE( 322)		if ((triangleIndexBufferPosition > 0)) {
HXLINE( 324)			 ::openfl::display3D::IndexBuffer3D buffer = graphics->_hx___triangleIndexBuffer;
HXLINE( 326)			bool _hx_tmp;
HXDLIN( 326)			if (::hx::IsNotNull( buffer )) {
HXLINE( 326)				_hx_tmp = (triangleIndexBufferPosition > graphics->_hx___triangleIndexBufferCount);
            			}
            			else {
HXLINE( 326)				_hx_tmp = true;
            			}
HXDLIN( 326)			if (_hx_tmp) {
HXLINE( 328)				buffer = context->createIndexBuffer(triangleIndexBufferPosition,0);
HXLINE( 329)				graphics->_hx___triangleIndexBuffer = buffer;
HXLINE( 330)				graphics->_hx___triangleIndexBufferCount = triangleIndexBufferPosition;
            			}
HXLINE( 333)			buffer->uploadFromTypedArray(graphics->_hx___triangleIndexBufferData,null());
            		}
HXLINE( 336)		if ((vertexBufferPosition > 0)) {
HXLINE( 338)			 ::openfl::display3D::VertexBuffer3D buffer = graphics->_hx___vertexBuffer;
HXLINE( 340)			bool _hx_tmp;
HXDLIN( 340)			if (::hx::IsNotNull( buffer )) {
HXLINE( 340)				_hx_tmp = (vertexBufferPosition > graphics->_hx___vertexBufferCount);
            			}
            			else {
HXLINE( 340)				_hx_tmp = true;
            			}
HXDLIN( 340)			if (_hx_tmp) {
HXLINE( 342)				buffer = context->createVertexBuffer(vertexBufferPosition,4,0);
HXLINE( 343)				graphics->_hx___vertexBuffer = buffer;
HXLINE( 344)				graphics->_hx___vertexBufferCount = vertexBufferPosition;
            			}
HXLINE( 347)			buffer->uploadFromTypedArray(graphics->_hx___vertexBufferData,null());
            		}
HXLINE( 350)		if ((vertexBufferPositionUVT > 0)) {
HXLINE( 352)			 ::openfl::display3D::VertexBuffer3D buffer = graphics->_hx___vertexBufferUVT;
HXLINE( 354)			bool _hx_tmp;
HXDLIN( 354)			if (::hx::IsNotNull( buffer )) {
HXLINE( 354)				_hx_tmp = (vertexBufferPositionUVT > graphics->_hx___vertexBufferCountUVT);
            			}
            			else {
HXLINE( 354)				_hx_tmp = true;
            			}
HXDLIN( 354)			if (_hx_tmp) {
HXLINE( 356)				buffer = context->createVertexBuffer(vertexBufferPositionUVT,6,0);
HXLINE( 357)				graphics->_hx___vertexBufferUVT = buffer;
HXLINE( 358)				graphics->_hx___vertexBufferCountUVT = vertexBufferPositionUVT;
            			}
HXLINE( 361)			buffer->uploadFromTypedArray(graphics->_hx___vertexBufferDataUVT,null());
            		}
HXLINE( 364)		::openfl::geom::Rectangle_obj::_hx___pool->release(tileRect);
HXLINE( 365)		::openfl::geom::Matrix_obj::_hx___pool->release(tileTransform);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DGraphics_obj,buildBuffer,(void))

bool Context3DGraphics_obj::isCompatible( ::openfl::display::Graphics graphics){
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_369_isCompatible)
HXLINE( 376)		if (::hx::IsNotNull( graphics->_hx___owner->_hx___worldScale9Grid )) {
HXLINE( 378)			return false;
            		}
HXLINE( 381)		 ::openfl::_internal::renderer::DrawCommandReader data =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,graphics->_hx___commands);
HXLINE( 382)		bool hasColorFill = false;
HXDLIN( 382)		bool hasBitmapFill = false;
HXDLIN( 382)		bool hasShaderFill = false;
HXLINE( 384)		{
HXLINE( 384)			int _g = 0;
HXDLIN( 384)			::Array< ::Dynamic> _g1 = graphics->_hx___commands->types;
HXDLIN( 384)			while((_g < _g1->length)){
HXLINE( 384)				 ::openfl::_internal::renderer::DrawCommandType type = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN( 384)				_g = (_g + 1);
HXLINE( 386)				switch((int)(type->_hx_getIndex())){
            					case (int)0: {
HXLINE( 389)						hasBitmapFill = true;
HXLINE( 390)						hasColorFill = false;
HXLINE( 391)						hasShaderFill = false;
HXLINE( 392)						{
HXLINE( 392)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->oPos = (data1->oPos + 2);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 392)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->iPos = (data1->iPos + 1);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 392)									data2->fPos = (data2->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->oPos = (data1->oPos + 4);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 392)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 392)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 392)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->fPos = (data1->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->fPos = (data1->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->oPos = (data1->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->fPos = (data1->fPos + 5);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 392)									data2->oPos = (data2->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->oPos = (data1->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->oPos = (data1->oPos + 2);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 392)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->oPos = (data1->oPos + 4);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 392)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 392)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 392)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->oPos = (data1->oPos + 4);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 392)									data2->iPos = (data2->iPos + 1);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 392)									data3->fPos = (data3->fPos + 2);
HXDLIN( 392)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 392)									data4->bPos = (data4->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 392)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 392)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 392)							data->prev = type;
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 395)						hasBitmapFill = false;
HXLINE( 396)						hasColorFill = true;
HXLINE( 397)						hasShaderFill = false;
HXLINE( 398)						{
HXLINE( 398)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->oPos = (data1->oPos + 2);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 398)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->iPos = (data1->iPos + 1);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 398)									data2->fPos = (data2->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->oPos = (data1->oPos + 4);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 398)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 398)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 398)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->fPos = (data1->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->fPos = (data1->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->oPos = (data1->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->fPos = (data1->fPos + 5);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 398)									data2->oPos = (data2->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->oPos = (data1->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->oPos = (data1->oPos + 2);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 398)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->oPos = (data1->oPos + 4);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 398)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 398)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 398)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->oPos = (data1->oPos + 4);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 398)									data2->iPos = (data2->iPos + 1);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 398)									data3->fPos = (data3->fPos + 2);
HXDLIN( 398)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 398)									data4->bPos = (data4->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 398)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 398)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 398)							data->prev = type;
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 401)						hasBitmapFill = false;
HXLINE( 402)						hasColorFill = false;
HXLINE( 403)						hasShaderFill = true;
HXLINE( 404)						{
HXLINE( 404)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->oPos = (data1->oPos + 2);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 404)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->iPos = (data1->iPos + 1);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 404)									data2->fPos = (data2->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->oPos = (data1->oPos + 4);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 404)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 404)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 404)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->fPos = (data1->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->fPos = (data1->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->oPos = (data1->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->fPos = (data1->fPos + 5);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 404)									data2->oPos = (data2->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->oPos = (data1->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->oPos = (data1->oPos + 2);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 404)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->oPos = (data1->oPos + 4);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 404)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 404)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 404)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->oPos = (data1->oPos + 4);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 404)									data2->iPos = (data2->iPos + 1);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 404)									data3->fPos = (data3->fPos + 2);
HXDLIN( 404)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 404)									data4->bPos = (data4->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 404)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 404)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 404)							data->prev = type;
            						}
            					}
            					break;
            					case (int)8: {
HXLINE( 407)						bool _hx_tmp;
HXDLIN( 407)						if (!(hasBitmapFill)) {
HXLINE( 407)							_hx_tmp = hasShaderFill;
            						}
            						else {
HXLINE( 407)							_hx_tmp = true;
            						}
HXDLIN( 407)						if (_hx_tmp) {
HXLINE( 409)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->oPos = (data1->oPos + 2);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 409)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->iPos = (data1->iPos + 1);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 409)									data2->fPos = (data2->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->oPos = (data1->oPos + 4);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 409)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 409)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 409)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->fPos = (data1->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->fPos = (data1->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->oPos = (data1->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->fPos = (data1->fPos + 5);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 409)									data2->oPos = (data2->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->oPos = (data1->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->oPos = (data1->oPos + 2);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 409)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->oPos = (data1->oPos + 4);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 409)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 409)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 409)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->oPos = (data1->oPos + 4);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 409)									data2->iPos = (data2->iPos + 1);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 409)									data3->fPos = (data3->fPos + 2);
HXDLIN( 409)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 409)									data4->bPos = (data4->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 409)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 409)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 409)							data->prev = type;
            						}
            						else {
HXLINE( 413)							data->destroy();
HXLINE( 414)							return false;
            						}
            					}
            					break;
            					case (int)9: {
HXLINE( 418)						if (hasColorFill) {
HXLINE( 420)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->oPos = (data1->oPos + 2);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 420)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->iPos = (data1->iPos + 1);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 420)									data2->fPos = (data2->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->oPos = (data1->oPos + 4);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 420)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 420)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 420)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->fPos = (data1->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->fPos = (data1->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->oPos = (data1->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->fPos = (data1->fPos + 5);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 420)									data2->oPos = (data2->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->oPos = (data1->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->oPos = (data1->oPos + 2);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 420)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->oPos = (data1->oPos + 4);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 420)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 420)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 420)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->oPos = (data1->oPos + 4);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 420)									data2->iPos = (data2->iPos + 1);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 420)									data3->fPos = (data3->fPos + 2);
HXDLIN( 420)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 420)									data4->bPos = (data4->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 420)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 420)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 420)							data->prev = type;
            						}
            						else {
HXLINE( 424)							data->destroy();
HXLINE( 425)							return false;
            						}
            					}
            					break;
            					case (int)12: {
HXLINE( 429)						bool _hx_tmp;
HXDLIN( 429)						if (!(hasBitmapFill)) {
HXLINE( 429)							_hx_tmp = hasShaderFill;
            						}
            						else {
HXLINE( 429)							_hx_tmp = true;
            						}
HXDLIN( 429)						if (_hx_tmp) {
HXLINE( 431)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->oPos = (data1->oPos + 2);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 431)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->iPos = (data1->iPos + 1);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 431)									data2->fPos = (data2->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->oPos = (data1->oPos + 4);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 431)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 431)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 431)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->fPos = (data1->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->fPos = (data1->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->oPos = (data1->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->fPos = (data1->fPos + 5);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 431)									data2->oPos = (data2->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->oPos = (data1->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->oPos = (data1->oPos + 2);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 431)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->oPos = (data1->oPos + 4);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 431)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 431)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 431)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->oPos = (data1->oPos + 4);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 431)									data2->iPos = (data2->iPos + 1);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 431)									data3->fPos = (data3->fPos + 2);
HXDLIN( 431)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 431)									data4->bPos = (data4->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 431)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 431)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 431)							data->prev = type;
            						}
            						else {
HXLINE( 435)							data->destroy();
HXLINE( 436)							return false;
            						}
            					}
            					break;
            					case (int)13: {
HXLINE( 440)						hasBitmapFill = false;
HXLINE( 441)						hasColorFill = false;
HXLINE( 442)						hasShaderFill = false;
HXLINE( 443)						{
HXLINE( 443)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->oPos = (data1->oPos + 2);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 443)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->iPos = (data1->iPos + 1);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 443)									data2->fPos = (data2->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->oPos = (data1->oPos + 4);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 443)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 443)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 443)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->fPos = (data1->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->fPos = (data1->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->oPos = (data1->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->fPos = (data1->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->fPos = (data1->fPos + 5);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 443)									data2->oPos = (data2->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->oPos = (data1->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->oPos = (data1->oPos + 2);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 443)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->oPos = (data1->oPos + 4);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 443)									data2->iiPos = (data2->iiPos + 2);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 443)									data3->ffPos = (data3->ffPos + 1);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 443)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->oPos = (data1->oPos + 4);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 443)									data2->iPos = (data2->iPos + 1);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 443)									data3->fPos = (data3->fPos + 2);
HXDLIN( 443)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 443)									data4->bPos = (data4->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->fPos = (data1->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 443)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 443)									data1->oPos = (data1->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 443)							data->prev = type;
            						}
            					}
            					break;
            					case (int)18: {
HXLINE( 446)						switch((int)(data->prev->_hx_getIndex())){
            							case (int)0: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->oPos = (data1->oPos + 2);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 446)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)1: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->iPos = (data1->iPos + 1);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 446)								data2->fPos = (data2->fPos + 1);
            							}
            							break;
            							case (int)2: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->oPos = (data1->oPos + 4);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 446)								data2->iiPos = (data2->iiPos + 2);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 446)								data3->ffPos = (data3->ffPos + 1);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 446)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)3: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)4: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->fPos = (data1->fPos + 6);
            							}
            							break;
            							case (int)5: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)6: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->fPos = (data1->fPos + 3);
            							}
            							break;
            							case (int)7: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)8: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->oPos = (data1->oPos + 3);
            							}
            							break;
            							case (int)9: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)10: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->fPos = (data1->fPos + 5);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 446)								data2->oPos = (data2->oPos + 1);
            							}
            							break;
            							case (int)12: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->oPos = (data1->oPos + 4);
            							}
            							break;
            							case (int)13: {
            							}
            							break;
            							case (int)14: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->oPos = (data1->oPos + 2);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 446)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)15: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->oPos = (data1->oPos + 4);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 446)								data2->iiPos = (data2->iiPos + 2);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 446)								data3->ffPos = (data3->ffPos + 1);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 446)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)16: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->oPos = (data1->oPos + 4);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 446)								data2->iPos = (data2->iPos + 1);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 446)								data3->fPos = (data3->fPos + 2);
HXDLIN( 446)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 446)								data4->bPos = (data4->bPos + 1);
            							}
            							break;
            							case (int)17: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->fPos = (data1->fPos + 2);
            							}
            							break;
            							case (int)18: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->fPos = (data1->fPos + 2);
            							}
            							break;
            							case (int)19: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)20: {
HXLINE( 446)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 446)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)21: case (int)22: {
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 446)						data->prev = type;
            					}
            					break;
            					case (int)19: {
HXLINE( 449)						switch((int)(data->prev->_hx_getIndex())){
            							case (int)0: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->oPos = (data1->oPos + 2);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 449)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)1: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->iPos = (data1->iPos + 1);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 449)								data2->fPos = (data2->fPos + 1);
            							}
            							break;
            							case (int)2: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->oPos = (data1->oPos + 4);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 449)								data2->iiPos = (data2->iiPos + 2);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 449)								data3->ffPos = (data3->ffPos + 1);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 449)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)3: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)4: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->fPos = (data1->fPos + 6);
            							}
            							break;
            							case (int)5: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)6: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->fPos = (data1->fPos + 3);
            							}
            							break;
            							case (int)7: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)8: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->oPos = (data1->oPos + 3);
            							}
            							break;
            							case (int)9: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->fPos = (data1->fPos + 4);
            							}
            							break;
            							case (int)10: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->fPos = (data1->fPos + 5);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 449)								data2->oPos = (data2->oPos + 1);
            							}
            							break;
            							case (int)12: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->oPos = (data1->oPos + 4);
            							}
            							break;
            							case (int)13: {
            							}
            							break;
            							case (int)14: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->oPos = (data1->oPos + 2);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 449)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)15: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->oPos = (data1->oPos + 4);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 449)								data2->iiPos = (data2->iiPos + 2);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 449)								data3->ffPos = (data3->ffPos + 1);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 449)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)16: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->oPos = (data1->oPos + 4);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 449)								data2->iPos = (data2->iPos + 1);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 449)								data3->fPos = (data3->fPos + 2);
HXDLIN( 449)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 449)								data4->bPos = (data4->bPos + 1);
            							}
            							break;
            							case (int)17: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->fPos = (data1->fPos + 2);
            							}
            							break;
            							case (int)18: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->fPos = (data1->fPos + 2);
            							}
            							break;
            							case (int)19: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)20: {
HXLINE( 449)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 449)								data1->oPos = (data1->oPos + 1);
            							}
            							break;
            							case (int)21: case (int)22: {
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 449)						data->prev = type;
            					}
            					break;
            					default:{
HXLINE( 452)						data->destroy();
HXLINE( 453)						return false;
            					}
            				}
            			}
            		}
HXLINE( 457)		data->destroy();
HXLINE( 458)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Context3DGraphics_obj,isCompatible,return )

void Context3DGraphics_obj::render( ::openfl::display::Graphics graphics, ::openfl::display::OpenGLRenderer renderer){
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_462_render)
HXLINE( 463)		bool _hx_tmp;
HXDLIN( 463)		if (graphics->_hx___visible) {
HXLINE( 463)			_hx_tmp = (graphics->_hx___commands->get_length() == 0);
            		}
            		else {
HXLINE( 463)			_hx_tmp = true;
            		}
HXDLIN( 463)		if (_hx_tmp) {
HXLINE( 463)			return;
            		}
HXLINE( 465)		bool _hx_tmp1;
HXDLIN( 465)		bool _hx_tmp2;
HXDLIN( 465)		if (::hx::IsNotNull( graphics->_hx___bitmap )) {
HXLINE( 465)			_hx_tmp2 = !(graphics->_hx___dirty);
            		}
            		else {
HXLINE( 465)			_hx_tmp2 = false;
            		}
HXDLIN( 465)		if (!(_hx_tmp2)) {
HXLINE( 465)			_hx_tmp1 = !(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::isCompatible(graphics));
            		}
            		else {
HXLINE( 465)			_hx_tmp1 = true;
            		}
HXDLIN( 465)		if (_hx_tmp1) {
HXLINE( 481)			 ::openfl::geom::Matrix cacheTransform = renderer->_hx___softwareRenderer->_hx___worldTransform;
HXLINE( 482)			renderer->_hx___softwareRenderer->_hx___worldTransform = renderer->_hx___worldTransform;
HXLINE( 487)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::render(graphics,( ( ::openfl::display::CairoRenderer)(renderer->_hx___softwareRenderer) ));
HXLINE( 490)			renderer->_hx___softwareRenderer->_hx___worldTransform = cacheTransform;
            		}
            		else {
HXLINE( 494)			graphics->_hx___bitmap = null();
HXLINE( 495)			graphics->_hx___update(renderer->_hx___worldTransform);
HXLINE( 497)			 ::openfl::geom::Rectangle bounds = graphics->_hx___bounds;
HXLINE( 499)			int width = graphics->_hx___width;
HXLINE( 500)			int height = graphics->_hx___height;
HXLINE( 502)			bool _hx_tmp;
HXDLIN( 502)			bool _hx_tmp1;
HXDLIN( 502)			if (::hx::IsNotNull( bounds )) {
HXLINE( 502)				_hx_tmp1 = (width >= 1);
            			}
            			else {
HXLINE( 502)				_hx_tmp1 = false;
            			}
HXDLIN( 502)			if (_hx_tmp1) {
HXLINE( 502)				_hx_tmp = (height >= 1);
            			}
            			else {
HXLINE( 502)				_hx_tmp = false;
            			}
HXDLIN( 502)			if (_hx_tmp) {
HXLINE( 504)				bool _hx_tmp;
HXDLIN( 504)				if (!(graphics->_hx___hardwareDirty)) {
HXLINE( 505)					bool _hx_tmp1;
HXDLIN( 505)					if (::hx::IsNull( graphics->_hx___quadBuffer )) {
HXLINE( 505)						_hx_tmp1 = ::hx::IsNull( graphics->_hx___vertexBuffer );
            					}
            					else {
HXLINE( 505)						_hx_tmp1 = false;
            					}
HXDLIN( 505)					if (_hx_tmp1) {
HXLINE( 504)						_hx_tmp = ::hx::IsNull( graphics->_hx___vertexBufferUVT );
            					}
            					else {
HXLINE( 504)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 504)					_hx_tmp = true;
            				}
HXDLIN( 504)				if (_hx_tmp) {
HXLINE( 507)					::openfl::_internal::renderer::context3D::Context3DGraphics_obj::buildBuffer(graphics,renderer);
            				}
HXLINE( 510)				 ::openfl::_internal::renderer::DrawCommandReader data =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,graphics->_hx___commands);
HXLINE( 512)				 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE( 513)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE( 515)				 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 517)				 ::openfl::_internal::renderer::ShaderBuffer shaderBuffer = null();
HXLINE( 518)				 ::openfl::display::BitmapData bitmap = null();
HXLINE( 519)				bool repeat = false;
HXLINE( 520)				bool smooth = false;
HXLINE( 521)				 ::Dynamic fill = null();
HXLINE( 523)				Float positionX = ((Float)0.0);
HXLINE( 524)				Float positionY = ((Float)0.0);
HXLINE( 526)				int quadBufferPosition = 0;
HXLINE( 527)				int shaderBufferOffset = 0;
HXLINE( 528)				int triangleIndexBufferPosition = 0;
HXLINE( 529)				int vertexBufferPosition = 0;
HXLINE( 530)				int vertexBufferPositionUVT = 0;
HXLINE( 532)				{
HXLINE( 532)					int _g = 0;
HXDLIN( 532)					::Array< ::Dynamic> _g1 = graphics->_hx___commands->types;
HXDLIN( 532)					while((_g < _g1->length)){
HXLINE( 532)						 ::openfl::_internal::renderer::DrawCommandType type = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN( 532)						_g = (_g + 1);
HXLINE( 534)						switch((int)(type->_hx_getIndex())){
            							case (int)0: {
HXLINE( 537)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->oPos = (data1->oPos + 2);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 537)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->iPos = (data1->iPos + 1);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 537)										data2->fPos = (data2->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->oPos = (data1->oPos + 4);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 537)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 537)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 537)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->fPos = (data1->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->fPos = (data1->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->oPos = (data1->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->fPos = (data1->fPos + 5);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 537)										data2->oPos = (data2->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->oPos = (data1->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->oPos = (data1->oPos + 2);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 537)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->oPos = (data1->oPos + 4);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 537)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 537)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 537)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->oPos = (data1->oPos + 4);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 537)										data2->iPos = (data2->iPos + 1);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 537)										data3->fPos = (data3->fPos + 2);
HXDLIN( 537)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 537)										data4->bPos = (data4->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 537)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 537)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 537)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 537)								 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN( 537)								 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE( 538)								bitmap = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXLINE( 539)								repeat = c->buffer->b->__get(c->bPos);
HXLINE( 540)								smooth = c->buffer->b->__get((c->bPos + 1));
HXLINE( 541)								shaderBuffer = null();
HXLINE( 542)								fill = null();
            							}
            							break;
            							case (int)1: {
HXLINE( 545)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->oPos = (data1->oPos + 2);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 545)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->iPos = (data1->iPos + 1);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 545)										data2->fPos = (data2->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->oPos = (data1->oPos + 4);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 545)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 545)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 545)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->fPos = (data1->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->fPos = (data1->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->oPos = (data1->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->fPos = (data1->fPos + 5);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 545)										data2->oPos = (data2->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->oPos = (data1->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->oPos = (data1->oPos + 2);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 545)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->oPos = (data1->oPos + 4);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 545)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 545)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 545)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->oPos = (data1->oPos + 4);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 545)										data2->iPos = (data2->iPos + 1);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 545)										data3->fPos = (data3->fPos + 2);
HXDLIN( 545)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 545)										data4->bPos = (data4->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 545)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 545)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 545)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 545)								 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN( 545)								 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE( 546)								int color = ::Std_obj::_hx_int(( (Float)(c->buffer->i->__get(c->iPos)) ));
HXLINE( 547)								int alpha = ::Std_obj::_hx_int((c->buffer->f->__get(c->fPos) * ( (Float)(255) )));
HXLINE( 549)								fill = ((color & 16777215) | (alpha << 24));
HXLINE( 550)								shaderBuffer = null();
HXLINE( 551)								bitmap = null();
            							}
            							break;
            							case (int)3: {
HXLINE( 554)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->oPos = (data1->oPos + 2);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 554)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->iPos = (data1->iPos + 1);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 554)										data2->fPos = (data2->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->oPos = (data1->oPos + 4);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 554)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 554)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 554)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->fPos = (data1->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->fPos = (data1->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->oPos = (data1->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->fPos = (data1->fPos + 5);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 554)										data2->oPos = (data2->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->oPos = (data1->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->oPos = (data1->oPos + 2);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 554)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->oPos = (data1->oPos + 4);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 554)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 554)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 554)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->oPos = (data1->oPos + 4);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 554)										data2->iPos = (data2->iPos + 1);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 554)										data3->fPos = (data3->fPos + 2);
HXDLIN( 554)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 554)										data4->bPos = (data4->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 554)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 554)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 554)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_SHADER_FILL_dyn();
HXDLIN( 554)								 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN( 554)								 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE( 555)								shaderBuffer = ( ( ::openfl::_internal::renderer::ShaderBuffer)(c->buffer->o->__get(c->oPos)) );
HXLINE( 556)								shaderBufferOffset = 0;
HXLINE( 558)								bool _hx_tmp;
HXDLIN( 558)								bool _hx_tmp1;
HXDLIN( 558)								if (::hx::IsNotNull( shaderBuffer )) {
HXLINE( 558)									_hx_tmp1 = ::hx::IsNull( shaderBuffer->shader );
            								}
            								else {
HXLINE( 558)									_hx_tmp1 = true;
            								}
HXDLIN( 558)								if (!(_hx_tmp1)) {
HXLINE( 558)									_hx_tmp = ::hx::IsNull( shaderBuffer->shader->_hx___bitmap );
            								}
            								else {
HXLINE( 558)									_hx_tmp = true;
            								}
HXDLIN( 558)								if (_hx_tmp) {
HXLINE( 560)									bitmap = null();
            								}
            								else {
HXLINE( 564)									bitmap = shaderBuffer->shader->_hx___bitmap->input;
            								}
HXLINE( 567)								fill = null();
            							}
            							break;
            							case (int)8: {
HXLINE( 570)								if (::hx::IsNotNull( bitmap )) {
HXLINE( 572)									switch((int)(data->prev->_hx_getIndex())){
            										case (int)0: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->oPos = (data1->oPos + 2);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 572)											data2->bPos = (data2->bPos + 2);
            										}
            										break;
            										case (int)1: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->iPos = (data1->iPos + 1);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 572)											data2->fPos = (data2->fPos + 1);
            										}
            										break;
            										case (int)2: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->oPos = (data1->oPos + 4);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 572)											data2->iiPos = (data2->iiPos + 2);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 572)											data3->ffPos = (data3->ffPos + 1);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 572)											data4->fPos = (data4->fPos + 1);
            										}
            										break;
            										case (int)3: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->oPos = (data1->oPos + 1);
            										}
            										break;
            										case (int)4: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->fPos = (data1->fPos + 6);
            										}
            										break;
            										case (int)5: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->fPos = (data1->fPos + 4);
            										}
            										break;
            										case (int)6: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->fPos = (data1->fPos + 3);
            										}
            										break;
            										case (int)7: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->fPos = (data1->fPos + 4);
            										}
            										break;
            										case (int)8: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->oPos = (data1->oPos + 3);
            										}
            										break;
            										case (int)9: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->fPos = (data1->fPos + 4);
            										}
            										break;
            										case (int)10: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->fPos = (data1->fPos + 5);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 572)											data2->oPos = (data2->oPos + 1);
            										}
            										break;
            										case (int)12: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->oPos = (data1->oPos + 4);
            										}
            										break;
            										case (int)13: {
            										}
            										break;
            										case (int)14: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->oPos = (data1->oPos + 2);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 572)											data2->bPos = (data2->bPos + 2);
            										}
            										break;
            										case (int)15: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->oPos = (data1->oPos + 4);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 572)											data2->iiPos = (data2->iiPos + 2);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 572)											data3->ffPos = (data3->ffPos + 1);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 572)											data4->fPos = (data4->fPos + 1);
            										}
            										break;
            										case (int)16: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->oPos = (data1->oPos + 4);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 572)											data2->iPos = (data2->iPos + 1);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 572)											data3->fPos = (data3->fPos + 2);
HXDLIN( 572)											 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 572)											data4->bPos = (data4->bPos + 1);
            										}
            										break;
            										case (int)17: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->fPos = (data1->fPos + 2);
            										}
            										break;
            										case (int)18: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->fPos = (data1->fPos + 2);
            										}
            										break;
            										case (int)19: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->oPos = (data1->oPos + 1);
            										}
            										break;
            										case (int)20: {
HXLINE( 572)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 572)											data1->oPos = (data1->oPos + 1);
            										}
            										break;
            										case (int)21: case (int)22: {
            										}
            										break;
            										default:{
            										}
            									}
HXLINE( 572)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_QUADS_dyn();
HXDLIN( 572)									 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN( 572)									 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE( 573)									 ::openfl::_Vector::FloatVector rects = ( ( ::openfl::_Vector::FloatVector)(c->buffer->o->__get(c->oPos)) );
HXLINE( 574)									 ::openfl::_Vector::IntVector indices = ( ( ::openfl::_Vector::IntVector)(c->buffer->o->__get((c->oPos + 1))) );
HXLINE( 575)									 ::openfl::_Vector::FloatVector transforms = ( ( ::openfl::_Vector::FloatVector)(c->buffer->o->__get((c->oPos + 2))) );
HXLINE( 578)									::Array< Float > rects1;
HXDLIN( 578)									if (::hx::IsNull( rects )) {
HXLINE( 578)										rects1 = null();
            									}
            									else {
HXLINE( 578)										rects1 = ( (::Array< Float >)(rects->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
            									}
HXLINE( 579)									::Array< int > indices1;
HXDLIN( 579)									if (::hx::IsNull( indices )) {
HXLINE( 579)										indices1 = null();
            									}
            									else {
HXLINE( 579)										indices1 = ( (::Array< int >)(indices->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
            									}
HXLINE( 580)									::Array< Float > transforms1;
HXDLIN( 580)									if (::hx::IsNull( transforms )) {
HXLINE( 580)										transforms1 = null();
            									}
            									else {
HXLINE( 580)										transforms1 = ( (::Array< Float >)(transforms->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
            									}
HXLINE( 583)									bool hasIndices = ::hx::IsNotNull( indices1 );
HXLINE( 584)									int length;
HXDLIN( 584)									if (hasIndices) {
HXLINE( 584)										length = indices1->length;
            									}
            									else {
HXLINE( 584)										length = ::Math_obj::floor((( (Float)(rects1->length) ) / ( (Float)(4) )));
            									}
HXLINE( 586)									::Array< Float > uMatrix = renderer->_hx___getMatrix(graphics->_hx___owner->_hx___renderTransform,1);
HXLINE( 587)									 ::openfl::display::Shader shader;
HXLINE( 589)									bool _hx_tmp;
HXDLIN( 589)									if (::hx::IsNotNull( shaderBuffer )) {
HXLINE( 589)										_hx_tmp = !(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender);
            									}
            									else {
HXLINE( 589)										_hx_tmp = false;
            									}
HXDLIN( 589)									if (_hx_tmp) {
HXLINE( 591)										shader = renderer->_hx___initShaderBuffer(shaderBuffer);
HXLINE( 593)										renderer->_hx___setShaderBuffer(shaderBuffer);
HXLINE( 594)										renderer->applyMatrix(uMatrix);
HXLINE( 595)										renderer->applyBitmapData(bitmap,false,repeat);
HXLINE( 596)										renderer->applyAlpha(graphics->_hx___owner->_hx___worldAlpha);
HXLINE( 597)										renderer->applyColorTransform(graphics->_hx___owner->_hx___worldColorTransform);
            									}
            									else {
HXLINE( 602)										if (::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender) {
HXLINE( 602)											shader = renderer->_hx___maskShader;
            										}
            										else {
HXLINE( 602)											shader = renderer->_hx___initGraphicsShader(null());
            										}
HXLINE( 603)										renderer->setShader(shader);
HXLINE( 604)										renderer->applyMatrix(uMatrix);
HXLINE( 605)										renderer->applyBitmapData(bitmap,smooth,repeat);
HXLINE( 606)										renderer->applyAlpha(graphics->_hx___owner->_hx___worldAlpha);
HXLINE( 607)										renderer->applyColorTransform(graphics->_hx___owner->_hx___worldColorTransform);
HXLINE( 608)										renderer->updateShader();
            									}
HXLINE( 611)									int end = (quadBufferPosition + length);
HXLINE( 613)									while((quadBufferPosition < end)){
HXLINE( 615)										length = ::Std_obj::_hx_int(::Math_obj::min(( (Float)((end - quadBufferPosition)) ),( (Float)(context->_hx___quadIndexBufferElements) )));
HXLINE( 616)										if ((length <= 0)) {
HXLINE( 616)											goto _hx_goto_8;
            										}
HXLINE( 618)										bool _hx_tmp;
HXDLIN( 618)										if (::hx::IsNotNull( shaderBuffer )) {
HXLINE( 618)											_hx_tmp = !(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender);
            										}
            										else {
HXLINE( 618)											_hx_tmp = false;
            										}
HXDLIN( 618)										if (_hx_tmp) {
HXLINE( 620)											renderer->_hx___updateShaderBuffer(shaderBufferOffset);
            										}
HXLINE( 623)										if (::hx::IsNotNull( shader->_hx___position )) {
HXLINE( 623)											context->setVertexBufferAt(( (int)(shader->_hx___position->index) ),graphics->_hx___quadBuffer->vertexBuffer,(quadBufferPosition * 16),2);
            										}
HXLINE( 625)										if (::hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE( 625)											context->setVertexBufferAt(( (int)(shader->_hx___textureCoord->index) ),graphics->_hx___quadBuffer->vertexBuffer,((quadBufferPosition * 16) + 2),2);
            										}
HXLINE( 628)										context->drawTriangles(context->_hx___quadIndexBuffer,0,(length * 2));
HXLINE( 630)										shaderBufferOffset = (shaderBufferOffset + (length * 4));
HXLINE( 631)										quadBufferPosition = (quadBufferPosition + length);
            									}
            									_hx_goto_8:;
HXLINE( 638)									renderer->_hx___clearShader();
            								}
            							}
            							break;
            							case (int)9: {
HXLINE( 642)								if (::hx::IsNotNull( fill )) {
HXLINE( 644)									switch((int)(data->prev->_hx_getIndex())){
            										case (int)0: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->oPos = (data1->oPos + 2);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 644)											data2->bPos = (data2->bPos + 2);
            										}
            										break;
            										case (int)1: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->iPos = (data1->iPos + 1);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 644)											data2->fPos = (data2->fPos + 1);
            										}
            										break;
            										case (int)2: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->oPos = (data1->oPos + 4);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 644)											data2->iiPos = (data2->iiPos + 2);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 644)											data3->ffPos = (data3->ffPos + 1);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 644)											data4->fPos = (data4->fPos + 1);
            										}
            										break;
            										case (int)3: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->oPos = (data1->oPos + 1);
            										}
            										break;
            										case (int)4: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->fPos = (data1->fPos + 6);
            										}
            										break;
            										case (int)5: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->fPos = (data1->fPos + 4);
            										}
            										break;
            										case (int)6: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->fPos = (data1->fPos + 3);
            										}
            										break;
            										case (int)7: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->fPos = (data1->fPos + 4);
            										}
            										break;
            										case (int)8: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->oPos = (data1->oPos + 3);
            										}
            										break;
            										case (int)9: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->fPos = (data1->fPos + 4);
            										}
            										break;
            										case (int)10: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->fPos = (data1->fPos + 5);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 644)											data2->oPos = (data2->oPos + 1);
            										}
            										break;
            										case (int)12: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->oPos = (data1->oPos + 4);
            										}
            										break;
            										case (int)13: {
            										}
            										break;
            										case (int)14: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->oPos = (data1->oPos + 2);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 644)											data2->bPos = (data2->bPos + 2);
            										}
            										break;
            										case (int)15: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->oPos = (data1->oPos + 4);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 644)											data2->iiPos = (data2->iiPos + 2);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 644)											data3->ffPos = (data3->ffPos + 1);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 644)											data4->fPos = (data4->fPos + 1);
            										}
            										break;
            										case (int)16: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->oPos = (data1->oPos + 4);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 644)											data2->iPos = (data2->iPos + 1);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 644)											data3->fPos = (data3->fPos + 2);
HXDLIN( 644)											 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 644)											data4->bPos = (data4->bPos + 1);
            										}
            										break;
            										case (int)17: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->fPos = (data1->fPos + 2);
            										}
            										break;
            										case (int)18: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->fPos = (data1->fPos + 2);
            										}
            										break;
            										case (int)19: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->oPos = (data1->oPos + 1);
            										}
            										break;
            										case (int)20: {
HXLINE( 644)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 644)											data1->oPos = (data1->oPos + 1);
            										}
            										break;
            										case (int)21: case (int)22: {
            										}
            										break;
            										default:{
            										}
            									}
HXLINE( 644)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 644)									 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN( 644)									 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE( 645)									Float x = c->buffer->f->__get(c->fPos);
HXLINE( 646)									Float y = c->buffer->f->__get((c->fPos + 1));
HXLINE( 647)									Float width = c->buffer->f->__get((c->fPos + 2));
HXLINE( 648)									Float height = c->buffer->f->__get((c->fPos + 3));
HXLINE( 651)									int color = ( (int)(fill) );
HXLINE( 652)									::openfl::_internal::renderer::context3D::Context3DGraphics_obj::tempColorTransform->redOffset = ( (Float)((::hx::UShr(color,16) & 255)) );
HXLINE( 653)									::openfl::_internal::renderer::context3D::Context3DGraphics_obj::tempColorTransform->greenOffset = ( (Float)((::hx::UShr(color,8) & 255)) );
HXLINE( 654)									::openfl::_internal::renderer::context3D::Context3DGraphics_obj::tempColorTransform->blueOffset = ( (Float)((color & 255)) );
HXLINE( 656)									::openfl::_internal::renderer::context3D::Context3DGraphics_obj::tempColorTransform->_hx___combine(graphics->_hx___owner->_hx___worldColorTransform);
HXLINE( 658)									matrix->identity();
HXLINE( 659)									matrix->scale(width,height);
HXLINE( 660)									matrix->tx = x;
HXLINE( 661)									matrix->ty = y;
HXLINE( 662)									matrix->concat(graphics->_hx___owner->_hx___renderTransform);
HXLINE( 664)									 ::openfl::display::Shader shader;
HXDLIN( 664)									if (::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender) {
HXLINE( 664)										shader = renderer->_hx___maskShader;
            									}
            									else {
HXLINE( 664)										shader = renderer->_hx___initGraphicsShader(null());
            									}
HXLINE( 665)									renderer->setShader(shader);
HXLINE( 666)									renderer->applyMatrix(renderer->_hx___getMatrix(matrix,1));
HXLINE( 667)									renderer->applyBitmapData(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::blankBitmapData,true,repeat);
HXLINE( 669)									renderer->applyAlpha(((( (Float)((::hx::UShr(color,24) & 255)) ) / ( (Float)(255) )) * graphics->_hx___owner->_hx___worldAlpha));
HXLINE( 671)									renderer->applyColorTransform(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::tempColorTransform);
HXLINE( 672)									renderer->updateShader();
HXLINE( 674)									 ::openfl::display3D::VertexBuffer3D vertexBuffer = ::openfl::_internal::renderer::context3D::Context3DGraphics_obj::blankBitmapData->getVertexBuffer(context,null(),null());
HXLINE( 675)									if (::hx::IsNotNull( shader->_hx___position )) {
HXLINE( 675)										context->setVertexBufferAt(( (int)(shader->_hx___position->index) ),vertexBuffer,0,3);
            									}
HXLINE( 676)									if (::hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE( 676)										context->setVertexBufferAt(( (int)(shader->_hx___textureCoord->index) ),vertexBuffer,3,2);
            									}
HXLINE( 677)									 ::openfl::display3D::IndexBuffer3D indexBuffer = ::openfl::_internal::renderer::context3D::Context3DGraphics_obj::blankBitmapData->getIndexBuffer(context,null());
HXLINE( 678)									context->drawTriangles(indexBuffer,null(),null());
HXLINE( 680)									shaderBufferOffset = (shaderBufferOffset + 4);
HXLINE( 686)									renderer->_hx___clearShader();
            								}
            							}
            							break;
            							case (int)12: {
HXLINE( 690)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->oPos = (data1->oPos + 2);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 690)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->iPos = (data1->iPos + 1);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 690)										data2->fPos = (data2->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->oPos = (data1->oPos + 4);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 690)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 690)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 690)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->fPos = (data1->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->fPos = (data1->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->oPos = (data1->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->fPos = (data1->fPos + 5);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 690)										data2->oPos = (data2->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->oPos = (data1->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->oPos = (data1->oPos + 2);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 690)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->oPos = (data1->oPos + 4);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 690)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 690)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 690)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->oPos = (data1->oPos + 4);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 690)										data2->iPos = (data2->iPos + 1);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 690)										data3->fPos = (data3->fPos + 2);
HXDLIN( 690)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 690)										data4->bPos = (data4->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 690)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 690)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 690)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN( 690)								 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN( 690)								 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE( 691)								 ::openfl::_Vector::FloatVector vertices = ( ( ::openfl::_Vector::FloatVector)(c->buffer->o->__get(c->oPos)) );
HXLINE( 692)								 ::openfl::_Vector::IntVector indices = ( ( ::openfl::_Vector::IntVector)(c->buffer->o->__get((c->oPos + 1))) );
HXLINE( 693)								 ::openfl::_Vector::FloatVector uvtData = ( ( ::openfl::_Vector::FloatVector)(c->buffer->o->__get((c->oPos + 2))) );
HXLINE( 694)								 ::Dynamic culling = c->buffer->o->__get((c->oPos + 3));
HXLINE( 696)								bool hasIndices = ::hx::IsNotNull( indices );
HXLINE( 697)								int numVertices = ::Math_obj::floor((( (Float)(vertices->get_length()) ) / ( (Float)(2) )));
HXLINE( 698)								int length;
HXDLIN( 698)								if (hasIndices) {
HXLINE( 698)									length = indices->get_length();
            								}
            								else {
HXLINE( 698)									length = numVertices;
            								}
HXLINE( 700)								bool hasUVData = ::hx::IsNotNull( uvtData );
HXLINE( 701)								bool hasUVTData;
HXDLIN( 701)								if (hasUVData) {
HXLINE( 701)									hasUVTData = (uvtData->get_length() >= (numVertices * 3));
            								}
            								else {
HXLINE( 701)									hasUVTData = false;
            								}
HXLINE( 702)								int vertLength;
HXDLIN( 702)								if (hasUVTData) {
HXLINE( 702)									vertLength = 4;
            								}
            								else {
HXLINE( 702)									vertLength = 2;
            								}
HXLINE( 703)								int uvStride;
HXDLIN( 703)								if (hasUVTData) {
HXLINE( 703)									uvStride = 3;
            								}
            								else {
HXLINE( 703)									uvStride = 2;
            								}
HXLINE( 705)								int dataPerVertex = (vertLength + 2);
HXLINE( 706)								 ::openfl::display3D::VertexBuffer3D vertexBuffer;
HXDLIN( 706)								if (hasUVTData) {
HXLINE( 706)									vertexBuffer = graphics->_hx___vertexBufferUVT;
            								}
            								else {
HXLINE( 706)									vertexBuffer = graphics->_hx___vertexBuffer;
            								}
HXLINE( 707)								int bufferPosition;
HXDLIN( 707)								if (hasUVTData) {
HXLINE( 707)									bufferPosition = vertexBufferPositionUVT;
            								}
            								else {
HXLINE( 707)									bufferPosition = vertexBufferPosition;
            								}
HXLINE( 709)								::Array< Float > uMatrix = renderer->_hx___getMatrix(graphics->_hx___owner->_hx___renderTransform,1);
HXLINE( 710)								 ::openfl::display::Shader shader;
HXLINE( 712)								bool _hx_tmp;
HXDLIN( 712)								if (::hx::IsNotNull( shaderBuffer )) {
HXLINE( 712)									_hx_tmp = !(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender);
            								}
            								else {
HXLINE( 712)									_hx_tmp = false;
            								}
HXDLIN( 712)								if (_hx_tmp) {
HXLINE( 714)									shader = renderer->_hx___initShaderBuffer(shaderBuffer);
HXLINE( 716)									renderer->_hx___setShaderBuffer(shaderBuffer);
HXLINE( 717)									renderer->applyMatrix(uMatrix);
HXLINE( 718)									renderer->applyBitmapData(bitmap,false,repeat);
HXLINE( 719)									renderer->applyAlpha(( (Float)(1) ));
HXLINE( 720)									renderer->applyColorTransform(null());
HXLINE( 721)									renderer->_hx___updateShaderBuffer(shaderBufferOffset);
            								}
            								else {
HXLINE( 725)									if (::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender) {
HXLINE( 725)										shader = renderer->_hx___maskShader;
            									}
            									else {
HXLINE( 725)										shader = renderer->_hx___initGraphicsShader(null());
            									}
HXLINE( 726)									renderer->setShader(shader);
HXLINE( 727)									renderer->applyMatrix(uMatrix);
HXLINE( 728)									renderer->applyBitmapData(bitmap,smooth,repeat);
HXLINE( 729)									renderer->applyAlpha(graphics->_hx___owner->_hx___worldAlpha);
HXLINE( 730)									renderer->applyColorTransform(graphics->_hx___owner->_hx___worldColorTransform);
HXLINE( 731)									renderer->updateShader();
            								}
HXLINE( 734)								if (::hx::IsNotNull( shader->_hx___position )) {
HXLINE( 735)									 ::Dynamic _hx_tmp;
HXDLIN( 735)									if (hasUVTData) {
HXLINE( 735)										_hx_tmp = 4;
            									}
            									else {
HXLINE( 735)										_hx_tmp = 2;
            									}
HXLINE( 734)									context->setVertexBufferAt(( (int)(shader->_hx___position->index) ),vertexBuffer,bufferPosition,_hx_tmp);
            								}
HXLINE( 736)								if (::hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE( 736)									context->setVertexBufferAt(( (int)(shader->_hx___textureCoord->index) ),vertexBuffer,(bufferPosition + vertLength),2);
            								}
HXLINE( 739)								 ::Dynamic _hx_switch_0 = culling;
            								if (  (_hx_switch_0==0) ){
HXLINE( 745)									context->setCulling(0);
HXDLIN( 745)									goto _hx_goto_9;
            								}
            								if (  (_hx_switch_0==1) ){
HXLINE( 748)									context->setCulling(3);
HXDLIN( 748)									goto _hx_goto_9;
            								}
            								if (  (_hx_switch_0==2) ){
HXLINE( 742)									context->setCulling(1);
HXDLIN( 742)									goto _hx_goto_9;
            								}
            								/* default */{
            								}
            								_hx_goto_9:;
HXLINE( 760)								context->_hx___drawTriangles(0,length);
HXLINE( 764)								shaderBufferOffset = (shaderBufferOffset + length);
HXLINE( 765)								if (hasUVTData) {
HXLINE( 767)									vertexBufferPositionUVT = (vertexBufferPositionUVT + (dataPerVertex * length));
            								}
            								else {
HXLINE( 771)									vertexBufferPosition = (vertexBufferPosition + (dataPerVertex * length));
            								}
HXLINE( 776)								 ::Dynamic _hx_switch_1 = culling;
            								if (  (_hx_switch_1==1) ||  (_hx_switch_1==2) ){
HXLINE( 779)									context->setCulling(0);
HXDLIN( 779)									goto _hx_goto_10;
            								}
            								/* default */{
            								}
            								_hx_goto_10:;
HXLINE( 788)								renderer->_hx___clearShader();
            							}
            							break;
            							case (int)13: {
HXLINE( 791)								bitmap = null();
HXLINE( 792)								fill = null();
HXLINE( 793)								shaderBuffer = null();
HXLINE( 794)								{
HXLINE( 794)									switch((int)(data->prev->_hx_getIndex())){
            										case (int)0: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->oPos = (data1->oPos + 2);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 794)											data2->bPos = (data2->bPos + 2);
            										}
            										break;
            										case (int)1: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->iPos = (data1->iPos + 1);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 794)											data2->fPos = (data2->fPos + 1);
            										}
            										break;
            										case (int)2: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->oPos = (data1->oPos + 4);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 794)											data2->iiPos = (data2->iiPos + 2);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 794)											data3->ffPos = (data3->ffPos + 1);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 794)											data4->fPos = (data4->fPos + 1);
            										}
            										break;
            										case (int)3: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->oPos = (data1->oPos + 1);
            										}
            										break;
            										case (int)4: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->fPos = (data1->fPos + 6);
            										}
            										break;
            										case (int)5: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->fPos = (data1->fPos + 4);
            										}
            										break;
            										case (int)6: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->fPos = (data1->fPos + 3);
            										}
            										break;
            										case (int)7: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->fPos = (data1->fPos + 4);
            										}
            										break;
            										case (int)8: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->oPos = (data1->oPos + 3);
            										}
            										break;
            										case (int)9: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->fPos = (data1->fPos + 4);
            										}
            										break;
            										case (int)10: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->fPos = (data1->fPos + 5);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 794)											data2->oPos = (data2->oPos + 1);
            										}
            										break;
            										case (int)12: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->oPos = (data1->oPos + 4);
            										}
            										break;
            										case (int)13: {
            										}
            										break;
            										case (int)14: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->oPos = (data1->oPos + 2);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 794)											data2->bPos = (data2->bPos + 2);
            										}
            										break;
            										case (int)15: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->oPos = (data1->oPos + 4);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 794)											data2->iiPos = (data2->iiPos + 2);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 794)											data3->ffPos = (data3->ffPos + 1);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 794)											data4->fPos = (data4->fPos + 1);
            										}
            										break;
            										case (int)16: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->oPos = (data1->oPos + 4);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 794)											data2->iPos = (data2->iPos + 1);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 794)											data3->fPos = (data3->fPos + 2);
HXDLIN( 794)											 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 794)											data4->bPos = (data4->bPos + 1);
            										}
            										break;
            										case (int)17: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->fPos = (data1->fPos + 2);
            										}
            										break;
            										case (int)18: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->fPos = (data1->fPos + 2);
            										}
            										break;
            										case (int)19: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->oPos = (data1->oPos + 1);
            										}
            										break;
            										case (int)20: {
HXLINE( 794)											 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 794)											data1->oPos = (data1->oPos + 1);
            										}
            										break;
            										case (int)21: case (int)22: {
            										}
            										break;
            										default:{
            										}
            									}
HXLINE( 794)									data->prev = type;
            								}
            							}
            							break;
            							case (int)18: {
HXLINE( 797)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->oPos = (data1->oPos + 2);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 797)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->iPos = (data1->iPos + 1);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 797)										data2->fPos = (data2->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->oPos = (data1->oPos + 4);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 797)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 797)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 797)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->fPos = (data1->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->fPos = (data1->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->oPos = (data1->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->fPos = (data1->fPos + 5);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 797)										data2->oPos = (data2->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->oPos = (data1->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->oPos = (data1->oPos + 2);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 797)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->oPos = (data1->oPos + 4);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 797)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 797)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 797)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->oPos = (data1->oPos + 4);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 797)										data2->iPos = (data2->iPos + 1);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 797)										data3->fPos = (data3->fPos + 2);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 797)										data4->bPos = (data4->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 797)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 797)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 797)								 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN( 797)								 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE( 798)								positionX = c->buffer->f->__get(c->fPos);
HXLINE( 799)								positionY = c->buffer->f->__get((c->fPos + 1));
            							}
            							break;
            							case (int)19: {
HXLINE( 802)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->oPos = (data1->oPos + 2);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 802)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->iPos = (data1->iPos + 1);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 802)										data2->fPos = (data2->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->oPos = (data1->oPos + 4);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 802)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 802)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 802)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->fPos = (data1->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->fPos = (data1->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->oPos = (data1->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->fPos = (data1->fPos + 5);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 802)										data2->oPos = (data2->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->oPos = (data1->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->oPos = (data1->oPos + 2);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 802)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->oPos = (data1->oPos + 4);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 802)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 802)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 802)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->oPos = (data1->oPos + 4);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 802)										data2->iPos = (data2->iPos + 1);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 802)										data3->fPos = (data3->fPos + 2);
HXDLIN( 802)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 802)										data4->bPos = (data4->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 802)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 802)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 802)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::OVERRIDE_BLEND_MODE_dyn();
HXDLIN( 802)								 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN( 802)								 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE( 803)								renderer->_hx___setBlendMode(c->buffer->o->__get(c->oPos));
            							}
            							break;
            							default:{
HXLINE( 806)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->oPos = (data1->oPos + 2);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 806)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->iPos = (data1->iPos + 1);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 806)										data2->fPos = (data2->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->oPos = (data1->oPos + 4);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 806)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 806)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 806)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->fPos = (data1->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->fPos = (data1->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->oPos = (data1->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->fPos = (data1->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->fPos = (data1->fPos + 5);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 806)										data2->oPos = (data2->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->oPos = (data1->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->oPos = (data1->oPos + 2);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 806)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->oPos = (data1->oPos + 4);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 806)										data2->iiPos = (data2->iiPos + 2);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 806)										data3->ffPos = (data3->ffPos + 1);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 806)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->oPos = (data1->oPos + 4);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 806)										data2->iPos = (data2->iPos + 1);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 806)										data3->fPos = (data3->fPos + 2);
HXDLIN( 806)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 806)										data4->bPos = (data4->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->fPos = (data1->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 806)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 806)										data1->oPos = (data1->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 806)								data->prev = type;
            							}
            						}
            					}
            				}
HXLINE( 810)				::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
            			}
HXLINE( 813)			graphics->_hx___hardwareDirty = false;
HXLINE( 814)			graphics->set___dirty(false);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DGraphics_obj,render,(void))

void Context3DGraphics_obj::renderMask( ::openfl::display::Graphics graphics, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d002914090c3588a_819_renderMask)
HXLINE( 822)		::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender = true;
HXLINE( 823)		::openfl::_internal::renderer::context3D::Context3DGraphics_obj::render(graphics,renderer);
HXLINE( 824)		::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DGraphics_obj,renderMask,(void))

void Context3DGraphics_obj::resizeIndexBuffer( ::openfl::display::Graphics graphics,bool isQuad,int length){
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_828_resizeIndexBuffer)
HXLINE( 829)		if (isQuad) {
HXLINE( 829)			return;
            		}
HXLINE( 831)		 ::lime::utils::ArrayBufferView buffer;
HXDLIN( 831)		if (isQuad) {
HXLINE( 831)			buffer = null();
            		}
            		else {
HXLINE( 831)			buffer = graphics->_hx___triangleIndexBufferData;
            		}
HXLINE( 832)		int position = 0;
HXDLIN( 832)		 ::lime::utils::ArrayBufferView newBuffer = null();
HXLINE( 835)		if (::hx::IsNull( buffer )) {
HXLINE( 837)			 ::haxe::io::Bytes buffer = null();
HXDLIN( 837)			::cpp::VirtualArray array = null();
HXDLIN( 837)			 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 837)			 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 837)			 ::Dynamic len = null();
HXDLIN( 837)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 837)			if (::hx::IsNotNull( length )) {
HXLINE( 837)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,length,6);
            			}
            			else {
HXLINE( 837)				if (::hx::IsNotNull( array )) {
HXLINE( 837)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 837)					_this->byteOffset = 0;
HXDLIN( 837)					_this->length = array->get_length();
HXDLIN( 837)					_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 837)					 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 837)					_this->buffer = this2;
HXDLIN( 837)					_this->copyFromArray(array,null());
HXDLIN( 837)					this1 = _this;
            				}
            				else {
HXLINE( 837)					if (::hx::IsNotNull( vector )) {
HXLINE( 837)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 837)						::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 837)						_this->byteOffset = 0;
HXDLIN( 837)						_this->length = array->get_length();
HXDLIN( 837)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 837)						 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 837)						_this->buffer = this2;
HXDLIN( 837)						_this->copyFromArray(array,null());
HXDLIN( 837)						this1 = _this;
            					}
            					else {
HXLINE( 837)						if (::hx::IsNotNull( view )) {
HXLINE( 837)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 837)							 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 837)							int srcLength = view->length;
HXDLIN( 837)							int srcByteOffset = view->byteOffset;
HXDLIN( 837)							int srcElementSize = view->bytesPerElement;
HXDLIN( 837)							int elementSize = _this->bytesPerElement;
HXDLIN( 837)							if ((view->type == _this->type)) {
HXLINE( 837)								int srcLength = srcData->length;
HXDLIN( 837)								int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 837)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 837)								_this->buffer = this1;
HXDLIN( 837)								_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            							}
            							else {
HXLINE( 837)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            							}
HXDLIN( 837)							_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 837)							_this->byteOffset = 0;
HXDLIN( 837)							_this->length = srcLength;
HXDLIN( 837)							this1 = _this;
            						}
            						else {
HXLINE( 837)							if (::hx::IsNotNull( buffer )) {
HXLINE( 837)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 837)								int in_byteOffset = 0;
HXDLIN( 837)								if ((in_byteOffset < 0)) {
HXLINE( 837)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN( 837)								if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 837)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN( 837)								int bufferByteLength = buffer->length;
HXDLIN( 837)								int elementSize = _this->bytesPerElement;
HXDLIN( 837)								int newByteLength = bufferByteLength;
HXDLIN( 837)								if (::hx::IsNull( len )) {
HXLINE( 837)									newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 837)									if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 837)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN( 837)									if ((newByteLength < 0)) {
HXLINE( 837)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
            								}
            								else {
HXLINE( 837)									newByteLength = (( (int)(len) ) * _this->bytesPerElement);
HXDLIN( 837)									int newRange = (in_byteOffset + newByteLength);
HXDLIN( 837)									if ((newRange > bufferByteLength)) {
HXLINE( 837)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
            								}
HXDLIN( 837)								_this->buffer = buffer;
HXDLIN( 837)								_this->byteOffset = in_byteOffset;
HXDLIN( 837)								_this->byteLength = newByteLength;
HXDLIN( 837)								_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 837)								this1 = _this;
            							}
            							else {
HXLINE( 837)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5)));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 837)			newBuffer = this1;
            		}
            		else {
HXLINE( 839)			if ((length > buffer->length)) {
HXLINE( 841)				 ::haxe::io::Bytes buffer1 = null();
HXDLIN( 841)				::cpp::VirtualArray array = null();
HXDLIN( 841)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 841)				 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 841)				 ::Dynamic len = null();
HXDLIN( 841)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 841)				if (::hx::IsNotNull( length )) {
HXLINE( 841)					this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,length,6);
            				}
            				else {
HXLINE( 841)					if (::hx::IsNotNull( array )) {
HXLINE( 841)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 841)						_this->byteOffset = 0;
HXDLIN( 841)						_this->length = array->get_length();
HXDLIN( 841)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 841)						 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 841)						_this->buffer = this2;
HXDLIN( 841)						_this->copyFromArray(array,null());
HXDLIN( 841)						this1 = _this;
            					}
            					else {
HXLINE( 841)						if (::hx::IsNotNull( vector )) {
HXLINE( 841)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 841)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 841)							_this->byteOffset = 0;
HXDLIN( 841)							_this->length = array->get_length();
HXDLIN( 841)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 841)							 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 841)							_this->buffer = this2;
HXDLIN( 841)							_this->copyFromArray(array,null());
HXDLIN( 841)							this1 = _this;
            						}
            						else {
HXLINE( 841)							if (::hx::IsNotNull( view )) {
HXLINE( 841)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 841)								 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 841)								int srcLength = view->length;
HXDLIN( 841)								int srcByteOffset = view->byteOffset;
HXDLIN( 841)								int srcElementSize = view->bytesPerElement;
HXDLIN( 841)								int elementSize = _this->bytesPerElement;
HXDLIN( 841)								if ((view->type == _this->type)) {
HXLINE( 841)									int srcLength = srcData->length;
HXDLIN( 841)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 841)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 841)									_this->buffer = this1;
HXDLIN( 841)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXLINE( 841)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN( 841)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 841)								_this->byteOffset = 0;
HXDLIN( 841)								_this->length = srcLength;
HXDLIN( 841)								this1 = _this;
            							}
            							else {
HXLINE( 841)								if (::hx::IsNotNull( buffer1 )) {
HXLINE( 841)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 841)									int in_byteOffset = 0;
HXDLIN( 841)									if ((in_byteOffset < 0)) {
HXLINE( 841)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN( 841)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 841)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN( 841)									int bufferByteLength = buffer1->length;
HXDLIN( 841)									int elementSize = _this->bytesPerElement;
HXDLIN( 841)									int newByteLength = bufferByteLength;
HXDLIN( 841)									if (::hx::IsNull( len )) {
HXLINE( 841)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 841)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 841)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 841)										if ((newByteLength < 0)) {
HXLINE( 841)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXLINE( 841)										newByteLength = (( (int)(len) ) * _this->bytesPerElement);
HXDLIN( 841)										int newRange = (in_byteOffset + newByteLength);
HXDLIN( 841)										if ((newRange > bufferByteLength)) {
HXLINE( 841)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN( 841)									_this->buffer = buffer1;
HXDLIN( 841)									_this->byteOffset = in_byteOffset;
HXDLIN( 841)									_this->byteLength = newByteLength;
HXDLIN( 841)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 841)									this1 = _this;
            								}
            								else {
HXLINE( 841)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5)));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 841)				newBuffer = this1;
HXLINE( 842)				{
HXLINE( 842)					::cpp::VirtualArray array1 = null();
HXDLIN( 842)					int offset = 0;
HXDLIN( 842)					bool _hx_tmp;
HXDLIN( 842)					if (::hx::IsNotNull( buffer )) {
HXLINE( 842)						_hx_tmp = ::hx::IsNull( array1 );
            					}
            					else {
HXLINE( 842)						_hx_tmp = false;
            					}
HXDLIN( 842)					if (_hx_tmp) {
HXLINE( 842)						newBuffer->buffer->blit((offset * newBuffer->bytesPerElement),buffer->buffer,buffer->byteOffset,buffer->byteLength);
            					}
            					else {
HXLINE( 842)						bool _hx_tmp;
HXDLIN( 842)						if (::hx::IsNotNull( array1 )) {
HXLINE( 842)							_hx_tmp = ::hx::IsNull( buffer );
            						}
            						else {
HXLINE( 842)							_hx_tmp = false;
            						}
HXDLIN( 842)						if (_hx_tmp) {
HXLINE( 842)							newBuffer->copyFromArray(array1,offset);
            						}
            						else {
HXLINE( 842)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c)));
            						}
            					}
            				}
HXLINE( 843)				position = buffer->length;
            			}
            		}
HXLINE( 847)		if (::hx::IsNotNull( newBuffer )) {
HXLINE( 849)			if (!(isQuad)) {
HXLINE( 870)				graphics->_hx___triangleIndexBufferData = newBuffer;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Context3DGraphics_obj,resizeIndexBuffer,(void))

void Context3DGraphics_obj::resizeVertexBuffer( ::openfl::display::Graphics graphics,bool hasUVTData,int length){
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_876_resizeVertexBuffer)
HXLINE( 877)		 ::lime::utils::ArrayBufferView buffer;
HXDLIN( 877)		if (hasUVTData) {
HXLINE( 877)			buffer = graphics->_hx___vertexBufferDataUVT;
            		}
            		else {
HXLINE( 877)			buffer = graphics->_hx___vertexBufferData;
            		}
HXLINE( 878)		 ::lime::utils::ArrayBufferView newBuffer = null();
HXLINE( 881)		if (::hx::IsNull( buffer )) {
HXLINE( 883)			 ::haxe::io::Bytes buffer = null();
HXDLIN( 883)			::cpp::VirtualArray array = null();
HXDLIN( 883)			 ::openfl::_Vector::FloatVector vector = null();
HXDLIN( 883)			 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 883)			 ::Dynamic len = null();
HXDLIN( 883)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 883)			if (::hx::IsNotNull( length )) {
HXLINE( 883)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,length,8);
            			}
            			else {
HXLINE( 883)				if (::hx::IsNotNull( array )) {
HXLINE( 883)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 883)					_this->byteOffset = 0;
HXDLIN( 883)					_this->length = array->get_length();
HXDLIN( 883)					_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 883)					 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 883)					_this->buffer = this2;
HXDLIN( 883)					_this->copyFromArray(array,null());
HXDLIN( 883)					this1 = _this;
            				}
            				else {
HXLINE( 883)					if (::hx::IsNotNull( vector )) {
HXLINE( 883)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 883)						::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 883)						_this->byteOffset = 0;
HXDLIN( 883)						_this->length = array->get_length();
HXDLIN( 883)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 883)						 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 883)						_this->buffer = this2;
HXDLIN( 883)						_this->copyFromArray(array,null());
HXDLIN( 883)						this1 = _this;
            					}
            					else {
HXLINE( 883)						if (::hx::IsNotNull( view )) {
HXLINE( 883)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 883)							 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 883)							int srcLength = view->length;
HXDLIN( 883)							int srcByteOffset = view->byteOffset;
HXDLIN( 883)							int srcElementSize = view->bytesPerElement;
HXDLIN( 883)							int elementSize = _this->bytesPerElement;
HXDLIN( 883)							if ((view->type == _this->type)) {
HXLINE( 883)								int srcLength = srcData->length;
HXDLIN( 883)								int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 883)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 883)								_this->buffer = this1;
HXDLIN( 883)								_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            							}
            							else {
HXLINE( 883)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            							}
HXDLIN( 883)							_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 883)							_this->byteOffset = 0;
HXDLIN( 883)							_this->length = srcLength;
HXDLIN( 883)							this1 = _this;
            						}
            						else {
HXLINE( 883)							if (::hx::IsNotNull( buffer )) {
HXLINE( 883)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 883)								int in_byteOffset = 0;
HXDLIN( 883)								if ((in_byteOffset < 0)) {
HXLINE( 883)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN( 883)								if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 883)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN( 883)								int bufferByteLength = buffer->length;
HXDLIN( 883)								int elementSize = _this->bytesPerElement;
HXDLIN( 883)								int newByteLength = bufferByteLength;
HXDLIN( 883)								if (::hx::IsNull( len )) {
HXLINE( 883)									newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 883)									if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 883)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN( 883)									if ((newByteLength < 0)) {
HXLINE( 883)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
            								}
            								else {
HXLINE( 883)									newByteLength = (( (int)(len) ) * _this->bytesPerElement);
HXDLIN( 883)									int newRange = (in_byteOffset + newByteLength);
HXDLIN( 883)									if ((newRange > bufferByteLength)) {
HXLINE( 883)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
            								}
HXDLIN( 883)								_this->buffer = buffer;
HXDLIN( 883)								_this->byteOffset = in_byteOffset;
HXDLIN( 883)								_this->byteLength = newByteLength;
HXDLIN( 883)								_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 883)								this1 = _this;
            							}
            							else {
HXLINE( 883)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4)));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 883)			newBuffer = this1;
            		}
            		else {
HXLINE( 885)			if ((length > buffer->length)) {
HXLINE( 887)				 ::haxe::io::Bytes buffer1 = null();
HXDLIN( 887)				::cpp::VirtualArray array = null();
HXDLIN( 887)				 ::openfl::_Vector::FloatVector vector = null();
HXDLIN( 887)				 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 887)				 ::Dynamic len = null();
HXDLIN( 887)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 887)				if (::hx::IsNotNull( length )) {
HXLINE( 887)					this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,length,8);
            				}
            				else {
HXLINE( 887)					if (::hx::IsNotNull( array )) {
HXLINE( 887)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 887)						_this->byteOffset = 0;
HXDLIN( 887)						_this->length = array->get_length();
HXDLIN( 887)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 887)						 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 887)						_this->buffer = this2;
HXDLIN( 887)						_this->copyFromArray(array,null());
HXDLIN( 887)						this1 = _this;
            					}
            					else {
HXLINE( 887)						if (::hx::IsNotNull( vector )) {
HXLINE( 887)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 887)							::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 887)							_this->byteOffset = 0;
HXDLIN( 887)							_this->length = array->get_length();
HXDLIN( 887)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 887)							 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 887)							_this->buffer = this2;
HXDLIN( 887)							_this->copyFromArray(array,null());
HXDLIN( 887)							this1 = _this;
            						}
            						else {
HXLINE( 887)							if (::hx::IsNotNull( view )) {
HXLINE( 887)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 887)								 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 887)								int srcLength = view->length;
HXDLIN( 887)								int srcByteOffset = view->byteOffset;
HXDLIN( 887)								int srcElementSize = view->bytesPerElement;
HXDLIN( 887)								int elementSize = _this->bytesPerElement;
HXDLIN( 887)								if ((view->type == _this->type)) {
HXLINE( 887)									int srcLength = srcData->length;
HXDLIN( 887)									int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 887)									 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 887)									_this->buffer = this1;
HXDLIN( 887)									_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXLINE( 887)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            								}
HXDLIN( 887)								_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 887)								_this->byteOffset = 0;
HXDLIN( 887)								_this->length = srcLength;
HXDLIN( 887)								this1 = _this;
            							}
            							else {
HXLINE( 887)								if (::hx::IsNotNull( buffer1 )) {
HXLINE( 887)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 887)									int in_byteOffset = 0;
HXDLIN( 887)									if ((in_byteOffset < 0)) {
HXLINE( 887)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN( 887)									if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 887)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN( 887)									int bufferByteLength = buffer1->length;
HXDLIN( 887)									int elementSize = _this->bytesPerElement;
HXDLIN( 887)									int newByteLength = bufferByteLength;
HXDLIN( 887)									if (::hx::IsNull( len )) {
HXLINE( 887)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 887)										if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 887)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
HXDLIN( 887)										if ((newByteLength < 0)) {
HXLINE( 887)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
            									else {
HXLINE( 887)										newByteLength = (( (int)(len) ) * _this->bytesPerElement);
HXDLIN( 887)										int newRange = (in_byteOffset + newByteLength);
HXDLIN( 887)										if ((newRange > bufferByteLength)) {
HXLINE( 887)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            										}
            									}
HXDLIN( 887)									_this->buffer = buffer1;
HXDLIN( 887)									_this->byteOffset = in_byteOffset;
HXDLIN( 887)									_this->byteLength = newByteLength;
HXDLIN( 887)									_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 887)									this1 = _this;
            								}
            								else {
HXLINE( 887)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4)));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 887)				newBuffer = this1;
HXLINE( 888)				{
HXLINE( 888)					::cpp::VirtualArray array1 = null();
HXDLIN( 888)					int offset = 0;
HXDLIN( 888)					bool _hx_tmp;
HXDLIN( 888)					if (::hx::IsNotNull( buffer )) {
HXLINE( 888)						_hx_tmp = ::hx::IsNull( array1 );
            					}
            					else {
HXLINE( 888)						_hx_tmp = false;
            					}
HXDLIN( 888)					if (_hx_tmp) {
HXLINE( 888)						newBuffer->buffer->blit((offset * newBuffer->bytesPerElement),buffer->buffer,buffer->byteOffset,buffer->byteLength);
            					}
            					else {
HXLINE( 888)						bool _hx_tmp;
HXDLIN( 888)						if (::hx::IsNotNull( array1 )) {
HXLINE( 888)							_hx_tmp = ::hx::IsNull( buffer );
            						}
            						else {
HXLINE( 888)							_hx_tmp = false;
            						}
HXDLIN( 888)						if (_hx_tmp) {
HXLINE( 888)							newBuffer->copyFromArray(array1,offset);
            						}
            						else {
HXLINE( 888)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c)));
            						}
            					}
            				}
            			}
            		}
HXLINE( 892)		if (::hx::IsNotNull( newBuffer )) {
HXLINE( 894)			if (hasUVTData) {
HXLINE( 894)				graphics->_hx___vertexBufferDataUVT = newBuffer;
            			}
            			else {
HXLINE( 894)				graphics->_hx___vertexBufferData = newBuffer;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Context3DGraphics_obj,resizeVertexBuffer,(void))


Context3DGraphics_obj::Context3DGraphics_obj()
{
}

bool Context3DGraphics_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maskRender") ) { outValue = ( maskRender ); return true; }
		if (HX_FIELD_EQ(inName,"renderMask") ) { outValue = renderMask_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buildBuffer") ) { outValue = buildBuffer_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isCompatible") ) { outValue = isCompatible_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blankBitmapData") ) { outValue = ( blankBitmapData ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"resizeIndexBuffer") ) { outValue = resizeIndexBuffer_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"tempColorTransform") ) { outValue = ( tempColorTransform ); return true; }
		if (HX_FIELD_EQ(inName,"resizeVertexBuffer") ) { outValue = resizeVertexBuffer_dyn(); return true; }
	}
	return false;
}

bool Context3DGraphics_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"maskRender") ) { maskRender=ioValue.Cast< bool >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blankBitmapData") ) { blankBitmapData=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"tempColorTransform") ) { tempColorTransform=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Context3DGraphics_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Context3DGraphics_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(void *) &Context3DGraphics_obj::blankBitmapData,HX_("blankBitmapData",2d,8a,0b,df)},
	{::hx::fsBool,(void *) &Context3DGraphics_obj::maskRender,HX_("maskRender",62,99,0d,1a)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(void *) &Context3DGraphics_obj::tempColorTransform,HX_("tempColorTransform",bd,e9,a6,54)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Context3DGraphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3DGraphics_obj::blankBitmapData,"blankBitmapData");
	HX_MARK_MEMBER_NAME(Context3DGraphics_obj::maskRender,"maskRender");
	HX_MARK_MEMBER_NAME(Context3DGraphics_obj::tempColorTransform,"tempColorTransform");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3DGraphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3DGraphics_obj::blankBitmapData,"blankBitmapData");
	HX_VISIT_MEMBER_NAME(Context3DGraphics_obj::maskRender,"maskRender");
	HX_VISIT_MEMBER_NAME(Context3DGraphics_obj::tempColorTransform,"tempColorTransform");
};

#endif

::hx::Class Context3DGraphics_obj::__mClass;

static ::String Context3DGraphics_obj_sStaticFields[] = {
	HX_("blankBitmapData",2d,8a,0b,df),
	HX_("maskRender",62,99,0d,1a),
	HX_("tempColorTransform",bd,e9,a6,54),
	HX_("buildBuffer",ce,a2,05,21),
	HX_("isCompatible",de,03,42,0a),
	HX_("render",56,6b,29,05),
	HX_("renderMask",62,3b,60,e5),
	HX_("resizeIndexBuffer",1e,c0,ce,b4),
	HX_("resizeVertexBuffer",98,73,d0,f4),
	::String(null())
};

void Context3DGraphics_obj::__register()
{
	Context3DGraphics_obj _hx_dummy;
	Context3DGraphics_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.renderer.context3D.Context3DGraphics",22,0a,8b,15);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3DGraphics_obj::__GetStatic;
	__mClass->mSetStaticField = &Context3DGraphics_obj::__SetStatic;
	__mClass->mMarkFunc = Context3DGraphics_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Context3DGraphics_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Context3DGraphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3DGraphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3DGraphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3DGraphics_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3DGraphics_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d002914090c3588a_33_boot)
HXDLIN(  33)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_35_boot)
HXDLIN(  35)		blankBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,1,1,false,0);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_37_boot)
HXDLIN(  37)		tempColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,1,1,1,1,0,0,0,0);
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace context3D
