// Generated by Haxe 4.1.2
#include <hxcpp.h>

#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_45de901e99b61471_209_new,"openfl.geom.Rectangle","new",0xe1148d6d,"openfl.geom.Rectangle.new","openfl/geom/Rectangle.hx",209,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_227_clone,"openfl.geom.Rectangle","clone",0x6896edaa,"openfl.geom.Rectangle.clone","openfl/geom/Rectangle.hx",227,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_241_contains,"openfl.geom.Rectangle","contains",0x39912df2,"openfl.geom.Rectangle.contains","openfl/geom/Rectangle.hx",241,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_257_containsPoint,"openfl.geom.Rectangle","containsPoint",0xa42628fe,"openfl.geom.Rectangle.containsPoint","openfl/geom/Rectangle.hx",257,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_273_containsRect,"openfl.geom.Rectangle","containsRect",0x6ba48836,"openfl.geom.Rectangle.containsRect","openfl/geom/Rectangle.hx",273,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_290_copyFrom,"openfl.geom.Rectangle","copyFrom",0xd576df92,"openfl.geom.Rectangle.copyFrom","openfl/geom/Rectangle.hx",290,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_312_equals,"openfl.geom.Rectangle","equals",0xcd1e1752,"openfl.geom.Rectangle.equals","openfl/geom/Rectangle.hx",312,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_341_inflate,"openfl.geom.Rectangle","inflate",0x84b46414,"openfl.geom.Rectangle.inflate","openfl/geom/Rectangle.hx",341,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_371_inflatePoint,"openfl.geom.Rectangle","inflatePoint",0xf7c1779c,"openfl.geom.Rectangle.inflatePoint","openfl/geom/Rectangle.hx",371,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_391_intersection,"openfl.geom.Rectangle","intersection",0x4de95b9c,"openfl.geom.Rectangle.intersection","openfl/geom/Rectangle.hx",391,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_424_intersects,"openfl.geom.Rectangle","intersects",0xc0fc7147,"openfl.geom.Rectangle.intersects","openfl/geom/Rectangle.hx",424,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_447_isEmpty,"openfl.geom.Rectangle","isEmpty",0x84f8a5d0,"openfl.geom.Rectangle.isEmpty","openfl/geom/Rectangle.hx",447,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_458_offset,"openfl.geom.Rectangle","offset",0x6d6ac0a6,"openfl.geom.Rectangle.offset","openfl/geom/Rectangle.hx",458,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_471_offsetPoint,"openfl.geom.Rectangle","offsetPoint",0xf09849ca,"openfl.geom.Rectangle.offsetPoint","openfl/geom/Rectangle.hx",471,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_486_setEmpty,"openfl.geom.Rectangle","setEmpty",0x8b24775e,"openfl.geom.Rectangle.setEmpty","openfl/geom/Rectangle.hx",486,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_498_setTo,"openfl.geom.Rectangle","setTo",0x9a636c0a,"openfl.geom.Rectangle.setTo","openfl/geom/Rectangle.hx",498,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_507_toString,"openfl.geom.Rectangle","toString",0x4584a47f,"openfl.geom.Rectangle.toString","openfl/geom/Rectangle.hx",507,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_525_union,"openfl.geom.Rectangle","union",0xc71b3f5c,"openfl.geom.Rectangle.union","openfl/geom/Rectangle.hx",525,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_544___contract,"openfl.geom.Rectangle","__contract",0xb7fb00c5,"openfl.geom.Rectangle.__contract","openfl/geom/Rectangle.hx",544,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_567___expand,"openfl.geom.Rectangle","__expand",0x79b82d4d,"openfl.geom.Rectangle.__expand","openfl/geom/Rectangle.hx",567,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_596___toLimeRectangle,"openfl.geom.Rectangle","__toLimeRectangle",0x990c368c,"openfl.geom.Rectangle.__toLimeRectangle","openfl/geom/Rectangle.hx",596,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_608___transform,"openfl.geom.Rectangle","__transform",0x05478859,"openfl.geom.Rectangle.__transform","openfl/geom/Rectangle.hx",608,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_644_get_bottom,"openfl.geom.Rectangle","get_bottom",0x33110547,"openfl.geom.Rectangle.get_bottom","openfl/geom/Rectangle.hx",644,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_648_set_bottom,"openfl.geom.Rectangle","set_bottom",0x368ea3bb,"openfl.geom.Rectangle.set_bottom","openfl/geom/Rectangle.hx",648,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_655_get_bottomRight,"openfl.geom.Rectangle","get_bottomRight",0xb804f515,"openfl.geom.Rectangle.get_bottomRight","openfl/geom/Rectangle.hx",655,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_659_set_bottomRight,"openfl.geom.Rectangle","set_bottomRight",0xb3d07221,"openfl.geom.Rectangle.set_bottomRight","openfl/geom/Rectangle.hx",659,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_667_get_left,"openfl.geom.Rectangle","get_left",0xd4809763,"openfl.geom.Rectangle.get_left","openfl/geom/Rectangle.hx",667,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_671_set_left,"openfl.geom.Rectangle","set_left",0x82ddf0d7,"openfl.geom.Rectangle.set_left","openfl/geom/Rectangle.hx",671,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_679_get_right,"openfl.geom.Rectangle","get_right",0x9310ed00,"openfl.geom.Rectangle.get_right","openfl/geom/Rectangle.hx",679,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_683_set_right,"openfl.geom.Rectangle","set_right",0x7661d90c,"openfl.geom.Rectangle.set_right","openfl/geom/Rectangle.hx",683,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_690_get_size,"openfl.geom.Rectangle","get_size",0xd924301d,"openfl.geom.Rectangle.get_size","openfl/geom/Rectangle.hx",690,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_694_set_size,"openfl.geom.Rectangle","set_size",0x87818991,"openfl.geom.Rectangle.set_size","openfl/geom/Rectangle.hx",694,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_702_get_top,"openfl.geom.Rectangle","get_top",0x9f65f6b9,"openfl.geom.Rectangle.get_top","openfl/geom/Rectangle.hx",702,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_706_set_top,"openfl.geom.Rectangle","set_top",0x926787c5,"openfl.geom.Rectangle.set_top","openfl/geom/Rectangle.hx",706,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_714_get_topLeft,"openfl.geom.Rectangle","get_topLeft",0x00437b60,"openfl.geom.Rectangle.get_topLeft","openfl/geom/Rectangle.hx",714,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_718_set_topLeft,"openfl.geom.Rectangle","set_topLeft",0x0ab0826c,"openfl.geom.Rectangle.set_topLeft","openfl/geom/Rectangle.hx",718,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_62_boot,"openfl.geom.Rectangle","boot",0x09003285,"openfl.geom.Rectangle.boot","openfl/geom/Rectangle.hx",62,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_63_boot,"openfl.geom.Rectangle","boot",0x09003285,"openfl.geom.Rectangle.boot","openfl/geom/Rectangle.hx",63,0xf2fb2b03)
namespace openfl{
namespace geom{

void Rectangle_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		Float width = __o_width.Default(0);
            		Float height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_209_new)
HXLINE( 210)		this->x = x;
HXLINE( 211)		this->y = y;
HXLINE( 212)		this->width = width;
HXLINE( 213)		this->height = height;
            	}

Dynamic Rectangle_obj::__CreateEmpty() { return new Rectangle_obj; }

void *Rectangle_obj::_hx_vtable = 0;

Dynamic Rectangle_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Rectangle_obj > _hx_result = new Rectangle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Rectangle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2e421103;
}

 ::openfl::geom::Rectangle Rectangle_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_227_clone)
HXDLIN( 227)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,this->x,this->y,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,clone,return )

bool Rectangle_obj::contains(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_241_contains)
HXDLIN( 241)		bool _hx_tmp;
HXDLIN( 241)		bool _hx_tmp1;
HXDLIN( 241)		if ((x >= this->x)) {
HXDLIN( 241)			_hx_tmp1 = (y >= this->y);
            		}
            		else {
HXDLIN( 241)			_hx_tmp1 = false;
            		}
HXDLIN( 241)		if (_hx_tmp1) {
HXDLIN( 241)			_hx_tmp = (x < this->get_right());
            		}
            		else {
HXDLIN( 241)			_hx_tmp = false;
            		}
HXDLIN( 241)		if (_hx_tmp) {
HXDLIN( 241)			return (y < this->get_bottom());
            		}
            		else {
HXDLIN( 241)			return false;
            		}
HXDLIN( 241)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,contains,return )

bool Rectangle_obj::containsPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_257_containsPoint)
HXDLIN( 257)		return this->contains(point->x,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsPoint,return )

bool Rectangle_obj::containsRect( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_273_containsRect)
HXDLIN( 273)		bool _hx_tmp;
HXDLIN( 273)		if (!((rect->width <= 0))) {
HXDLIN( 273)			_hx_tmp = (rect->height <= 0);
            		}
            		else {
HXDLIN( 273)			_hx_tmp = true;
            		}
HXDLIN( 273)		if (_hx_tmp) {
HXLINE( 275)			bool _hx_tmp;
HXDLIN( 275)			bool _hx_tmp1;
HXDLIN( 275)			if ((rect->x > this->x)) {
HXLINE( 275)				_hx_tmp1 = (rect->y > this->y);
            			}
            			else {
HXLINE( 275)				_hx_tmp1 = false;
            			}
HXDLIN( 275)			if (_hx_tmp1) {
HXLINE( 275)				Float _hx_tmp1 = rect->get_right();
HXDLIN( 275)				_hx_tmp = (_hx_tmp1 < this->get_right());
            			}
            			else {
HXLINE( 275)				_hx_tmp = false;
            			}
HXDLIN( 275)			if (_hx_tmp) {
HXLINE( 275)				Float _hx_tmp = rect->get_bottom();
HXDLIN( 275)				return (_hx_tmp < this->get_bottom());
            			}
            			else {
HXLINE( 275)				return false;
            			}
            		}
            		else {
HXLINE( 279)			bool _hx_tmp;
HXDLIN( 279)			bool _hx_tmp1;
HXDLIN( 279)			if ((rect->x >= this->x)) {
HXLINE( 279)				_hx_tmp1 = (rect->y >= this->y);
            			}
            			else {
HXLINE( 279)				_hx_tmp1 = false;
            			}
HXDLIN( 279)			if (_hx_tmp1) {
HXLINE( 279)				Float _hx_tmp1 = rect->get_right();
HXDLIN( 279)				_hx_tmp = (_hx_tmp1 <= this->get_right());
            			}
            			else {
HXLINE( 279)				_hx_tmp = false;
            			}
HXDLIN( 279)			if (_hx_tmp) {
HXLINE( 279)				Float _hx_tmp = rect->get_bottom();
HXDLIN( 279)				return (_hx_tmp <= this->get_bottom());
            			}
            			else {
HXLINE( 279)				return false;
            			}
            		}
HXLINE( 273)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsRect,return )

void Rectangle_obj::copyFrom( ::openfl::geom::Rectangle sourceRect){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_290_copyFrom)
HXLINE( 291)		this->x = sourceRect->x;
HXLINE( 292)		this->y = sourceRect->y;
HXLINE( 293)		this->width = sourceRect->width;
HXLINE( 294)		this->height = sourceRect->height;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,copyFrom,(void))

bool Rectangle_obj::equals( ::openfl::geom::Rectangle toCompare){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_312_equals)
HXDLIN( 312)		if (::hx::IsEq( toCompare,::hx::ObjectPtr<OBJ_>(this) )) {
HXDLIN( 312)			return true;
            		}
            		else {
HXLINE( 314)			bool _hx_tmp;
HXDLIN( 314)			bool _hx_tmp1;
HXDLIN( 314)			bool _hx_tmp2;
HXDLIN( 314)			if (::hx::IsNotNull( toCompare )) {
HXLINE( 314)				_hx_tmp2 = (this->x == toCompare->x);
            			}
            			else {
HXLINE( 314)				_hx_tmp2 = false;
            			}
HXDLIN( 314)			if (_hx_tmp2) {
HXLINE( 314)				_hx_tmp1 = (this->y == toCompare->y);
            			}
            			else {
HXLINE( 314)				_hx_tmp1 = false;
            			}
HXDLIN( 314)			if (_hx_tmp1) {
HXLINE( 314)				_hx_tmp = (this->width == toCompare->width);
            			}
            			else {
HXLINE( 314)				_hx_tmp = false;
            			}
HXDLIN( 314)			if (_hx_tmp) {
HXLINE( 314)				return (this->height == toCompare->height);
            			}
            			else {
HXLINE( 314)				return false;
            			}
            		}
HXLINE( 312)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,equals,return )

void Rectangle_obj::inflate(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_341_inflate)
HXLINE( 342)		 ::openfl::geom::Rectangle _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 342)		_hx_tmp->x = (_hx_tmp->x - dx);
HXLINE( 343)		 ::openfl::geom::Rectangle _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 343)		_hx_tmp1->width = (_hx_tmp1->width + (dx * ( (Float)(2) )));
HXLINE( 344)		 ::openfl::geom::Rectangle _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 344)		_hx_tmp2->y = (_hx_tmp2->y - dy);
HXLINE( 345)		 ::openfl::geom::Rectangle _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 345)		_hx_tmp3->height = (_hx_tmp3->height + (dy * ( (Float)(2) )));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,inflate,(void))

void Rectangle_obj::inflatePoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_371_inflatePoint)
HXDLIN( 371)		this->inflate(point->x,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,inflatePoint,(void))

 ::openfl::geom::Rectangle Rectangle_obj::intersection( ::openfl::geom::Rectangle toIntersect){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_391_intersection)
HXLINE( 392)		Float x0;
HXDLIN( 392)		if ((this->x < toIntersect->x)) {
HXLINE( 392)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 392)			x0 = this->x;
            		}
HXLINE( 393)		Float x1;
HXDLIN( 393)		Float x11 = this->get_right();
HXDLIN( 393)		if ((x11 > toIntersect->get_right())) {
HXLINE( 393)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 393)			x1 = this->get_right();
            		}
HXLINE( 395)		if ((x1 <= x0)) {
HXLINE( 397)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 400)		Float y0;
HXDLIN( 400)		if ((this->y < toIntersect->y)) {
HXLINE( 400)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 400)			y0 = this->y;
            		}
HXLINE( 401)		Float y1;
HXDLIN( 401)		Float y11 = this->get_bottom();
HXDLIN( 401)		if ((y11 > toIntersect->get_bottom())) {
HXLINE( 401)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 401)			y1 = this->get_bottom();
            		}
HXLINE( 403)		if ((y1 <= y0)) {
HXLINE( 405)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 408)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x0,y0,(x1 - x0),(y1 - y0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersection,return )

bool Rectangle_obj::intersects( ::openfl::geom::Rectangle toIntersect){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_424_intersects)
HXLINE( 425)		Float x0;
HXDLIN( 425)		if ((this->x < toIntersect->x)) {
HXLINE( 425)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 425)			x0 = this->x;
            		}
HXLINE( 426)		Float x1;
HXDLIN( 426)		Float x11 = this->get_right();
HXDLIN( 426)		if ((x11 > toIntersect->get_right())) {
HXLINE( 426)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 426)			x1 = this->get_right();
            		}
HXLINE( 428)		if ((x1 <= x0)) {
HXLINE( 430)			return false;
            		}
HXLINE( 433)		Float y0;
HXDLIN( 433)		if ((this->y < toIntersect->y)) {
HXLINE( 433)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 433)			y0 = this->y;
            		}
HXLINE( 434)		Float y1;
HXDLIN( 434)		Float y11 = this->get_bottom();
HXDLIN( 434)		if ((y11 > toIntersect->get_bottom())) {
HXLINE( 434)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 434)			y1 = this->get_bottom();
            		}
HXLINE( 436)		return (y1 > y0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersects,return )

bool Rectangle_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_447_isEmpty)
HXDLIN( 447)		if (!((this->width <= 0))) {
HXDLIN( 447)			return (this->height <= 0);
            		}
            		else {
HXDLIN( 447)			return true;
            		}
HXDLIN( 447)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,isEmpty,return )

void Rectangle_obj::offset(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_458_offset)
HXLINE( 459)		 ::openfl::geom::Rectangle _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 459)		_hx_tmp->x = (_hx_tmp->x + dx);
HXLINE( 460)		 ::openfl::geom::Rectangle _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 460)		_hx_tmp1->y = (_hx_tmp1->y + dy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,offset,(void))

void Rectangle_obj::offsetPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_471_offsetPoint)
HXLINE( 472)		 ::openfl::geom::Rectangle _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 472)		_hx_tmp->x = (_hx_tmp->x + point->x);
HXLINE( 473)		 ::openfl::geom::Rectangle _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 473)		_hx_tmp1->y = (_hx_tmp1->y + point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,offsetPoint,(void))

void Rectangle_obj::setEmpty(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_486_setEmpty)
HXDLIN( 486)		this->x = (this->y = (this->width = (this->height = ( (Float)(0) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,setEmpty,(void))

void Rectangle_obj::setTo(Float xa,Float ya,Float widtha,Float heighta){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_498_setTo)
HXLINE( 499)		this->x = xa;
HXLINE( 500)		this->y = ya;
HXLINE( 501)		this->width = widtha;
HXLINE( 502)		this->height = heighta;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,setTo,(void))

::String Rectangle_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_507_toString)
HXDLIN( 507)		return ((((((((HX_("(x=",ed,c2,1e,00) + this->x) + HX_(", y=",18,15,2e,1d)) + this->y) + HX_(", width=",eb,04,57,53)) + this->width) + HX_(", height=",82,32,07,68)) + this->height) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,toString,return )

 ::openfl::geom::Rectangle Rectangle_obj::_hx_union( ::openfl::geom::Rectangle toUnion){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_525_union)
HXLINE( 526)		bool _hx_tmp;
HXDLIN( 526)		if ((this->width != 0)) {
HXLINE( 526)			_hx_tmp = (this->height == 0);
            		}
            		else {
HXLINE( 526)			_hx_tmp = true;
            		}
HXDLIN( 526)		if (_hx_tmp) {
HXLINE( 528)			return toUnion->clone();
            		}
            		else {
HXLINE( 530)			bool _hx_tmp;
HXDLIN( 530)			if ((toUnion->width != 0)) {
HXLINE( 530)				_hx_tmp = (toUnion->height == 0);
            			}
            			else {
HXLINE( 530)				_hx_tmp = true;
            			}
HXDLIN( 530)			if (_hx_tmp) {
HXLINE( 532)				return this->clone();
            			}
            		}
HXLINE( 535)		Float x0;
HXDLIN( 535)		if ((this->x > toUnion->x)) {
HXLINE( 535)			x0 = toUnion->x;
            		}
            		else {
HXLINE( 535)			x0 = this->x;
            		}
HXLINE( 536)		Float x1;
HXDLIN( 536)		Float x11 = this->get_right();
HXDLIN( 536)		if ((x11 < toUnion->get_right())) {
HXLINE( 536)			x1 = toUnion->get_right();
            		}
            		else {
HXLINE( 536)			x1 = this->get_right();
            		}
HXLINE( 537)		Float y0;
HXDLIN( 537)		if ((this->y > toUnion->y)) {
HXLINE( 537)			y0 = toUnion->y;
            		}
            		else {
HXLINE( 537)			y0 = this->y;
            		}
HXLINE( 538)		Float y1;
HXDLIN( 538)		Float y11 = this->get_bottom();
HXDLIN( 538)		if ((y11 < toUnion->get_bottom())) {
HXLINE( 538)			y1 = toUnion->get_bottom();
            		}
            		else {
HXLINE( 538)			y1 = this->get_bottom();
            		}
HXLINE( 540)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x0,y0,(x1 - x0),(y1 - y0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,_hx_union,return )

void Rectangle_obj::_hx___contract(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_544___contract)
HXLINE( 545)		bool _hx_tmp;
HXDLIN( 545)		if ((this->width == 0)) {
HXLINE( 545)			_hx_tmp = (this->height == 0);
            		}
            		else {
HXLINE( 545)			_hx_tmp = false;
            		}
HXDLIN( 545)		if (_hx_tmp) {
HXLINE( 547)			return;
            		}
HXLINE( 550)		Float offsetX = ((Float)0.0);
HXLINE( 551)		Float offsetY = ((Float)0.0);
HXLINE( 552)		Float offsetRight = ((Float)0.0);
HXLINE( 553)		Float offsetBottom = ((Float)0.0);
HXLINE( 555)		if ((this->x < x)) {
HXLINE( 555)			offsetX = (x - this->x);
            		}
HXLINE( 556)		if ((this->y < y)) {
HXLINE( 556)			offsetY = (y - this->y);
            		}
HXLINE( 557)		if ((this->get_right() > (x + width))) {
HXLINE( 557)			offsetRight = ((x + width) - this->get_right());
            		}
HXLINE( 558)		if ((this->get_bottom() > (y + height))) {
HXLINE( 558)			offsetBottom = ((y + height) - this->get_bottom());
            		}
HXLINE( 560)		 ::openfl::geom::Rectangle _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 560)		_hx_tmp1->x = (_hx_tmp1->x + offsetX);
HXLINE( 561)		 ::openfl::geom::Rectangle _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 561)		_hx_tmp2->y = (_hx_tmp2->y + offsetY);
HXLINE( 562)		 ::openfl::geom::Rectangle _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 562)		_hx_tmp3->width = (_hx_tmp3->width + (offsetRight - offsetX));
HXLINE( 563)		 ::openfl::geom::Rectangle _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 563)		_hx_tmp4->height = (_hx_tmp4->height + (offsetBottom - offsetY));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,_hx___contract,(void))

void Rectangle_obj::_hx___expand(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_567___expand)
HXLINE( 568)		bool _hx_tmp;
HXDLIN( 568)		if ((this->width == 0)) {
HXLINE( 568)			_hx_tmp = (this->height == 0);
            		}
            		else {
HXLINE( 568)			_hx_tmp = false;
            		}
HXDLIN( 568)		if (_hx_tmp) {
HXLINE( 570)			this->x = x;
HXLINE( 571)			this->y = y;
HXLINE( 572)			this->width = width;
HXLINE( 573)			this->height = height;
HXLINE( 574)			return;
            		}
HXLINE( 577)		Float cacheRight = this->get_right();
HXLINE( 578)		Float cacheBottom = this->get_bottom();
HXLINE( 580)		if ((this->x > x)) {
HXLINE( 582)			this->x = x;
HXLINE( 583)			this->width = (cacheRight - x);
            		}
HXLINE( 585)		if ((this->y > y)) {
HXLINE( 587)			this->y = y;
HXLINE( 588)			this->height = (cacheBottom - y);
            		}
HXLINE( 590)		if ((cacheRight < (x + width))) {
HXLINE( 590)			this->width = ((x + width) - this->x);
            		}
HXLINE( 591)		if ((cacheBottom < (y + height))) {
HXLINE( 591)			this->height = ((y + height) - this->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,_hx___expand,(void))

 ::lime::math::Rectangle Rectangle_obj::_hx___toLimeRectangle(){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_596___toLimeRectangle)
HXLINE( 597)		if (::hx::IsNull( ::openfl::geom::Rectangle_obj::_hx___limeRectangle )) {
HXLINE( 599)			::openfl::geom::Rectangle_obj::_hx___limeRectangle =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 602)		::openfl::geom::Rectangle_obj::_hx___limeRectangle->setTo(this->x,this->y,this->width,this->height);
HXLINE( 603)		return ::openfl::geom::Rectangle_obj::_hx___limeRectangle;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,_hx___toLimeRectangle,return )

void Rectangle_obj::_hx___transform( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix m){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_608___transform)
HXLINE( 609)		Float tx0 = ((m->a * this->x) + (m->c * this->y));
HXLINE( 610)		Float tx1 = tx0;
HXLINE( 611)		Float ty0 = ((m->b * this->x) + (m->d * this->y));
HXLINE( 612)		Float ty1 = ty0;
HXLINE( 614)		Float tx = ((m->a * (this->x + this->width)) + (m->c * this->y));
HXLINE( 615)		Float ty = ((m->b * (this->x + this->width)) + (m->d * this->y));
HXLINE( 617)		if ((tx < tx0)) {
HXLINE( 617)			tx0 = tx;
            		}
HXLINE( 618)		if ((ty < ty0)) {
HXLINE( 618)			ty0 = ty;
            		}
HXLINE( 619)		if ((tx > tx1)) {
HXLINE( 619)			tx1 = tx;
            		}
HXLINE( 620)		if ((ty > ty1)) {
HXLINE( 620)			ty1 = ty;
            		}
HXLINE( 622)		tx = ((m->a * (this->x + this->width)) + (m->c * (this->y + this->height)));
HXLINE( 623)		ty = ((m->b * (this->x + this->width)) + (m->d * (this->y + this->height)));
HXLINE( 625)		if ((tx < tx0)) {
HXLINE( 625)			tx0 = tx;
            		}
HXLINE( 626)		if ((ty < ty0)) {
HXLINE( 626)			ty0 = ty;
            		}
HXLINE( 627)		if ((tx > tx1)) {
HXLINE( 627)			tx1 = tx;
            		}
HXLINE( 628)		if ((ty > ty1)) {
HXLINE( 628)			ty1 = ty;
            		}
HXLINE( 630)		tx = ((m->a * this->x) + (m->c * (this->y + this->height)));
HXLINE( 631)		ty = ((m->b * this->x) + (m->d * (this->y + this->height)));
HXLINE( 633)		if ((tx < tx0)) {
HXLINE( 633)			tx0 = tx;
            		}
HXLINE( 634)		if ((ty < ty0)) {
HXLINE( 634)			ty0 = ty;
            		}
HXLINE( 635)		if ((tx > tx1)) {
HXLINE( 635)			tx1 = tx;
            		}
HXLINE( 636)		if ((ty > ty1)) {
HXLINE( 636)			ty1 = ty;
            		}
HXLINE( 638)		rect->setTo((tx0 + m->tx),(ty0 + m->ty),(tx1 - tx0),(ty1 - ty0));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,_hx___transform,(void))

Float Rectangle_obj::get_bottom(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_644_get_bottom)
HXDLIN( 644)		return (this->y + this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottom,return )

Float Rectangle_obj::set_bottom(Float b){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_648_set_bottom)
HXLINE( 649)		this->height = (b - this->y);
HXLINE( 650)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottom,return )

 ::openfl::geom::Point Rectangle_obj::get_bottomRight(){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_655_get_bottomRight)
HXDLIN( 655)		return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(this->x + this->width),(this->y + this->height));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottomRight,return )

 ::openfl::geom::Point Rectangle_obj::set_bottomRight( ::openfl::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_659_set_bottomRight)
HXLINE( 660)		this->width = (p->x - this->x);
HXLINE( 661)		this->height = (p->y - this->y);
HXLINE( 662)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottomRight,return )

Float Rectangle_obj::get_left(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_667_get_left)
HXDLIN( 667)		return this->x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_left,return )

Float Rectangle_obj::set_left(Float l){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_671_set_left)
HXLINE( 672)		 ::openfl::geom::Rectangle _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 672)		_hx_tmp->width = (_hx_tmp->width - (l - this->x));
HXLINE( 673)		this->x = l;
HXLINE( 674)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_left,return )

Float Rectangle_obj::get_right(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_679_get_right)
HXDLIN( 679)		return (this->x + this->width);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_right,return )

Float Rectangle_obj::set_right(Float r){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_683_set_right)
HXLINE( 684)		this->width = (r - this->x);
HXLINE( 685)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_right,return )

 ::openfl::geom::Point Rectangle_obj::get_size(){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_690_get_size)
HXDLIN( 690)		return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_size,return )

 ::openfl::geom::Point Rectangle_obj::set_size( ::openfl::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_694_set_size)
HXLINE( 695)		this->width = p->x;
HXLINE( 696)		this->height = p->y;
HXLINE( 697)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_size,return )

Float Rectangle_obj::get_top(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_702_get_top)
HXDLIN( 702)		return this->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_top,return )

Float Rectangle_obj::set_top(Float t){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_706_set_top)
HXLINE( 707)		 ::openfl::geom::Rectangle _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 707)		_hx_tmp->height = (_hx_tmp->height - (t - this->y));
HXLINE( 708)		this->y = t;
HXLINE( 709)		return t;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_top,return )

 ::openfl::geom::Point Rectangle_obj::get_topLeft(){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_714_get_topLeft)
HXDLIN( 714)		return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_topLeft,return )

 ::openfl::geom::Point Rectangle_obj::set_topLeft( ::openfl::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_718_set_topLeft)
HXLINE( 719)		this->x = p->x;
HXLINE( 720)		this->y = p->y;
HXLINE( 721)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_topLeft,return )

 ::lime::math::Rectangle Rectangle_obj::_hx___limeRectangle;

 ::lime::utils::ObjectPool Rectangle_obj::_hx___pool;


::hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height) {
	::hx::ObjectPtr< Rectangle_obj > __this = new Rectangle_obj();
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

::hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height) {
	Rectangle_obj *__this = (Rectangle_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Rectangle_obj), false, "openfl.geom.Rectangle"));
	*(void **)__this = Rectangle_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

Rectangle_obj::Rectangle_obj()
{
}

::hx::Val Rectangle_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_top() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_left() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_size() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_right() ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return ::hx::Val( setTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"union") ) { return ::hx::Val( _hx_union_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bottom() ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return ::hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"offset") ) { return ::hx::Val( offset_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_topLeft() ); }
		if (HX_FIELD_EQ(inName,"inflate") ) { return ::hx::Val( inflate_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return ::hx::Val( isEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_top") ) { return ::hx::Val( get_top_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_top") ) { return ::hx::Val( set_top_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { return ::hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return ::hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"setEmpty") ) { return ::hx::Val( setEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"__expand") ) { return ::hx::Val( _hx___expand_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_left") ) { return ::hx::Val( get_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_left") ) { return ::hx::Val( set_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return ::hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return ::hx::Val( set_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_right") ) { return ::hx::Val( get_right_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_right") ) { return ::hx::Val( set_right_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"intersects") ) { return ::hx::Val( intersects_dyn() ); }
		if (HX_FIELD_EQ(inName,"__contract") ) { return ::hx::Val( _hx___contract_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottom") ) { return ::hx::Val( get_bottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottom") ) { return ::hx::Val( set_bottom_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_bottomRight() ); }
		if (HX_FIELD_EQ(inName,"offsetPoint") ) { return ::hx::Val( offsetPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return ::hx::Val( _hx___transform_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_topLeft") ) { return ::hx::Val( get_topLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_topLeft") ) { return ::hx::Val( set_topLeft_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"containsRect") ) { return ::hx::Val( containsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"inflatePoint") ) { return ::hx::Val( inflatePoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"intersection") ) { return ::hx::Val( intersection_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return ::hx::Val( containsPoint_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_bottomRight") ) { return ::hx::Val( get_bottomRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottomRight") ) { return ::hx::Val( set_bottomRight_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__toLimeRectangle") ) { return ::hx::Val( _hx___toLimeRectangle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Rectangle_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__pool") ) { outValue = ( _hx___pool ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__limeRectangle") ) { outValue = ( _hx___limeRectangle ); return true; }
	}
	return false;
}

::hx::Val Rectangle_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_top(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_left(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_size(inValue.Cast<  ::openfl::geom::Point >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_right(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_topLeft(inValue.Cast<  ::openfl::geom::Point >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bottomRight(inValue.Cast<  ::openfl::geom::Point >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Rectangle_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__pool") ) { _hx___pool=ioValue.Cast<  ::lime::utils::ObjectPool >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__limeRectangle") ) { _hx___limeRectangle=ioValue.Cast<  ::lime::math::Rectangle >(); return true; }
	}
	return false;
}

void Rectangle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bottom",eb,e6,78,65));
	outFields->push(HX_("bottomRight",f1,a0,f4,4e));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("size",c1,a0,53,4c));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("topLeft",3c,09,c1,e8));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Rectangle_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Rectangle_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsFloat,(int)offsetof(Rectangle_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsFloat,(int)offsetof(Rectangle_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Rectangle_obj,y),HX_("y",79,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Rectangle_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::lime::math::Rectangle */ ,(void *) &Rectangle_obj::_hx___limeRectangle,HX_("__limeRectangle",3a,cb,cf,63)},
	{::hx::fsObject /*  ::lime::utils::ObjectPool */ ,(void *) &Rectangle_obj::_hx___pool,HX_("__pool",fc,e3,54,f9)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Rectangle_obj_sMemberFields[] = {
	HX_("height",e7,07,4c,02),
	HX_("width",06,b6,62,ca),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("clone",5d,13,63,48),
	HX_("contains",1f,5a,7b,2c),
	HX_("containsPoint",b1,b9,eb,92),
	HX_("containsRect",e3,ce,1c,a6),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("equals",3f,ee,f2,bf),
	HX_("inflate",87,9c,1b,0c),
	HX_("inflatePoint",49,be,39,32),
	HX_("intersection",49,a2,61,88),
	HX_("intersects",b4,c2,eb,e3),
	HX_("isEmpty",43,de,5f,0c),
	HX_("offset",93,97,3f,60),
	HX_("offsetPoint",bd,37,10,5f),
	HX_("setEmpty",8b,a3,0e,7e),
	HX_("setTo",bd,91,2f,7a),
	HX_("toString",ac,d0,6e,38),
	HX_("union",0f,65,e7,a6),
	HX_("__contract",32,52,ea,da),
	HX_("__expand",7a,59,a2,6c),
	HX_("__toLimeRectangle",bf,9c,93,92),
	HX_("__transform",4c,76,bf,73),
	HX_("get_bottom",b4,56,00,56),
	HX_("set_bottom",28,f5,7d,59),
	HX_("get_bottomRight",88,58,d6,0f),
	HX_("set_bottomRight",94,d5,a1,0b),
	HX_("get_left",90,c3,6a,c7),
	HX_("set_left",04,1d,c8,75),
	HX_("get_right",33,68,0d,2d),
	HX_("set_right",3f,54,5e,10),
	HX_("get_size",4a,5c,0e,cc),
	HX_("set_size",be,b5,6b,7a),
	HX_("get_top",2c,2f,cd,26),
	HX_("set_top",38,c0,ce,19),
	HX_("get_topLeft",53,69,bb,6e),
	HX_("set_topLeft",5f,70,28,79),
	::String(null()) };

static void Rectangle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rectangle_obj::_hx___limeRectangle,"__limeRectangle");
	HX_MARK_MEMBER_NAME(Rectangle_obj::_hx___pool,"__pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rectangle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rectangle_obj::_hx___limeRectangle,"__limeRectangle");
	HX_VISIT_MEMBER_NAME(Rectangle_obj::_hx___pool,"__pool");
};

#endif

::hx::Class Rectangle_obj::__mClass;

static ::String Rectangle_obj_sStaticFields[] = {
	HX_("__limeRectangle",3a,cb,cf,63),
	HX_("__pool",fc,e3,54,f9),
	::String(null())
};

void Rectangle_obj::__register()
{
	Rectangle_obj _hx_dummy;
	Rectangle_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.geom.Rectangle",fb,52,34,b7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Rectangle_obj::__GetStatic;
	__mClass->mSetStaticField = &Rectangle_obj::__SetStatic;
	__mClass->mMarkFunc = Rectangle_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Rectangle_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Rectangle_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Rectangle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rectangle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rectangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rectangle_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Rectangle_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::geom::Rectangle _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_62_boot)
HXDLIN(  62)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::openfl::geom::Rectangle r){
            			HX_STACKFRAME(&_hx_pos_45de901e99b61471_63_boot)
HXLINE(  63)			r->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_62_boot)
HXDLIN(  62)		_hx___pool =  ::lime::utils::ObjectPool_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1()),null());
            	}
}

} // end namespace openfl
} // end namespace geom
