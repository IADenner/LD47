// Generated by Haxe 4.1.2
#include <hxcpp.h>

#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Quest
#include <Quest.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_12_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",12,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_22_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",22,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_91_hintReveal,"PlayState","hintReveal",0xd9cc6565,"PlayState.hintReveal","PlayState.hx",91,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_95_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",95,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_16_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",16,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_12_new)
HXDLIN(  12)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0a05f89d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_22_create)
HXLINE(  23)		this->super::create();
HXLINE(  24)		Float oflScaleX = ::flixel::FlxG_obj::game->get_width();
HXDLIN(  24)		Float oflScaleX1 = (oflScaleX / ( (Float)(::flixel::FlxG_obj::width) ));
HXLINE(  25)		Float oflScaleY = ::flixel::FlxG_obj::game->get_height();
HXDLIN(  25)		Float oflScaleY1 = (oflScaleY / ( (Float)(::flixel::FlxG_obj::height) ));
HXLINE(  28)		::PlayState_obj::txtRegular =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,30,400,HX_("This is a FlxText and below is an openfl.text.TextField",41,aa,99,5d),15,null());
HXLINE(  29)		this->add(::PlayState_obj::txtRegular);
HXLINE(  31)		::PlayState_obj::hint =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,240,0,HX_("This is a hint",fa,72,aa,ff),15,null());
HXLINE(  32)		this->add(::PlayState_obj::hint);
HXLINE(  33)		::PlayState_obj::hint->set_visible(false);
HXLINE(  37)		::String font = ::PlayState_obj::txtRegular->_font;
HXLINE(  39)		::PlayState_obj::_textField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  41)		::PlayState_obj::_textField->set_embedFonts(true);
HXLINE(  44)		 ::openfl::text::TextField _hx_tmp = ::PlayState_obj::_textField;
HXDLIN(  44)		_hx_tmp->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,font,::Std_obj::_hx_int((( (Float)(15) ) * oflScaleY1)),-16711681,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  47)		::PlayState_obj::_textField->set_x((( (Float)(50) ) * oflScaleX1));
HXLINE(  48)		::PlayState_obj::_textField->set_y((( (Float)(100) ) * oflScaleY1));
HXLINE(  50)		::PlayState_obj::_textField->set_width(( (Float)(300) ));
HXLINE(  51)		::PlayState_obj::_textField->set_height(( (Float)(100) ));
HXLINE(  53)		::PlayState_obj::_textField->set_text(HX_("Your answer here",05,64,65,95));
HXLINE(  54)		::PlayState_obj::_textField->set_type(1);
HXLINE(  55)		::PlayState_obj::_textField->set_multiline(true);
HXLINE(  56)		::PlayState_obj::_textField->set_wordWrap(true);
HXLINE(  57)		::PlayState_obj::_textField->set_border(true);
HXLINE(  58)		::PlayState_obj::_textField->set_borderColor(-1);
HXLINE(  59)		::PlayState_obj::_textField->set_backgroundColor(-8355712);
HXLINE(  62)		::flixel::FlxG_obj::addChildBelowMouse(::PlayState_obj::_textField,null());
HXLINE(  65)		::openfl::Lib_obj::get_current()->stage->set_focus(::PlayState_obj::_textField);
HXLINE(  68)		 ::openfl::text::TextField _hx_tmp1 = ::PlayState_obj::_textField;
HXDLIN(  68)		int _hx_tmp2 = ::PlayState_obj::_textField->get_length();
HXDLIN(  68)		_hx_tmp1->setSelection(_hx_tmp2,::PlayState_obj::_textField->get_length());
HXLINE(  70)		 ::flixel::ui::FlxButton _btnPlay =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,375,100,HX_("Hint",a7,69,e7,2f),this->hintReveal_dyn());
HXLINE(  73)		this->add(_btnPlay);
HXLINE(  75)		_btnPlay->set_y(( (Float)(100) ));
HXLINE(  77)		::PlayState_obj::quests = ::Array_obj< ::Dynamic>::__new();
HXLINE(  78)		::Array< ::Dynamic> _hx_tmp3 = ::PlayState_obj::quests;
HXDLIN(  78)		_hx_tmp3->push( ::Quest_obj::__alloc( HX_CTX ,HX_("I am the Oracle, I am the future-reader, the gods tell me your quest begins, outside a quiet amphiteater",a7,91,d2,5d),HX_("head",20,29,0b,45),0,HX_("Each of these words forms a compound word with the other three. Then, combined, they form a new compound word with a fourth word.",c3,68,44,07)));
HXLINE(  79)		::Array< ::Dynamic> _hx_tmp4 = ::PlayState_obj::quests;
HXDLIN(  79)		_hx_tmp4->push( ::Quest_obj::__alloc( HX_CTX ,HX_("Food and drink are of the divine / with wine cheese and bread / eating is great, but cooking is better / in the hall that starts with 'zed'",3a,39,37,bc),HX_("trublu",94,ae,b4,52),1,HX_("Use google to find the answers!",8b,f3,a3,68)));
HXLINE(  80)		::Array< ::Dynamic> _hx_tmp5 = ::PlayState_obj::quests;
HXDLIN(  80)		_hx_tmp5->push( ::Quest_obj::__alloc( HX_CTX ,HX_("You are getting good at uncovering/ the secrets they do keep / but to open your eyes, you must close the mouth / where the quiet LLC sleeps",8c,84,ec,d3),HX_("laurel",f9,0c,16,56),2,HX_("That's a funny looking border, huh",5c,97,4c,f7)));
HXLINE(  81)		::Array< ::Dynamic> _hx_tmp6 = ::PlayState_obj::quests;
HXDLIN(  81)		_hx_tmp6->push( ::Quest_obj::__alloc( HX_CTX ,HX_("You are doing well so far / the puzzles are getting less simple / the next place to go to continue your quest / is the heart of the Rothenberg temple",28,b8,23,6b),HX_("504",79,61,28,00),3,HX_("Using only addition and subtraction, you have to make the numbers work together. Every triangle works the same way.",3e,2f,9e,bf)));
HXLINE(  82)		::Array< ::Dynamic> _hx_tmp7 = ::PlayState_obj::quests;
HXDLIN(  82)		_hx_tmp7->push( ::Quest_obj::__alloc( HX_CTX ,HX_("You will not need a towel / the surface is green not blue / with all of these 'nots' it's hard to tell / how I can possibly give you a cue",c4,fa,3f,41),HX_("cabbage",a1,a3,c0,8b),4,HX_("Pool balls match the colored tape. Convert numbers to letters.",77,ca,d0,15)));
HXLINE(  83)		::Array< ::Dynamic> _hx_tmp8 = ::PlayState_obj::quests;
HXDLIN(  83)		_hx_tmp8->push( ::Quest_obj::__alloc( HX_CTX ,HX_W(u"Aphrodite may rule over \u2018love\u2019 / but this is not is not her domain / to court properly, you have to be free/ and within fences she cannot reign",9d4d,efb6),HX_("bitch",b2,9c,04,b3),5,HX_("Tonight is not about Apollo - God of the sun. Cross out all of the letters that make up this cosmic entity and unscramble what's left.",36,14,e2,0b)));
HXLINE(  84)		::Array< ::Dynamic> _hx_tmp9 = ::PlayState_obj::quests;
HXDLIN(  84)		_hx_tmp9->push( ::Quest_obj::__alloc( HX_CTX ,HX_W(u"You\u2019ve made it all the way here/ but to make it easy it wouldn\u2019t be fair/ in the room where parcels and packages go/ find the den of the pink polar bear.",53b1,6dee),HX_("pour one out for old bacchus",a7,57,1f,85),6,HX_("Use all of the numbers you've been told to TAKE NOTE to unscramble the pieces",57,80,36,62)));
HXLINE(  85)		::Array< ::Dynamic> _hx_tmp10 = ::PlayState_obj::quests;
HXDLIN(  85)		_hx_tmp10->push( ::Quest_obj::__alloc( HX_CTX ,HX_("You've done it! Email isaac.denner17@ncf.edu the codeword 'ORACLE404'. I'll be giving out special stickers for anyone who solves all the puzzles.",43,f6,f3,80),HX_("",00,00,00,00),7,HX_("(You finished it... stop asking for hints)",6f,28,84,78)));
            	}


void PlayState_obj::hintReveal(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_91_hintReveal)
HXDLIN(  91)		::PlayState_obj::hint->set_visible(true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,hintReveal,(void))

void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_95_update)
HXLINE(  96)		this->super::update(::flixel::FlxG_obj::elapsed);
HXLINE(  97)		{
HXLINE(  97)			int _g = 0;
HXDLIN(  97)			int _g1 = ::PlayState_obj::quests->length;
HXDLIN(  97)			while((_g < _g1)){
HXLINE(  97)				_g = (_g + 1);
HXDLIN(  97)				int i = (_g - 1);
HXLINE(  99)				::PlayState_obj::quests->__get(i).StaticCast<  ::Quest >()->update();
            			}
            		}
            	}


 ::openfl::text::TextField PlayState_obj::_textField;

 ::flixel::text::FlxText PlayState_obj::txtRegular;

int PlayState_obj::QuestNumber;

 ::flixel::text::FlxText PlayState_obj::hint;

::Array< ::Dynamic> PlayState_obj::quests;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hintReveal") ) { return ::hx::Val( hintReveal_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"hint") ) { outValue = ( hint ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"quests") ) { outValue = ( quests ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_textField") ) { outValue = ( _textField ); return true; }
		if (HX_FIELD_EQ(inName,"txtRegular") ) { outValue = ( txtRegular ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"QuestNumber") ) { outValue = ( QuestNumber ); return true; }
	}
	return false;
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"hint") ) { hint=ioValue.Cast<  ::flixel::text::FlxText >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"quests") ) { quests=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_textField") ) { _textField=ioValue.Cast<  ::openfl::text::TextField >(); return true; }
		if (HX_FIELD_EQ(inName,"txtRegular") ) { txtRegular=ioValue.Cast<  ::flixel::text::FlxText >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"QuestNumber") ) { QuestNumber=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *PlayState_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(void *) &PlayState_obj::_textField,HX_("_textField",8e,a0,23,f5)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(void *) &PlayState_obj::txtRegular,HX_("txtRegular",cc,b9,9c,3d)},
	{::hx::fsInt,(void *) &PlayState_obj::QuestNumber,HX_("QuestNumber",2b,34,19,41)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(void *) &PlayState_obj::hint,HX_("hint",87,3d,0e,45)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &PlayState_obj::quests,HX_("quests",51,da,4f,cf)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("hintReveal",f4,ef,b3,4d),
	HX_("update",09,86,05,87),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::_textField,"_textField");
	HX_MARK_MEMBER_NAME(PlayState_obj::txtRegular,"txtRegular");
	HX_MARK_MEMBER_NAME(PlayState_obj::QuestNumber,"QuestNumber");
	HX_MARK_MEMBER_NAME(PlayState_obj::hint,"hint");
	HX_MARK_MEMBER_NAME(PlayState_obj::quests,"quests");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::_textField,"_textField");
	HX_VISIT_MEMBER_NAME(PlayState_obj::txtRegular,"txtRegular");
	HX_VISIT_MEMBER_NAME(PlayState_obj::QuestNumber,"QuestNumber");
	HX_VISIT_MEMBER_NAME(PlayState_obj::hint,"hint");
	HX_VISIT_MEMBER_NAME(PlayState_obj::quests,"quests");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("_textField",8e,a0,23,f5),
	HX_("txtRegular",cc,b9,9c,3d),
	HX_("QuestNumber",2b,34,19,41),
	HX_("hint",87,3d,0e,45),
	HX_("quests",51,da,4f,cf),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_16_boot)
HXDLIN(  16)		QuestNumber = 0;
            	}
}

